<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jhmis.modules.customer.mapper.CustomerProjectProductMapper">
    
	<sql id="customerProjectProductColumns">
		a.projectcode AS "projectcode",
		a.name AS "name",
		a.count AS "count",
		a.money AS "money",
		a.address AS "address",
		a.code AS "code"
	</sql>
	
	<sql id="customerProjectProductJoins">
		
	</sql>
	
    
	<select id="get" resultType="CustomerProjectProduct" >
		SELECT 
			<include refid="customerProjectProductColumns"/>
		FROM customer_project_product a
		<include refid="customerProjectProductJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="CustomerProjectProduct" >
		SELECT 
			<include refid="customerProjectProductColumns"/>
		FROM customer_project_product a
		<include refid="customerProjectProductJoins"/>
		<where>
			
			${dataScope}
			<if test="projectcode != null and projectcode != ''">
				AND a.projectcode = #{projectcode}
			</if>
			<if test="name != null and name != ''">
				AND a.name LIKE 
					<if test="dbName == 'oracle'">'%'||#{name}||'%'</if>
					<if test="dbName == 'mssql'">'%'+#{name}+'%'</if>
					<if test="dbName == 'mysql'">concat('%',#{name},'%')</if>
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="CustomerProjectProduct" >
		SELECT 
			<include refid="customerProjectProductColumns"/>
		FROM customer_project_product a
		<include refid="customerProjectProductJoins"/>
		<where>
			
			${dataScope}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO customer_project_product(
			projectcode,
			name,
			count,
			money,
			address,
			code
		) VALUES (
			#{projectcode},
			#{name},
			#{count},
			#{money},
			#{address},
			#{code}
		)
	</insert>
	
	<update id="update">
		UPDATE customer_project_product SET 	
			projectcode = #{projectcode},
			name = #{name},
			count = #{count},
			money = #{money},
			address = #{address},
			code = #{code}
		WHERE id = #{id}
	</update>
	
	
	<!--物理删除-->
	<update id="delete">
		DELETE FROM customer_project_product
		WHERE id = #{id}
	</update>
	
	<!--逻辑删除-->
	<update id="deleteByLogic">
		UPDATE customer_project_product SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
	
	<!-- 根据实体名称和字段名称和字段值获取唯一记录 -->
	<select id="findUniqueByProperty" resultType="CustomerProjectProduct" statementType="STATEMENT">
		select * FROM customer_project_product  where ${propertyName} = '${value}'
	</select>
	
</mapper>