/**
 * ProjectWebServiceServerStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.7.4  Built on : Oct 21, 2016 (10:47:34 BST)
 */
package com.haier.webservices.client.hps;


/*
 *  ProjectWebServiceServerStub java implementation
 */
public class ProjectWebServiceServerStub extends org.apache.axis2.client.Stub {
    private static int counter = 0;
    protected org.apache.axis2.description.AxisOperation[] _operations;

    //hashmaps to keep the fault mapping
    private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
    private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
    private java.util.HashMap faultMessageMap = new java.util.HashMap();
    private javax.xml.namespace.QName[] opNameArray = null;

    /**
     *Constructor that takes in a configContext
     */
    public ProjectWebServiceServerStub(
        org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
        this(configurationContext, targetEndpoint, false);
    }

    /**
     * Constructor that takes in a configContext  and useseperate listner
     */
    public ProjectWebServiceServerStub(
        org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint, boolean useSeparateListener)
        throws org.apache.axis2.AxisFault {
        //To populate AxisService
        populateAxisService();
        populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,
                _service);

        _serviceClient.getOptions()
                      .setTo(new org.apache.axis2.addressing.EndpointReference(
                targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);
    }

    /**
     * Default Constructor
     */
    public ProjectWebServiceServerStub(
        org.apache.axis2.context.ConfigurationContext configurationContext)
        throws org.apache.axis2.AxisFault {
        this(configurationContext, "http://10.138.10.68:8090/soap/project");
    }

    /**
     * Default Constructor
     */
    public ProjectWebServiceServerStub() throws org.apache.axis2.AxisFault {
        this("http://10.138.10.68:8090/soap/project");
    }

    /**
     * Constructor taking the target endpoint
     */
    public ProjectWebServiceServerStub(java.lang.String targetEndpoint)
        throws org.apache.axis2.AxisFault {
        this(null, targetEndpoint);
    }

    private static synchronized java.lang.String getUniqueSuffix() {
        // reset the counter if it is greater than 99999
        if (counter > 99999) {
            counter = 0;
        }

        counter = counter + 1;

        return java.lang.Long.toString(java.lang.System.currentTimeMillis()) +
        "_" + counter;
    }

    private void populateAxisService() throws org.apache.axis2.AxisFault {
        //creating the Service with a unique name
        _service = new org.apache.axis2.description.AxisService(
                "ProjectWebServiceServer" + getUniqueSuffix());
        addAnonymousOperations();

        //creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[5];

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://project.funnel.api.manage.hps.com/",
                "saveProjectFromQYGNew"));
        _service.addOperation(__operation);

        _operations[0] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://project.funnel.api.manage.hps.com/",
                "queryProjectManagerFromHPS"));
        _service.addOperation(__operation);

        _operations[1] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://project.funnel.api.manage.hps.com/", "lockUserList"));
        _service.addOperation(__operation);

        _operations[2] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://project.funnel.api.manage.hps.com/",
                "saveProjectFromQYG"));
        _service.addOperation(__operation);

        _operations[3] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://project.funnel.api.manage.hps.com/",
                "queryEnterpriseList"));
        _service.addOperation(__operation);

        _operations[4] = __operation;
    }

    //populates the faults
    private void populateFaults() {
    }

    /**
     * Auto generated method signature
     *
     * @see com.haier.webservices.client.hps.ProjectWebServiceServer#saveProjectFromQYGNew
     * @param saveProjectFromQYGNew0
     */
    public com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGNewResponseE saveProjectFromQYGNew(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGNewE saveProjectFromQYGNew0)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = null;

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
            _operationClient.getOptions()
                            .setAction("http://project.funnel.api.manage.hps.com/ProjectWebServiceServer/saveProjectFromQYGNew");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    saveProjectFromQYGNew0,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://project.funnel.api.manage.hps.com/",
                            "saveProjectFromQYGNew")),
                    new javax.xml.namespace.QName(
                        "http://project.funnel.api.manage.hps.com/",
                        "saveProjectFromQYGNew"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGNewResponseE.class);

            return (com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGNewResponseE) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "saveProjectFromQYGNew"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "saveProjectFromQYGNew"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "saveProjectFromQYGNew"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see com.haier.webservices.client.hps.ProjectWebServiceServer#startsaveProjectFromQYGNew
     * @param saveProjectFromQYGNew0
     */
    public void startsaveProjectFromQYGNew(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGNewE saveProjectFromQYGNew0,
        final com.haier.webservices.client.hps.ProjectWebServiceServerCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
        _operationClient.getOptions()
                        .setAction("http://project.funnel.api.manage.hps.com/ProjectWebServiceServer/saveProjectFromQYGNew");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                saveProjectFromQYGNew0,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://project.funnel.api.manage.hps.com/",
                        "saveProjectFromQYGNew")),
                new javax.xml.namespace.QName(
                    "http://project.funnel.api.manage.hps.com/",
                    "saveProjectFromQYGNew"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGNewResponseE.class);
                        callback.receiveResultsaveProjectFromQYGNew((com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGNewResponseE) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorsaveProjectFromQYGNew(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "saveProjectFromQYGNew"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "saveProjectFromQYGNew"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "saveProjectFromQYGNew"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorsaveProjectFromQYGNew(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsaveProjectFromQYGNew(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsaveProjectFromQYGNew(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsaveProjectFromQYGNew(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsaveProjectFromQYGNew(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsaveProjectFromQYGNew(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsaveProjectFromQYGNew(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsaveProjectFromQYGNew(f);
                                }
                            } else {
                                callback.receiveErrorsaveProjectFromQYGNew(f);
                            }
                        } else {
                            callback.receiveErrorsaveProjectFromQYGNew(f);
                        }
                    } else {
                        callback.receiveErrorsaveProjectFromQYGNew(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorsaveProjectFromQYGNew(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[0].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[0].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see com.haier.webservices.client.hps.ProjectWebServiceServer#queryProjectManagerFromHPS
     * @param queryProjectManagerFromHPS2
     */
    public com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryProjectManagerFromHPSResponseE queryProjectManagerFromHPS(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryProjectManagerFromHPSE queryProjectManagerFromHPS2)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = null;

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
            _operationClient.getOptions()
                            .setAction("http://project.funnel.api.manage.hps.com/ProjectWebServiceServer/queryProjectManagerFromHPS");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    queryProjectManagerFromHPS2,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://project.funnel.api.manage.hps.com/",
                            "queryProjectManagerFromHPS")),
                    new javax.xml.namespace.QName(
                        "http://project.funnel.api.manage.hps.com/",
                        "queryProjectManagerFromHPS"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryProjectManagerFromHPSResponseE.class);

            return (com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryProjectManagerFromHPSResponseE) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(),
                                "queryProjectManagerFromHPS"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "queryProjectManagerFromHPS"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "queryProjectManagerFromHPS"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see com.haier.webservices.client.hps.ProjectWebServiceServer#startqueryProjectManagerFromHPS
     * @param queryProjectManagerFromHPS2
     */
    public void startqueryProjectManagerFromHPS(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryProjectManagerFromHPSE queryProjectManagerFromHPS2,
        final com.haier.webservices.client.hps.ProjectWebServiceServerCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
        _operationClient.getOptions()
                        .setAction("http://project.funnel.api.manage.hps.com/ProjectWebServiceServer/queryProjectManagerFromHPS");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                queryProjectManagerFromHPS2,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://project.funnel.api.manage.hps.com/",
                        "queryProjectManagerFromHPS")),
                new javax.xml.namespace.QName(
                    "http://project.funnel.api.manage.hps.com/",
                    "queryProjectManagerFromHPS"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryProjectManagerFromHPSResponseE.class);
                        callback.receiveResultqueryProjectManagerFromHPS((com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryProjectManagerFromHPSResponseE) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorqueryProjectManagerFromHPS(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "queryProjectManagerFromHPS"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "queryProjectManagerFromHPS"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "queryProjectManagerFromHPS"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorqueryProjectManagerFromHPS(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorqueryProjectManagerFromHPS(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorqueryProjectManagerFromHPS(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorqueryProjectManagerFromHPS(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorqueryProjectManagerFromHPS(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorqueryProjectManagerFromHPS(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorqueryProjectManagerFromHPS(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorqueryProjectManagerFromHPS(f);
                                }
                            } else {
                                callback.receiveErrorqueryProjectManagerFromHPS(f);
                            }
                        } else {
                            callback.receiveErrorqueryProjectManagerFromHPS(f);
                        }
                    } else {
                        callback.receiveErrorqueryProjectManagerFromHPS(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorqueryProjectManagerFromHPS(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[1].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[1].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see com.haier.webservices.client.hps.ProjectWebServiceServer#lockUserList
     * @param lockUserList4
     */
    public com.haier.webservices.client.hps.ProjectWebServiceServerStub.LockUserListResponseE lockUserList(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.LockUserListE lockUserList4)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = null;

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
            _operationClient.getOptions()
                            .setAction("http://project.funnel.api.manage.hps.com/ProjectWebServiceServer/lockUserList");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    lockUserList4,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://project.funnel.api.manage.hps.com/",
                            "lockUserList")),
                    new javax.xml.namespace.QName(
                        "http://project.funnel.api.manage.hps.com/",
                        "lockUserList"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    com.haier.webservices.client.hps.ProjectWebServiceServerStub.LockUserListResponseE.class);

            return (com.haier.webservices.client.hps.ProjectWebServiceServerStub.LockUserListResponseE) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "lockUserList"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "lockUserList"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "lockUserList"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see com.haier.webservices.client.hps.ProjectWebServiceServer#startlockUserList
     * @param lockUserList4
     */
    public void startlockUserList(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.LockUserListE lockUserList4,
        final com.haier.webservices.client.hps.ProjectWebServiceServerCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
        _operationClient.getOptions()
                        .setAction("http://project.funnel.api.manage.hps.com/ProjectWebServiceServer/lockUserList");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                lockUserList4,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://project.funnel.api.manage.hps.com/",
                        "lockUserList")),
                new javax.xml.namespace.QName(
                    "http://project.funnel.api.manage.hps.com/", "lockUserList"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                com.haier.webservices.client.hps.ProjectWebServiceServerStub.LockUserListResponseE.class);
                        callback.receiveResultlockUserList((com.haier.webservices.client.hps.ProjectWebServiceServerStub.LockUserListResponseE) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorlockUserList(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "lockUserList"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "lockUserList"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "lockUserList"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorlockUserList(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorlockUserList(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorlockUserList(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorlockUserList(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorlockUserList(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorlockUserList(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorlockUserList(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorlockUserList(f);
                                }
                            } else {
                                callback.receiveErrorlockUserList(f);
                            }
                        } else {
                            callback.receiveErrorlockUserList(f);
                        }
                    } else {
                        callback.receiveErrorlockUserList(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorlockUserList(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[2].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[2].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see com.haier.webservices.client.hps.ProjectWebServiceServer#saveProjectFromQYG
     * @param saveProjectFromQYG6
     */
    public com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGResponseE saveProjectFromQYG(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGE saveProjectFromQYG6)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = null;

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
            _operationClient.getOptions()
                            .setAction("http://project.funnel.api.manage.hps.com/ProjectWebServiceServer/saveProjectFromQYG");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    saveProjectFromQYG6,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://project.funnel.api.manage.hps.com/",
                            "saveProjectFromQYG")),
                    new javax.xml.namespace.QName(
                        "http://project.funnel.api.manage.hps.com/",
                        "saveProjectFromQYG"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGResponseE.class);

            return (com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGResponseE) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "saveProjectFromQYG"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "saveProjectFromQYG"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "saveProjectFromQYG"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see com.haier.webservices.client.hps.ProjectWebServiceServer#startsaveProjectFromQYG
     * @param saveProjectFromQYG6
     */
    public void startsaveProjectFromQYG(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGE saveProjectFromQYG6,
        final com.haier.webservices.client.hps.ProjectWebServiceServerCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
        _operationClient.getOptions()
                        .setAction("http://project.funnel.api.manage.hps.com/ProjectWebServiceServer/saveProjectFromQYG");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                saveProjectFromQYG6,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://project.funnel.api.manage.hps.com/",
                        "saveProjectFromQYG")),
                new javax.xml.namespace.QName(
                    "http://project.funnel.api.manage.hps.com/",
                    "saveProjectFromQYG"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGResponseE.class);
                        callback.receiveResultsaveProjectFromQYG((com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGResponseE) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorsaveProjectFromQYG(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "saveProjectFromQYG"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "saveProjectFromQYG"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "saveProjectFromQYG"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorsaveProjectFromQYG(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsaveProjectFromQYG(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsaveProjectFromQYG(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsaveProjectFromQYG(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsaveProjectFromQYG(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsaveProjectFromQYG(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsaveProjectFromQYG(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsaveProjectFromQYG(f);
                                }
                            } else {
                                callback.receiveErrorsaveProjectFromQYG(f);
                            }
                        } else {
                            callback.receiveErrorsaveProjectFromQYG(f);
                        }
                    } else {
                        callback.receiveErrorsaveProjectFromQYG(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorsaveProjectFromQYG(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[3].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[3].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see com.haier.webservices.client.hps.ProjectWebServiceServer#queryEnterpriseList
     * @param queryEnterpriseList8
     */
    public com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryEnterpriseListResponseE queryEnterpriseList(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryEnterpriseListE queryEnterpriseList8)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = null;

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
            _operationClient.getOptions()
                            .setAction("http://project.funnel.api.manage.hps.com/ProjectWebServiceServer/queryEnterpriseList");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    queryEnterpriseList8,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://project.funnel.api.manage.hps.com/",
                            "queryEnterpriseList")),
                    new javax.xml.namespace.QName(
                        "http://project.funnel.api.manage.hps.com/",
                        "queryEnterpriseList"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryEnterpriseListResponseE.class);

            return (com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryEnterpriseListResponseE) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "queryEnterpriseList"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "queryEnterpriseList"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "queryEnterpriseList"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see com.haier.webservices.client.hps.ProjectWebServiceServer#startqueryEnterpriseList
     * @param queryEnterpriseList8
     */
    public void startqueryEnterpriseList(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryEnterpriseListE queryEnterpriseList8,
        final com.haier.webservices.client.hps.ProjectWebServiceServerCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
        _operationClient.getOptions()
                        .setAction("http://project.funnel.api.manage.hps.com/ProjectWebServiceServer/queryEnterpriseList");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                queryEnterpriseList8,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://project.funnel.api.manage.hps.com/",
                        "queryEnterpriseList")),
                new javax.xml.namespace.QName(
                    "http://project.funnel.api.manage.hps.com/",
                    "queryEnterpriseList"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryEnterpriseListResponseE.class);
                        callback.receiveResultqueryEnterpriseList((com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryEnterpriseListResponseE) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorqueryEnterpriseList(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "queryEnterpriseList"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "queryEnterpriseList"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "queryEnterpriseList"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorqueryEnterpriseList(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorqueryEnterpriseList(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorqueryEnterpriseList(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorqueryEnterpriseList(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorqueryEnterpriseList(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorqueryEnterpriseList(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorqueryEnterpriseList(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorqueryEnterpriseList(f);
                                }
                            } else {
                                callback.receiveErrorqueryEnterpriseList(f);
                            }
                        } else {
                            callback.receiveErrorqueryEnterpriseList(f);
                        }
                    } else {
                        callback.receiveErrorqueryEnterpriseList(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorqueryEnterpriseList(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[4].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[4].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    private boolean optimizeContent(javax.xml.namespace.QName opName) {
        if (opNameArray == null) {
            return false;
        }

        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;
            }
        }

        return false;
    }

    private org.apache.axiom.om.OMElement toOM(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGNewE param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGNewE.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGNewResponseE param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGNewResponseE.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryProjectManagerFromHPSE param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryProjectManagerFromHPSE.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryProjectManagerFromHPSResponseE param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryProjectManagerFromHPSResponseE.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.LockUserListE param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.haier.webservices.client.hps.ProjectWebServiceServerStub.LockUserListE.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.LockUserListResponseE param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.haier.webservices.client.hps.ProjectWebServiceServerStub.LockUserListResponseE.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGE param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGE.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGResponseE param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGResponseE.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryEnterpriseListE param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryEnterpriseListE.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryEnterpriseListResponseE param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryEnterpriseListResponseE.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGNewE param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGNewE.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryProjectManagerFromHPSE param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryProjectManagerFromHPSE.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.LockUserListE param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    com.haier.webservices.client.hps.ProjectWebServiceServerStub.LockUserListE.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGE param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGE.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryEnterpriseListE param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryEnterpriseListE.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */

    /**
     *  get the default envelope
     */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory) {
        return factory.getDefaultEnvelope();
    }

    private java.lang.Object fromOM(org.apache.axiom.om.OMElement param,
        java.lang.Class type) throws org.apache.axis2.AxisFault {
        try {
            if (com.haier.webservices.client.hps.ProjectWebServiceServerStub.LockUserListE.class.equals(
                        type)) {
                return com.haier.webservices.client.hps.ProjectWebServiceServerStub.LockUserListE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.haier.webservices.client.hps.ProjectWebServiceServerStub.LockUserListResponseE.class.equals(
                        type)) {
                return com.haier.webservices.client.hps.ProjectWebServiceServerStub.LockUserListResponseE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryEnterpriseListE.class.equals(
                        type)) {
                return com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryEnterpriseListE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryEnterpriseListResponseE.class.equals(
                        type)) {
                return com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryEnterpriseListResponseE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryProjectManagerFromHPSE.class.equals(
                        type)) {
                return com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryProjectManagerFromHPSE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryProjectManagerFromHPSResponseE.class.equals(
                        type)) {
                return com.haier.webservices.client.hps.ProjectWebServiceServerStub.QueryProjectManagerFromHPSResponseE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGE.class.equals(
                        type)) {
                return com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGNewE.class.equals(
                        type)) {
                return com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGNewE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGNewResponseE.class.equals(
                        type)) {
                return com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGNewResponseE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGResponseE.class.equals(
                        type)) {
                return com.haier.webservices.client.hps.ProjectWebServiceServerStub.SaveProjectFromQYGResponseE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

        return null;
    }

    //http://10.138.10.68:8090/soap/project
    public static class QueryProjectManagerFromHPSResponseE implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://project.funnel.api.manage.hps.com/",
                "queryProjectManagerFromHPSResponse", "ns1");

        /**
         * field for QueryProjectManagerFromHPSResponse
         */
        protected QueryProjectManagerFromHPSResponse localQueryProjectManagerFromHPSResponse;

        /**
         * Auto generated getter method
         * @return QueryProjectManagerFromHPSResponse
         */
        public QueryProjectManagerFromHPSResponse getQueryProjectManagerFromHPSResponse() {
            return localQueryProjectManagerFromHPSResponse;
        }

        /**
         * Auto generated setter method
         * @param param QueryProjectManagerFromHPSResponse
         */
        public void setQueryProjectManagerFromHPSResponse(
            QueryProjectManagerFromHPSResponse param) {
            this.localQueryProjectManagerFromHPSResponse = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localQueryProjectManagerFromHPSResponse == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "queryProjectManagerFromHPSResponse cannot be null!");
            }

            localQueryProjectManagerFromHPSResponse.serialize(MY_QNAME,
                xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static QueryProjectManagerFromHPSResponseE parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                QueryProjectManagerFromHPSResponseE object = new QueryProjectManagerFromHPSResponseE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if ((reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://project.funnel.api.manage.hps.com/",
                                        "queryProjectManagerFromHPSResponse").equals(
                                        reader.getName())) ||
                                    new javax.xml.namespace.QName("",
                                        "queryProjectManagerFromHPSResponse").equals(
                                        reader.getName())) {
                                object.setQueryProjectManagerFromHPSResponse(QueryProjectManagerFromHPSResponse.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class QueryProjectManagerFromHPSResponse implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = queryProjectManagerFromHPSResponse
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for _return
         * This was an Array!
         */
        protected UserDTO[] local_return;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean local_returnTracker = false;

        public boolean is_returnSpecified() {
            return local_returnTracker;
        }

        /**
         * Auto generated getter method
         * @return UserDTO[]
         */
        public UserDTO[] get_return() {
            return local_return;
        }

        /**
         * validate the array for _return
         */
        protected void validate_return(UserDTO[] param) {
        }

        /**
         * Auto generated setter method
         * @param param _return
         */
        public void set_return(UserDTO[] param) {
            validate_return(param);

            local_returnTracker = param != null;

            this.local_return = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param UserDTO
         */
        public void add_return(UserDTO param) {
            if (local_return == null) {
                local_return = new UserDTO[] {  };
            }

            //update the setting tracker
            local_returnTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);
            list.add(param);
            this.local_return = (UserDTO[]) list.toArray(new UserDTO[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://project.funnel.api.manage.hps.com/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":queryProjectManagerFromHPSResponse", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "queryProjectManagerFromHPSResponse", xmlWriter);
                }
            }

            if (local_returnTracker) {
                if (local_return != null) {
                    for (int i = 0; i < local_return.length; i++) {
                        if (local_return[i] != null) {
                            local_return[i].serialize(new javax.xml.namespace.QName(
                                    "", "return"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "return cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static QueryProjectManagerFromHPSResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                QueryProjectManagerFromHPSResponse object = new QueryProjectManagerFromHPSResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"queryProjectManagerFromHPSResponse".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (QueryProjectManagerFromHPSResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "return").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "return").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(UserDTO.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("", "return").equals(
                                            reader.getName())) {
                                    list1.add(UserDTO.Factory.parse(reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.set_return((UserDTO[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                UserDTO.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class SaveProjectFromQYG implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = saveProjectFromQYG
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for Arg0
         * This was an Array!
         */
        protected ProjectSaveParam[] localArg0;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localArg0Tracker = false;

        public boolean isArg0Specified() {
            return localArg0Tracker;
        }

        /**
         * Auto generated getter method
         * @return ProjectSaveParam[]
         */
        public ProjectSaveParam[] getArg0() {
            return localArg0;
        }

        /**
         * validate the array for Arg0
         */
        protected void validateArg0(ProjectSaveParam[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Arg0
         */
        public void setArg0(ProjectSaveParam[] param) {
            validateArg0(param);

            localArg0Tracker = param != null;

            this.localArg0 = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param ProjectSaveParam
         */
        public void addArg0(ProjectSaveParam param) {
            if (localArg0 == null) {
                localArg0 = new ProjectSaveParam[] {  };
            }

            //update the setting tracker
            localArg0Tracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localArg0);
            list.add(param);
            this.localArg0 = (ProjectSaveParam[]) list.toArray(new ProjectSaveParam[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://project.funnel.api.manage.hps.com/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":saveProjectFromQYG", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "saveProjectFromQYG", xmlWriter);
                }
            }

            if (localArg0Tracker) {
                if (localArg0 != null) {
                    for (int i = 0; i < localArg0.length; i++) {
                        if (localArg0[i] != null) {
                            localArg0[i].serialize(new javax.xml.namespace.QName(
                                    "", "arg0"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "arg0 cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SaveProjectFromQYG parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                SaveProjectFromQYG object = new SaveProjectFromQYG();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"saveProjectFromQYG".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (SaveProjectFromQYG) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "arg0").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "arg0").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(ProjectSaveParam.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("", "arg0").equals(
                                            reader.getName())) {
                                    list1.add(ProjectSaveParam.Factory.parse(
                                            reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setArg0((ProjectSaveParam[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                ProjectSaveParam.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ProjectRFiveSaveParam extends ToString implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = projectRFiveSaveParam
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for BeWinBid
         */
        protected boolean localBeWinBid;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeWinBidTracker = false;

        /**
         * field for CenterPoolProportion
         */
        protected java.math.BigDecimal localCenterPoolProportion;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCenterPoolProportionTracker = false;

        /**
         * field for CreatedById
         */
        protected java.lang.String localCreatedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedByIdTracker = false;

        /**
         * field for EstimatedTimeDelivery
         */
        protected java.util.Calendar localEstimatedTimeDelivery;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEstimatedTimeDeliveryTracker = false;

        /**
         * field for EstimatedTimeSigning
         */
        protected java.util.Calendar localEstimatedTimeSigning;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEstimatedTimeSigningTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for LastModifiedById
         */
        protected java.lang.String localLastModifiedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastModifiedByIdTracker = false;

        /**
         * field for ProjectId
         */
        protected java.lang.String localProjectId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectIdTracker = false;

        /**
         * field for ProjectManagerCode
         */
        protected java.lang.String localProjectManagerCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectManagerCodeTracker = false;

        /**
         * field for ProjectManagerId
         */
        protected java.lang.String localProjectManagerId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectManagerIdTracker = false;

        /**
         * field for ProjectManagerName
         */
        protected java.lang.String localProjectManagerName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectManagerNameTracker = false;

        /**
         * field for WinBidMessage
         */
        protected java.lang.String localWinBidMessage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWinBidMessageTracker = false;

        /**
         * field for WinBidTime
         */
        protected java.util.Calendar localWinBidTime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWinBidTimeTracker = false;

        public boolean isBeWinBidSpecified() {
            return localBeWinBidTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeWinBid() {
            return localBeWinBid;
        }

        /**
         * Auto generated setter method
         * @param param BeWinBid
         */
        public void setBeWinBid(boolean param) {
            // setting primitive attribute tracker to true
            localBeWinBidTracker = true;

            this.localBeWinBid = param;
        }

        public boolean isCenterPoolProportionSpecified() {
            return localCenterPoolProportionTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getCenterPoolProportion() {
            return localCenterPoolProportion;
        }

        /**
         * Auto generated setter method
         * @param param CenterPoolProportion
         */
        public void setCenterPoolProportion(java.math.BigDecimal param) {
            localCenterPoolProportionTracker = param != null;

            this.localCenterPoolProportion = param;
        }

        public boolean isCreatedByIdSpecified() {
            return localCreatedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreatedById() {
            return localCreatedById;
        }

        /**
         * Auto generated setter method
         * @param param CreatedById
         */
        public void setCreatedById(java.lang.String param) {
            localCreatedByIdTracker = param != null;

            this.localCreatedById = param;
        }

        public boolean isEstimatedTimeDeliverySpecified() {
            return localEstimatedTimeDeliveryTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getEstimatedTimeDelivery() {
            return localEstimatedTimeDelivery;
        }

        /**
         * Auto generated setter method
         * @param param EstimatedTimeDelivery
         */
        public void setEstimatedTimeDelivery(java.util.Calendar param) {
            localEstimatedTimeDeliveryTracker = param != null;

            this.localEstimatedTimeDelivery = param;
        }

        public boolean isEstimatedTimeSigningSpecified() {
            return localEstimatedTimeSigningTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getEstimatedTimeSigning() {
            return localEstimatedTimeSigning;
        }

        /**
         * Auto generated setter method
         * @param param EstimatedTimeSigning
         */
        public void setEstimatedTimeSigning(java.util.Calendar param) {
            localEstimatedTimeSigningTracker = param != null;

            this.localEstimatedTimeSigning = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        public boolean isLastModifiedByIdSpecified() {
            return localLastModifiedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLastModifiedById() {
            return localLastModifiedById;
        }

        /**
         * Auto generated setter method
         * @param param LastModifiedById
         */
        public void setLastModifiedById(java.lang.String param) {
            localLastModifiedByIdTracker = param != null;

            this.localLastModifiedById = param;
        }

        public boolean isProjectIdSpecified() {
            return localProjectIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectId() {
            return localProjectId;
        }

        /**
         * Auto generated setter method
         * @param param ProjectId
         */
        public void setProjectId(java.lang.String param) {
            localProjectIdTracker = param != null;

            this.localProjectId = param;
        }

        public boolean isProjectManagerCodeSpecified() {
            return localProjectManagerCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectManagerCode() {
            return localProjectManagerCode;
        }

        /**
         * Auto generated setter method
         * @param param ProjectManagerCode
         */
        public void setProjectManagerCode(java.lang.String param) {
            localProjectManagerCodeTracker = param != null;

            this.localProjectManagerCode = param;
        }

        public boolean isProjectManagerIdSpecified() {
            return localProjectManagerIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectManagerId() {
            return localProjectManagerId;
        }

        /**
         * Auto generated setter method
         * @param param ProjectManagerId
         */
        public void setProjectManagerId(java.lang.String param) {
            localProjectManagerIdTracker = param != null;

            this.localProjectManagerId = param;
        }

        public boolean isProjectManagerNameSpecified() {
            return localProjectManagerNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectManagerName() {
            return localProjectManagerName;
        }

        /**
         * Auto generated setter method
         * @param param ProjectManagerName
         */
        public void setProjectManagerName(java.lang.String param) {
            localProjectManagerNameTracker = param != null;

            this.localProjectManagerName = param;
        }

        public boolean isWinBidMessageSpecified() {
            return localWinBidMessageTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getWinBidMessage() {
            return localWinBidMessage;
        }

        /**
         * Auto generated setter method
         * @param param WinBidMessage
         */
        public void setWinBidMessage(java.lang.String param) {
            localWinBidMessageTracker = param != null;

            this.localWinBidMessage = param;
        }

        public boolean isWinBidTimeSpecified() {
            return localWinBidTimeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getWinBidTime() {
            return localWinBidTime;
        }

        /**
         * Auto generated setter method
         * @param param WinBidTime
         */
        public void setWinBidTime(java.util.Calendar param) {
            localWinBidTimeTracker = param != null;

            this.localWinBidTime = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":projectRFiveSaveParam", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "projectRFiveSaveParam", xmlWriter);
            }

            if (localBeWinBidTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beWinBid", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beWinBid cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeWinBid));
                }

                xmlWriter.writeEndElement();
            }

            if (localCenterPoolProportionTracker) {
                namespace = "";
                writeStartElement(null, namespace, "centerPoolProportion",
                    xmlWriter);

                if (localCenterPoolProportion == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "centerPoolProportion cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCenterPoolProportion));
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdById", xmlWriter);

                if (localCreatedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreatedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localEstimatedTimeDeliveryTracker) {
                namespace = "";
                writeStartElement(null, namespace, "estimatedTimeDelivery",
                    xmlWriter);

                if (localEstimatedTimeDelivery == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "estimatedTimeDelivery cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEstimatedTimeDelivery));
                }

                xmlWriter.writeEndElement();
            }

            if (localEstimatedTimeSigningTracker) {
                namespace = "";
                writeStartElement(null, namespace, "estimatedTimeSigning",
                    xmlWriter);

                if (localEstimatedTimeSigning == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "estimatedTimeSigning cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEstimatedTimeSigning));
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedById", xmlWriter);

                if (localLastModifiedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastModifiedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectId", xmlWriter);

                if (localProjectId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectId);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectManagerCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectManagerCode",
                    xmlWriter);

                if (localProjectManagerCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectManagerCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectManagerCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectManagerIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectManagerId", xmlWriter);

                if (localProjectManagerId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectManagerId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectManagerId);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectManagerNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectManagerName",
                    xmlWriter);

                if (localProjectManagerName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectManagerName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectManagerName);
                }

                xmlWriter.writeEndElement();
            }

            if (localWinBidMessageTracker) {
                namespace = "";
                writeStartElement(null, namespace, "winBidMessage", xmlWriter);

                if (localWinBidMessage == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "winBidMessage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localWinBidMessage);
                }

                xmlWriter.writeEndElement();
            }

            if (localWinBidTimeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "winBidTime", xmlWriter);

                if (localWinBidTime == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "winBidTime cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWinBidTime));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ProjectRFiveSaveParam parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ProjectRFiveSaveParam object = new ProjectRFiveSaveParam();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"projectRFiveSaveParam".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ProjectRFiveSaveParam) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beWinBid").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beWinBid").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beWinBid" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeWinBid(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "centerPoolProportion").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "centerPoolProportion").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "centerPoolProportion" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCenterPoolProportion(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "estimatedTimeDelivery").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "estimatedTimeDelivery").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "estimatedTimeDelivery" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEstimatedTimeDelivery(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "estimatedTimeSigning").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "estimatedTimeSigning").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "estimatedTimeSigning" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEstimatedTimeSigning(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectManagerCode").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectManagerCode").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectManagerCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectManagerCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectManagerId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectManagerId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectManagerId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectManagerId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectManagerName").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectManagerName").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectManagerName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectManagerName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "winBidMessage").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "winBidMessage").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "winBidMessage" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setWinBidMessage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "winBidTime").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "winBidTime").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "winBidTime" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setWinBidTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class QueryProjectManagerFromHPS implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = queryProjectManagerFromHPS
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for Arg0
         */
        protected ProjectROneSaveParam localArg0;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localArg0Tracker = false;

        public boolean isArg0Specified() {
            return localArg0Tracker;
        }

        /**
         * Auto generated getter method
         * @return ProjectROneSaveParam
         */
        public ProjectROneSaveParam getArg0() {
            return localArg0;
        }

        /**
         * Auto generated setter method
         * @param param Arg0
         */
        public void setArg0(ProjectROneSaveParam param) {
            localArg0Tracker = param != null;

            this.localArg0 = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://project.funnel.api.manage.hps.com/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":queryProjectManagerFromHPS",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "queryProjectManagerFromHPS", xmlWriter);
                }
            }

            if (localArg0Tracker) {
                if (localArg0 == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "arg0 cannot be null!!");
                }

                localArg0.serialize(new javax.xml.namespace.QName("", "arg0"),
                    xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static QueryProjectManagerFromHPS parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                QueryProjectManagerFromHPS object = new QueryProjectManagerFromHPS();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"queryProjectManagerFromHPS".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (QueryProjectManagerFromHPS) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "arg0").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "arg0").equals(
                                reader.getName())) {
                        object.setArg0(ProjectROneSaveParam.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class BasicDto extends ToString implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = basicDto
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for BatchDate
         */
        protected java.util.Calendar localBatchDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBatchDateTracker = false;

        /**
         * field for CreProId
         */
        protected java.lang.String localCreProId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreProIdTracker = false;

        /**
         * field for CreatedBy
         */
        protected java.lang.String localCreatedBy;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedByTracker = false;

        /**
         * field for CreatedDate
         */
        protected java.util.Calendar localCreatedDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedDateTracker = false;

        /**
         * field for Deleted
         */
        protected boolean localDeleted;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDeletedTracker = false;

        /**
         * field for LastModifiedBy
         */
        protected java.lang.String localLastModifiedBy;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastModifiedByTracker = false;

        /**
         * field for LastModifiedDate
         */
        protected java.util.Calendar localLastModifiedDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastModifiedDateTracker = false;

        /**
         * field for ModProId
         */
        protected java.lang.String localModProId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localModProIdTracker = false;

        public boolean isBatchDateSpecified() {
            return localBatchDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getBatchDate() {
            return localBatchDate;
        }

        /**
         * Auto generated setter method
         * @param param BatchDate
         */
        public void setBatchDate(java.util.Calendar param) {
            localBatchDateTracker = param != null;

            this.localBatchDate = param;
        }

        public boolean isCreProIdSpecified() {
            return localCreProIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreProId() {
            return localCreProId;
        }

        /**
         * Auto generated setter method
         * @param param CreProId
         */
        public void setCreProId(java.lang.String param) {
            localCreProIdTracker = param != null;

            this.localCreProId = param;
        }

        public boolean isCreatedBySpecified() {
            return localCreatedByTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreatedBy() {
            return localCreatedBy;
        }

        /**
         * Auto generated setter method
         * @param param CreatedBy
         */
        public void setCreatedBy(java.lang.String param) {
            localCreatedByTracker = param != null;

            this.localCreatedBy = param;
        }

        public boolean isCreatedDateSpecified() {
            return localCreatedDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getCreatedDate() {
            return localCreatedDate;
        }

        /**
         * Auto generated setter method
         * @param param CreatedDate
         */
        public void setCreatedDate(java.util.Calendar param) {
            localCreatedDateTracker = param != null;

            this.localCreatedDate = param;
        }

        public boolean isDeletedSpecified() {
            return localDeletedTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getDeleted() {
            return localDeleted;
        }

        /**
         * Auto generated setter method
         * @param param Deleted
         */
        public void setDeleted(boolean param) {
            // setting primitive attribute tracker to true
            localDeletedTracker = true;

            this.localDeleted = param;
        }

        public boolean isLastModifiedBySpecified() {
            return localLastModifiedByTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLastModifiedBy() {
            return localLastModifiedBy;
        }

        /**
         * Auto generated setter method
         * @param param LastModifiedBy
         */
        public void setLastModifiedBy(java.lang.String param) {
            localLastModifiedByTracker = param != null;

            this.localLastModifiedBy = param;
        }

        public boolean isLastModifiedDateSpecified() {
            return localLastModifiedDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getLastModifiedDate() {
            return localLastModifiedDate;
        }

        /**
         * Auto generated setter method
         * @param param LastModifiedDate
         */
        public void setLastModifiedDate(java.util.Calendar param) {
            localLastModifiedDateTracker = param != null;

            this.localLastModifiedDate = param;
        }

        public boolean isModProIdSpecified() {
            return localModProIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getModProId() {
            return localModProId;
        }

        /**
         * Auto generated setter method
         * @param param ModProId
         */
        public void setModProId(java.lang.String param) {
            localModProIdTracker = param != null;

            this.localModProId = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":basicDto", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "basicDto", xmlWriter);
            }

            if (localBatchDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "batchDate", xmlWriter);

                if (localBatchDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "batchDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBatchDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localCreProIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "creProId", xmlWriter);

                if (localCreProId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "creProId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreProId);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedByTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdBy", xmlWriter);

                if (localCreatedBy == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdBy cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreatedBy);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdDate", xmlWriter);

                if (localCreatedDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCreatedDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localDeletedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "deleted", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "deleted cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDeleted));
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedByTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedBy", xmlWriter);

                if (localLastModifiedBy == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedBy cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastModifiedBy);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedDate", xmlWriter);

                if (localLastModifiedDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLastModifiedDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localModProIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "modProId", xmlWriter);

                if (localModProId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "modProId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localModProId);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static BasicDto parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                BasicDto object = null;

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"basicDto".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (BasicDto) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }

                            throw new org.apache.axis2.databinding.ADBException(
                                "The an abstract class can not be instantiated !!!");
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "batchDate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "batchDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "batchDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBatchDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "creProId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "creProId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "creProId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreProId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdBy").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdBy").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdBy" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedBy(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdDate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "deleted").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "deleted").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "deleted" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDeleted(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedBy").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedBy").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedBy" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedBy(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedDate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "modProId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "modProId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "modProId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setModProId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class SaveProjectFromQYGE implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://project.funnel.api.manage.hps.com/",
                "saveProjectFromQYG", "ns1");

        /**
         * field for SaveProjectFromQYG
         */
        protected SaveProjectFromQYG localSaveProjectFromQYG;

        /**
         * Auto generated getter method
         * @return SaveProjectFromQYG
         */
        public SaveProjectFromQYG getSaveProjectFromQYG() {
            return localSaveProjectFromQYG;
        }

        /**
         * Auto generated setter method
         * @param param SaveProjectFromQYG
         */
        public void setSaveProjectFromQYG(SaveProjectFromQYG param) {
            this.localSaveProjectFromQYG = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localSaveProjectFromQYG == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "saveProjectFromQYG cannot be null!");
            }

            localSaveProjectFromQYG.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SaveProjectFromQYGE parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                SaveProjectFromQYGE object = new SaveProjectFromQYGE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if ((reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://project.funnel.api.manage.hps.com/",
                                        "saveProjectFromQYG").equals(
                                        reader.getName())) ||
                                    new javax.xml.namespace.QName("",
                                        "saveProjectFromQYG").equals(
                                        reader.getName())) {
                                object.setSaveProjectFromQYG(SaveProjectFromQYG.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ProjectPurchaseForecastSaveParam extends ToString
        implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = projectPurchaseForecastSaveParam
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for BeWisdom
         */
        protected boolean localBeWisdom;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeWisdomTracker = false;

        /**
         * field for Brand
         */
        protected java.lang.String localBrand;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBrandTracker = false;

        /**
         * field for CreatedById
         */
        protected java.lang.String localCreatedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedByIdTracker = false;

        /**
         * field for EstimatedQuantity
         */
        protected long localEstimatedQuantity;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEstimatedQuantityTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for IndustryLine
         */
        protected java.lang.String localIndustryLine;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIndustryLineTracker = false;

        /**
         * field for LastModifiedById
         */
        protected java.lang.String localLastModifiedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastModifiedByIdTracker = false;

        /**
         * field for ProductGroup
         */
        protected java.lang.String localProductGroup;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductGroupTracker = false;

        /**
         * field for ProjectId
         */
        protected java.lang.String localProjectId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectIdTracker = false;

        /**
         * field for PurchaseBudget
         */
        protected java.math.BigDecimal localPurchaseBudget;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPurchaseBudgetTracker = false;

        public boolean isBeWisdomSpecified() {
            return localBeWisdomTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeWisdom() {
            return localBeWisdom;
        }

        /**
         * Auto generated setter method
         * @param param BeWisdom
         */
        public void setBeWisdom(boolean param) {
            // setting primitive attribute tracker to true
            localBeWisdomTracker = true;

            this.localBeWisdom = param;
        }

        public boolean isBrandSpecified() {
            return localBrandTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBrand() {
            return localBrand;
        }

        /**
         * Auto generated setter method
         * @param param Brand
         */
        public void setBrand(java.lang.String param) {
            localBrandTracker = param != null;

            this.localBrand = param;
        }

        public boolean isCreatedByIdSpecified() {
            return localCreatedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreatedById() {
            return localCreatedById;
        }

        /**
         * Auto generated setter method
         * @param param CreatedById
         */
        public void setCreatedById(java.lang.String param) {
            localCreatedByIdTracker = param != null;

            this.localCreatedById = param;
        }

        public boolean isEstimatedQuantitySpecified() {
            return localEstimatedQuantityTracker;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getEstimatedQuantity() {
            return localEstimatedQuantity;
        }

        /**
         * Auto generated setter method
         * @param param EstimatedQuantity
         */
        public void setEstimatedQuantity(long param) {
            // setting primitive attribute tracker to true
            localEstimatedQuantityTracker = param != java.lang.Long.MIN_VALUE;

            this.localEstimatedQuantity = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        public boolean isIndustryLineSpecified() {
            return localIndustryLineTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getIndustryLine() {
            return localIndustryLine;
        }

        /**
         * Auto generated setter method
         * @param param IndustryLine
         */
        public void setIndustryLine(java.lang.String param) {
            localIndustryLineTracker = param != null;

            this.localIndustryLine = param;
        }

        public boolean isLastModifiedByIdSpecified() {
            return localLastModifiedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLastModifiedById() {
            return localLastModifiedById;
        }

        /**
         * Auto generated setter method
         * @param param LastModifiedById
         */
        public void setLastModifiedById(java.lang.String param) {
            localLastModifiedByIdTracker = param != null;

            this.localLastModifiedById = param;
        }

        public boolean isProductGroupSpecified() {
            return localProductGroupTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProductGroup() {
            return localProductGroup;
        }

        /**
         * Auto generated setter method
         * @param param ProductGroup
         */
        public void setProductGroup(java.lang.String param) {
            localProductGroupTracker = param != null;

            this.localProductGroup = param;
        }

        public boolean isProjectIdSpecified() {
            return localProjectIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectId() {
            return localProjectId;
        }

        /**
         * Auto generated setter method
         * @param param ProjectId
         */
        public void setProjectId(java.lang.String param) {
            localProjectIdTracker = param != null;

            this.localProjectId = param;
        }

        public boolean isPurchaseBudgetSpecified() {
            return localPurchaseBudgetTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getPurchaseBudget() {
            return localPurchaseBudget;
        }

        /**
         * Auto generated setter method
         * @param param PurchaseBudget
         */
        public void setPurchaseBudget(java.math.BigDecimal param) {
            localPurchaseBudgetTracker = param != null;

            this.localPurchaseBudget = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":projectPurchaseForecastSaveParam",
                    xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "projectPurchaseForecastSaveParam", xmlWriter);
            }

            if (localBeWisdomTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beWisdom", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beWisdom cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeWisdom));
                }

                xmlWriter.writeEndElement();
            }

            if (localBrandTracker) {
                namespace = "";
                writeStartElement(null, namespace, "brand", xmlWriter);

                if (localBrand == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "brand cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBrand);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdById", xmlWriter);

                if (localCreatedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreatedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localEstimatedQuantityTracker) {
                namespace = "";
                writeStartElement(null, namespace, "estimatedQuantity",
                    xmlWriter);

                if (localEstimatedQuantity == java.lang.Long.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "estimatedQuantity cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEstimatedQuantity));
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            if (localIndustryLineTracker) {
                namespace = "";
                writeStartElement(null, namespace, "industryLine", xmlWriter);

                if (localIndustryLine == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "industryLine cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localIndustryLine);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedById", xmlWriter);

                if (localLastModifiedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastModifiedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localProductGroupTracker) {
                namespace = "";
                writeStartElement(null, namespace, "productGroup", xmlWriter);

                if (localProductGroup == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "productGroup cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProductGroup);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectId", xmlWriter);

                if (localProjectId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectId);
                }

                xmlWriter.writeEndElement();
            }

            if (localPurchaseBudgetTracker) {
                namespace = "";
                writeStartElement(null, namespace, "purchaseBudget", xmlWriter);

                if (localPurchaseBudget == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "purchaseBudget cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPurchaseBudget));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ProjectPurchaseForecastSaveParam parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ProjectPurchaseForecastSaveParam object = new ProjectPurchaseForecastSaveParam();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"projectPurchaseForecastSaveParam".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ProjectPurchaseForecastSaveParam) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beWisdom").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beWisdom").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beWisdom" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeWisdom(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "brand").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "brand").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "brand" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBrand(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "estimatedQuantity").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "estimatedQuantity").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "estimatedQuantity" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEstimatedQuantity(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setEstimatedQuantity(java.lang.Long.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "industryLine").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "industryLine").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "industryLine" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIndustryLine(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "productGroup").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "productGroup").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "productGroup" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductGroup(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "purchaseBudget").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "purchaseBudget").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "purchaseBudget" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPurchaseBudget(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class QuoteProductSaveParam extends ToString implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = quoteProductSaveParam
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for BeLowerPrice
         */
        protected boolean localBeLowerPrice;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeLowerPriceTracker = false;

        /**
         * field for BeWisdom
         */
        protected boolean localBeWisdom;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeWisdomTracker = false;

        /**
         * field for BrandCode
         */
        protected java.lang.String localBrandCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBrandCodeTracker = false;

        /**
         * field for BrandName
         */
        protected java.lang.String localBrandName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBrandNameTracker = false;

        /**
         * field for DemandQuantity
         */
        protected int localDemandQuantity;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDemandQuantityTracker = false;

        /**
         * field for DomainCode
         */
        protected java.lang.String localDomainCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDomainCodeTracker = false;

        /**
         * field for DomainName
         */
        protected java.lang.String localDomainName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDomainNameTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for PointDeduction
         */
        protected double localPointDeduction;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPointDeductionTracker = false;

        /**
         * field for ProductCode
         */
        protected java.lang.String localProductCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductCodeTracker = false;

        /**
         * field for ProductGroupCode
         */
        protected java.lang.String localProductGroupCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductGroupCodeTracker = false;

        /**
         * field for ProductGroupName
         */
        protected java.lang.String localProductGroupName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductGroupNameTracker = false;

        /**
         * field for ProductName
         */
        protected java.lang.String localProductName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductNameTracker = false;

        /**
         * field for ProductQuote
         */
        protected java.math.BigDecimal localProductQuote;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductQuoteTracker = false;

        /**
         * field for ProjectCode
         */
        protected java.lang.String localProjectCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectCodeTracker = false;

        /**
         * field for ProjectId
         */
        protected java.lang.String localProjectId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectIdTracker = false;

        /**
         * field for QuoteId
         */
        protected java.lang.String localQuoteId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localQuoteIdTracker = false;

        /**
         * field for ReservePrice
         */
        protected java.math.BigDecimal localReservePrice;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localReservePriceTracker = false;

        /**
         * field for ReturnAmount
         */
        protected java.math.BigDecimal localReturnAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localReturnAmountTracker = false;

        /**
         * field for SumPrice
         */
        protected java.math.BigDecimal localSumPrice;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSumPriceTracker = false;

        /**
         * field for SupplyPrice
         */
        protected java.math.BigDecimal localSupplyPrice;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSupplyPriceTracker = false;

        public boolean isBeLowerPriceSpecified() {
            return localBeLowerPriceTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeLowerPrice() {
            return localBeLowerPrice;
        }

        /**
         * Auto generated setter method
         * @param param BeLowerPrice
         */
        public void setBeLowerPrice(boolean param) {
            // setting primitive attribute tracker to true
            localBeLowerPriceTracker = true;

            this.localBeLowerPrice = param;
        }

        public boolean isBeWisdomSpecified() {
            return localBeWisdomTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeWisdom() {
            return localBeWisdom;
        }

        /**
         * Auto generated setter method
         * @param param BeWisdom
         */
        public void setBeWisdom(boolean param) {
            // setting primitive attribute tracker to true
            localBeWisdomTracker = true;

            this.localBeWisdom = param;
        }

        public boolean isBrandCodeSpecified() {
            return localBrandCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBrandCode() {
            return localBrandCode;
        }

        /**
         * Auto generated setter method
         * @param param BrandCode
         */
        public void setBrandCode(java.lang.String param) {
            localBrandCodeTracker = param != null;

            this.localBrandCode = param;
        }

        public boolean isBrandNameSpecified() {
            return localBrandNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBrandName() {
            return localBrandName;
        }

        /**
         * Auto generated setter method
         * @param param BrandName
         */
        public void setBrandName(java.lang.String param) {
            localBrandNameTracker = param != null;

            this.localBrandName = param;
        }

        public boolean isDemandQuantitySpecified() {
            return localDemandQuantityTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getDemandQuantity() {
            return localDemandQuantity;
        }

        /**
         * Auto generated setter method
         * @param param DemandQuantity
         */
        public void setDemandQuantity(int param) {
            // setting primitive attribute tracker to true
            localDemandQuantityTracker = param != java.lang.Integer.MIN_VALUE;

            this.localDemandQuantity = param;
        }

        public boolean isDomainCodeSpecified() {
            return localDomainCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDomainCode() {
            return localDomainCode;
        }

        /**
         * Auto generated setter method
         * @param param DomainCode
         */
        public void setDomainCode(java.lang.String param) {
            localDomainCodeTracker = param != null;

            this.localDomainCode = param;
        }

        public boolean isDomainNameSpecified() {
            return localDomainNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDomainName() {
            return localDomainName;
        }

        /**
         * Auto generated setter method
         * @param param DomainName
         */
        public void setDomainName(java.lang.String param) {
            localDomainNameTracker = param != null;

            this.localDomainName = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        public boolean isPointDeductionSpecified() {
            return localPointDeductionTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getPointDeduction() {
            return localPointDeduction;
        }

        /**
         * Auto generated setter method
         * @param param PointDeduction
         */
        public void setPointDeduction(double param) {
            // setting primitive attribute tracker to true
            localPointDeductionTracker = !java.lang.Double.isNaN(param);

            this.localPointDeduction = param;
        }

        public boolean isProductCodeSpecified() {
            return localProductCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProductCode() {
            return localProductCode;
        }

        /**
         * Auto generated setter method
         * @param param ProductCode
         */
        public void setProductCode(java.lang.String param) {
            localProductCodeTracker = param != null;

            this.localProductCode = param;
        }

        public boolean isProductGroupCodeSpecified() {
            return localProductGroupCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProductGroupCode() {
            return localProductGroupCode;
        }

        /**
         * Auto generated setter method
         * @param param ProductGroupCode
         */
        public void setProductGroupCode(java.lang.String param) {
            localProductGroupCodeTracker = param != null;

            this.localProductGroupCode = param;
        }

        public boolean isProductGroupNameSpecified() {
            return localProductGroupNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProductGroupName() {
            return localProductGroupName;
        }

        /**
         * Auto generated setter method
         * @param param ProductGroupName
         */
        public void setProductGroupName(java.lang.String param) {
            localProductGroupNameTracker = param != null;

            this.localProductGroupName = param;
        }

        public boolean isProductNameSpecified() {
            return localProductNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProductName() {
            return localProductName;
        }

        /**
         * Auto generated setter method
         * @param param ProductName
         */
        public void setProductName(java.lang.String param) {
            localProductNameTracker = param != null;

            this.localProductName = param;
        }

        public boolean isProductQuoteSpecified() {
            return localProductQuoteTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getProductQuote() {
            return localProductQuote;
        }

        /**
         * Auto generated setter method
         * @param param ProductQuote
         */
        public void setProductQuote(java.math.BigDecimal param) {
            localProductQuoteTracker = param != null;

            this.localProductQuote = param;
        }

        public boolean isProjectCodeSpecified() {
            return localProjectCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectCode() {
            return localProjectCode;
        }

        /**
         * Auto generated setter method
         * @param param ProjectCode
         */
        public void setProjectCode(java.lang.String param) {
            localProjectCodeTracker = param != null;

            this.localProjectCode = param;
        }

        public boolean isProjectIdSpecified() {
            return localProjectIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectId() {
            return localProjectId;
        }

        /**
         * Auto generated setter method
         * @param param ProjectId
         */
        public void setProjectId(java.lang.String param) {
            localProjectIdTracker = param != null;

            this.localProjectId = param;
        }

        public boolean isQuoteIdSpecified() {
            return localQuoteIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQuoteId() {
            return localQuoteId;
        }

        /**
         * Auto generated setter method
         * @param param QuoteId
         */
        public void setQuoteId(java.lang.String param) {
            localQuoteIdTracker = param != null;

            this.localQuoteId = param;
        }

        public boolean isReservePriceSpecified() {
            return localReservePriceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getReservePrice() {
            return localReservePrice;
        }

        /**
         * Auto generated setter method
         * @param param ReservePrice
         */
        public void setReservePrice(java.math.BigDecimal param) {
            localReservePriceTracker = param != null;

            this.localReservePrice = param;
        }

        public boolean isReturnAmountSpecified() {
            return localReturnAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getReturnAmount() {
            return localReturnAmount;
        }

        /**
         * Auto generated setter method
         * @param param ReturnAmount
         */
        public void setReturnAmount(java.math.BigDecimal param) {
            localReturnAmountTracker = param != null;

            this.localReturnAmount = param;
        }

        public boolean isSumPriceSpecified() {
            return localSumPriceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getSumPrice() {
            return localSumPrice;
        }

        /**
         * Auto generated setter method
         * @param param SumPrice
         */
        public void setSumPrice(java.math.BigDecimal param) {
            localSumPriceTracker = param != null;

            this.localSumPrice = param;
        }

        public boolean isSupplyPriceSpecified() {
            return localSupplyPriceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getSupplyPrice() {
            return localSupplyPrice;
        }

        /**
         * Auto generated setter method
         * @param param SupplyPrice
         */
        public void setSupplyPrice(java.math.BigDecimal param) {
            localSupplyPriceTracker = param != null;

            this.localSupplyPrice = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":quoteProductSaveParam", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "quoteProductSaveParam", xmlWriter);
            }

            if (localBeLowerPriceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beLowerPrice", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beLowerPrice cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeLowerPrice));
                }

                xmlWriter.writeEndElement();
            }

            if (localBeWisdomTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beWisdom", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beWisdom cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeWisdom));
                }

                xmlWriter.writeEndElement();
            }

            if (localBrandCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "brandCode", xmlWriter);

                if (localBrandCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "brandCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBrandCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localBrandNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "brandName", xmlWriter);

                if (localBrandName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "brandName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBrandName);
                }

                xmlWriter.writeEndElement();
            }

            if (localDemandQuantityTracker) {
                namespace = "";
                writeStartElement(null, namespace, "demandQuantity", xmlWriter);

                if (localDemandQuantity == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "demandQuantity cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDemandQuantity));
                }

                xmlWriter.writeEndElement();
            }

            if (localDomainCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "domainCode", xmlWriter);

                if (localDomainCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "domainCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDomainCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localDomainNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "domainName", xmlWriter);

                if (localDomainName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "domainName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDomainName);
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            if (localPointDeductionTracker) {
                namespace = "";
                writeStartElement(null, namespace, "pointDeduction", xmlWriter);

                if (java.lang.Double.isNaN(localPointDeduction)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "pointDeduction cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPointDeduction));
                }

                xmlWriter.writeEndElement();
            }

            if (localProductCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "productCode", xmlWriter);

                if (localProductCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "productCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProductCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localProductGroupCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "productGroupCode", xmlWriter);

                if (localProductGroupCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "productGroupCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProductGroupCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localProductGroupNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "productGroupName", xmlWriter);

                if (localProductGroupName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "productGroupName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProductGroupName);
                }

                xmlWriter.writeEndElement();
            }

            if (localProductNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "productName", xmlWriter);

                if (localProductName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "productName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProductName);
                }

                xmlWriter.writeEndElement();
            }

            if (localProductQuoteTracker) {
                namespace = "";
                writeStartElement(null, namespace, "productQuote", xmlWriter);

                if (localProductQuote == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "productQuote cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localProductQuote));
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectCode", xmlWriter);

                if (localProjectCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectId", xmlWriter);

                if (localProjectId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectId);
                }

                xmlWriter.writeEndElement();
            }

            if (localQuoteIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "quoteId", xmlWriter);

                if (localQuoteId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "quoteId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localQuoteId);
                }

                xmlWriter.writeEndElement();
            }

            if (localReservePriceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "reservePrice", xmlWriter);

                if (localReservePrice == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "reservePrice cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localReservePrice));
                }

                xmlWriter.writeEndElement();
            }

            if (localReturnAmountTracker) {
                namespace = "";
                writeStartElement(null, namespace, "returnAmount", xmlWriter);

                if (localReturnAmount == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "returnAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localReturnAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localSumPriceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "sumPrice", xmlWriter);

                if (localSumPrice == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "sumPrice cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSumPrice));
                }

                xmlWriter.writeEndElement();
            }

            if (localSupplyPriceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "supplyPrice", xmlWriter);

                if (localSupplyPrice == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "supplyPrice cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSupplyPrice));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static QuoteProductSaveParam parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                QuoteProductSaveParam object = new QuoteProductSaveParam();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"quoteProductSaveParam".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (QuoteProductSaveParam) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beLowerPrice").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beLowerPrice").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beLowerPrice" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeLowerPrice(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beWisdom").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beWisdom").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beWisdom" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeWisdom(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "brandCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "brandCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "brandCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBrandCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "brandName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "brandName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "brandName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBrandName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "demandQuantity").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "demandQuantity").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "demandQuantity" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDemandQuantity(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setDemandQuantity(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "domainCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "domainCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "domainCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDomainCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "domainName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "domainName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "domainName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDomainName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "pointDeduction").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "pointDeduction").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "pointDeduction" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPointDeduction(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setPointDeduction(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "productCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "productCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "productCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "productGroupCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "productGroupCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "productGroupCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductGroupCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "productGroupName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "productGroupName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "productGroupName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductGroupName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "productName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "productName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "productName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "productQuote").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "productQuote").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "productQuote" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductQuote(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "quoteId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "quoteId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "quoteId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setQuoteId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "reservePrice").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "reservePrice").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "reservePrice" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setReservePrice(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "returnAmount").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "returnAmount").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "returnAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setReturnAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "sumPrice").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "sumPrice").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "sumPrice" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSumPrice(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "supplyPrice").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "supplyPrice").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "supplyPrice" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSupplyPrice(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class EnterpriseInfoVO extends ToString implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = enterpriseInfoVO
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for AddressCity
         */
        protected java.lang.String localAddressCity;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAddressCityTracker = false;

        /**
         * field for AddressCounty
         */
        protected java.lang.String localAddressCounty;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAddressCountyTracker = false;

        /**
         * field for AddressDetail
         */
        protected java.lang.String localAddressDetail;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAddressDetailTracker = false;

        /**
         * field for AddressProvince
         */
        protected java.lang.String localAddressProvince;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAddressProvinceTracker = false;

        /**
         * field for AddressStr
         */
        protected java.lang.String localAddressStr;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAddressStrTracker = false;

        /**
         * field for BeValid
         */
        protected boolean localBeValid;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeValidTracker = false;

        /**
         * field for BelongOrg
         */
        protected java.lang.String localBelongOrg;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBelongOrgTracker = false;

        /**
         * field for BizScope
         */
        protected java.lang.String localBizScope;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBizScopeTracker = false;

        /**
         * field for CheckDate
         */
        protected java.util.Calendar localCheckDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCheckDateTracker = false;

        /**
         * field for City
         */
        protected java.lang.String localCity;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCityTracker = false;

        /**
         * field for ContactAddress
         */
        protected java.lang.String localContactAddress;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContactAddressTracker = false;

        /**
         * field for ContactEmail
         */
        protected java.lang.String localContactEmail;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContactEmailTracker = false;

        /**
         * field for ContactTelephone
         */
        protected java.lang.String localContactTelephone;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContactTelephoneTracker = false;

        /**
         * field for CreatedById
         */
        protected java.lang.String localCreatedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedByIdTracker = false;

        /**
         * field for CreatedDate
         */
        protected java.util.Calendar localCreatedDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedDateTracker = false;

        /**
         * field for CreditNo
         */
        protected java.lang.String localCreditNo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreditNoTracker = false;

        /**
         * field for Domains
         */
        protected java.lang.String localDomains;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDomainsTracker = false;

        /**
         * field for EconKind
         */
        protected java.lang.String localEconKind;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEconKindTracker = false;

        /**
         * field for EndDate
         */
        protected java.util.Calendar localEndDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEndDateTracker = false;

        /**
         * field for EntName
         */
        protected java.lang.String localEntName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEntNameTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for IndustryCode
         */
        protected java.lang.String localIndustryCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIndustryCodeTracker = false;

        /**
         * field for IndustryCodeStr
         */
        protected java.lang.String localIndustryCodeStr;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIndustryCodeStrTracker = false;

        /**
         * field for IsQuoted
         */
        protected java.lang.String localIsQuoted;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIsQuotedTracker = false;

        /**
         * field for LastModifiedById
         */
        protected java.lang.String localLastModifiedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastModifiedByIdTracker = false;

        /**
         * field for OperName
         */
        protected java.lang.String localOperName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOperNameTracker = false;

        /**
         * field for OrgNo
         */
        protected java.lang.String localOrgNo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOrgNoTracker = false;

        /**
         * field for Province
         */
        protected java.lang.String localProvince;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProvinceTracker = false;

        /**
         * field for RegNo
         */
        protected java.lang.String localRegNo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRegNoTracker = false;

        /**
         * field for RegistCapi
         */
        protected java.lang.String localRegistCapi;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRegistCapiTracker = false;

        /**
         * field for StartDate
         */
        protected java.util.Calendar localStartDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStartDateTracker = false;

        /**
         * field for Status
         */
        protected java.lang.String localStatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStatusTracker = false;

        /**
         * field for TermEnd
         */
        protected java.util.Calendar localTermEnd;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTermEndTracker = false;

        /**
         * field for TermStart
         */
        protected java.util.Calendar localTermStart;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTermStartTracker = false;

        public boolean isAddressCitySpecified() {
            return localAddressCityTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAddressCity() {
            return localAddressCity;
        }

        /**
         * Auto generated setter method
         * @param param AddressCity
         */
        public void setAddressCity(java.lang.String param) {
            localAddressCityTracker = param != null;

            this.localAddressCity = param;
        }

        public boolean isAddressCountySpecified() {
            return localAddressCountyTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAddressCounty() {
            return localAddressCounty;
        }

        /**
         * Auto generated setter method
         * @param param AddressCounty
         */
        public void setAddressCounty(java.lang.String param) {
            localAddressCountyTracker = param != null;

            this.localAddressCounty = param;
        }

        public boolean isAddressDetailSpecified() {
            return localAddressDetailTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAddressDetail() {
            return localAddressDetail;
        }

        /**
         * Auto generated setter method
         * @param param AddressDetail
         */
        public void setAddressDetail(java.lang.String param) {
            localAddressDetailTracker = param != null;

            this.localAddressDetail = param;
        }

        public boolean isAddressProvinceSpecified() {
            return localAddressProvinceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAddressProvince() {
            return localAddressProvince;
        }

        /**
         * Auto generated setter method
         * @param param AddressProvince
         */
        public void setAddressProvince(java.lang.String param) {
            localAddressProvinceTracker = param != null;

            this.localAddressProvince = param;
        }

        public boolean isAddressStrSpecified() {
            return localAddressStrTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAddressStr() {
            return localAddressStr;
        }

        /**
         * Auto generated setter method
         * @param param AddressStr
         */
        public void setAddressStr(java.lang.String param) {
            localAddressStrTracker = param != null;

            this.localAddressStr = param;
        }

        public boolean isBeValidSpecified() {
            return localBeValidTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeValid() {
            return localBeValid;
        }

        /**
         * Auto generated setter method
         * @param param BeValid
         */
        public void setBeValid(boolean param) {
            // setting primitive attribute tracker to true
            localBeValidTracker = true;

            this.localBeValid = param;
        }

        public boolean isBelongOrgSpecified() {
            return localBelongOrgTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBelongOrg() {
            return localBelongOrg;
        }

        /**
         * Auto generated setter method
         * @param param BelongOrg
         */
        public void setBelongOrg(java.lang.String param) {
            localBelongOrgTracker = param != null;

            this.localBelongOrg = param;
        }

        public boolean isBizScopeSpecified() {
            return localBizScopeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBizScope() {
            return localBizScope;
        }

        /**
         * Auto generated setter method
         * @param param BizScope
         */
        public void setBizScope(java.lang.String param) {
            localBizScopeTracker = param != null;

            this.localBizScope = param;
        }

        public boolean isCheckDateSpecified() {
            return localCheckDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getCheckDate() {
            return localCheckDate;
        }

        /**
         * Auto generated setter method
         * @param param CheckDate
         */
        public void setCheckDate(java.util.Calendar param) {
            localCheckDateTracker = param != null;

            this.localCheckDate = param;
        }

        public boolean isCitySpecified() {
            return localCityTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCity() {
            return localCity;
        }

        /**
         * Auto generated setter method
         * @param param City
         */
        public void setCity(java.lang.String param) {
            localCityTracker = param != null;

            this.localCity = param;
        }

        public boolean isContactAddressSpecified() {
            return localContactAddressTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContactAddress() {
            return localContactAddress;
        }

        /**
         * Auto generated setter method
         * @param param ContactAddress
         */
        public void setContactAddress(java.lang.String param) {
            localContactAddressTracker = param != null;

            this.localContactAddress = param;
        }

        public boolean isContactEmailSpecified() {
            return localContactEmailTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContactEmail() {
            return localContactEmail;
        }

        /**
         * Auto generated setter method
         * @param param ContactEmail
         */
        public void setContactEmail(java.lang.String param) {
            localContactEmailTracker = param != null;

            this.localContactEmail = param;
        }

        public boolean isContactTelephoneSpecified() {
            return localContactTelephoneTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContactTelephone() {
            return localContactTelephone;
        }

        /**
         * Auto generated setter method
         * @param param ContactTelephone
         */
        public void setContactTelephone(java.lang.String param) {
            localContactTelephoneTracker = param != null;

            this.localContactTelephone = param;
        }

        public boolean isCreatedByIdSpecified() {
            return localCreatedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreatedById() {
            return localCreatedById;
        }

        /**
         * Auto generated setter method
         * @param param CreatedById
         */
        public void setCreatedById(java.lang.String param) {
            localCreatedByIdTracker = param != null;

            this.localCreatedById = param;
        }

        public boolean isCreatedDateSpecified() {
            return localCreatedDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getCreatedDate() {
            return localCreatedDate;
        }

        /**
         * Auto generated setter method
         * @param param CreatedDate
         */
        public void setCreatedDate(java.util.Calendar param) {
            localCreatedDateTracker = param != null;

            this.localCreatedDate = param;
        }

        public boolean isCreditNoSpecified() {
            return localCreditNoTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreditNo() {
            return localCreditNo;
        }

        /**
         * Auto generated setter method
         * @param param CreditNo
         */
        public void setCreditNo(java.lang.String param) {
            localCreditNoTracker = param != null;

            this.localCreditNo = param;
        }

        public boolean isDomainsSpecified() {
            return localDomainsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDomains() {
            return localDomains;
        }

        /**
         * Auto generated setter method
         * @param param Domains
         */
        public void setDomains(java.lang.String param) {
            localDomainsTracker = param != null;

            this.localDomains = param;
        }

        public boolean isEconKindSpecified() {
            return localEconKindTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEconKind() {
            return localEconKind;
        }

        /**
         * Auto generated setter method
         * @param param EconKind
         */
        public void setEconKind(java.lang.String param) {
            localEconKindTracker = param != null;

            this.localEconKind = param;
        }

        public boolean isEndDateSpecified() {
            return localEndDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getEndDate() {
            return localEndDate;
        }

        /**
         * Auto generated setter method
         * @param param EndDate
         */
        public void setEndDate(java.util.Calendar param) {
            localEndDateTracker = param != null;

            this.localEndDate = param;
        }

        public boolean isEntNameSpecified() {
            return localEntNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEntName() {
            return localEntName;
        }

        /**
         * Auto generated setter method
         * @param param EntName
         */
        public void setEntName(java.lang.String param) {
            localEntNameTracker = param != null;

            this.localEntName = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        public boolean isIndustryCodeSpecified() {
            return localIndustryCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getIndustryCode() {
            return localIndustryCode;
        }

        /**
         * Auto generated setter method
         * @param param IndustryCode
         */
        public void setIndustryCode(java.lang.String param) {
            localIndustryCodeTracker = param != null;

            this.localIndustryCode = param;
        }

        public boolean isIndustryCodeStrSpecified() {
            return localIndustryCodeStrTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getIndustryCodeStr() {
            return localIndustryCodeStr;
        }

        /**
         * Auto generated setter method
         * @param param IndustryCodeStr
         */
        public void setIndustryCodeStr(java.lang.String param) {
            localIndustryCodeStrTracker = param != null;

            this.localIndustryCodeStr = param;
        }

        public boolean isIsQuotedSpecified() {
            return localIsQuotedTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getIsQuoted() {
            return localIsQuoted;
        }

        /**
         * Auto generated setter method
         * @param param IsQuoted
         */
        public void setIsQuoted(java.lang.String param) {
            localIsQuotedTracker = param != null;

            this.localIsQuoted = param;
        }

        public boolean isLastModifiedByIdSpecified() {
            return localLastModifiedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLastModifiedById() {
            return localLastModifiedById;
        }

        /**
         * Auto generated setter method
         * @param param LastModifiedById
         */
        public void setLastModifiedById(java.lang.String param) {
            localLastModifiedByIdTracker = param != null;

            this.localLastModifiedById = param;
        }

        public boolean isOperNameSpecified() {
            return localOperNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOperName() {
            return localOperName;
        }

        /**
         * Auto generated setter method
         * @param param OperName
         */
        public void setOperName(java.lang.String param) {
            localOperNameTracker = param != null;

            this.localOperName = param;
        }

        public boolean isOrgNoSpecified() {
            return localOrgNoTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOrgNo() {
            return localOrgNo;
        }

        /**
         * Auto generated setter method
         * @param param OrgNo
         */
        public void setOrgNo(java.lang.String param) {
            localOrgNoTracker = param != null;

            this.localOrgNo = param;
        }

        public boolean isProvinceSpecified() {
            return localProvinceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProvince() {
            return localProvince;
        }

        /**
         * Auto generated setter method
         * @param param Province
         */
        public void setProvince(java.lang.String param) {
            localProvinceTracker = param != null;

            this.localProvince = param;
        }

        public boolean isRegNoSpecified() {
            return localRegNoTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getRegNo() {
            return localRegNo;
        }

        /**
         * Auto generated setter method
         * @param param RegNo
         */
        public void setRegNo(java.lang.String param) {
            localRegNoTracker = param != null;

            this.localRegNo = param;
        }

        public boolean isRegistCapiSpecified() {
            return localRegistCapiTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getRegistCapi() {
            return localRegistCapi;
        }

        /**
         * Auto generated setter method
         * @param param RegistCapi
         */
        public void setRegistCapi(java.lang.String param) {
            localRegistCapiTracker = param != null;

            this.localRegistCapi = param;
        }

        public boolean isStartDateSpecified() {
            return localStartDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getStartDate() {
            return localStartDate;
        }

        /**
         * Auto generated setter method
         * @param param StartDate
         */
        public void setStartDate(java.util.Calendar param) {
            localStartDateTracker = param != null;

            this.localStartDate = param;
        }

        public boolean isStatusSpecified() {
            return localStatusTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatus() {
            return localStatus;
        }

        /**
         * Auto generated setter method
         * @param param Status
         */
        public void setStatus(java.lang.String param) {
            localStatusTracker = param != null;

            this.localStatus = param;
        }

        public boolean isTermEndSpecified() {
            return localTermEndTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getTermEnd() {
            return localTermEnd;
        }

        /**
         * Auto generated setter method
         * @param param TermEnd
         */
        public void setTermEnd(java.util.Calendar param) {
            localTermEndTracker = param != null;

            this.localTermEnd = param;
        }

        public boolean isTermStartSpecified() {
            return localTermStartTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getTermStart() {
            return localTermStart;
        }

        /**
         * Auto generated setter method
         * @param param TermStart
         */
        public void setTermStart(java.util.Calendar param) {
            localTermStartTracker = param != null;

            this.localTermStart = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":enterpriseInfoVO", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "enterpriseInfoVO", xmlWriter);
            }

            if (localAddressCityTracker) {
                namespace = "";
                writeStartElement(null, namespace, "addressCity", xmlWriter);

                if (localAddressCity == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "addressCity cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAddressCity);
                }

                xmlWriter.writeEndElement();
            }

            if (localAddressCountyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "addressCounty", xmlWriter);

                if (localAddressCounty == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "addressCounty cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAddressCounty);
                }

                xmlWriter.writeEndElement();
            }

            if (localAddressDetailTracker) {
                namespace = "";
                writeStartElement(null, namespace, "addressDetail", xmlWriter);

                if (localAddressDetail == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "addressDetail cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAddressDetail);
                }

                xmlWriter.writeEndElement();
            }

            if (localAddressProvinceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "addressProvince", xmlWriter);

                if (localAddressProvince == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "addressProvince cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAddressProvince);
                }

                xmlWriter.writeEndElement();
            }

            if (localAddressStrTracker) {
                namespace = "";
                writeStartElement(null, namespace, "addressStr", xmlWriter);

                if (localAddressStr == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "addressStr cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAddressStr);
                }

                xmlWriter.writeEndElement();
            }

            if (localBeValidTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beValid", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beValid cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeValid));
                }

                xmlWriter.writeEndElement();
            }

            if (localBelongOrgTracker) {
                namespace = "";
                writeStartElement(null, namespace, "belongOrg", xmlWriter);

                if (localBelongOrg == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "belongOrg cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBelongOrg);
                }

                xmlWriter.writeEndElement();
            }

            if (localBizScopeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "bizScope", xmlWriter);

                if (localBizScope == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "bizScope cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBizScope);
                }

                xmlWriter.writeEndElement();
            }

            if (localCheckDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "checkDate", xmlWriter);

                if (localCheckDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "checkDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCheckDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localCityTracker) {
                namespace = "";
                writeStartElement(null, namespace, "city", xmlWriter);

                if (localCity == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "city cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCity);
                }

                xmlWriter.writeEndElement();
            }

            if (localContactAddressTracker) {
                namespace = "";
                writeStartElement(null, namespace, "contactAddress", xmlWriter);

                if (localContactAddress == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "contactAddress cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localContactAddress);
                }

                xmlWriter.writeEndElement();
            }

            if (localContactEmailTracker) {
                namespace = "";
                writeStartElement(null, namespace, "contactEmail", xmlWriter);

                if (localContactEmail == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "contactEmail cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localContactEmail);
                }

                xmlWriter.writeEndElement();
            }

            if (localContactTelephoneTracker) {
                namespace = "";
                writeStartElement(null, namespace, "contactTelephone", xmlWriter);

                if (localContactTelephone == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "contactTelephone cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localContactTelephone);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdById", xmlWriter);

                if (localCreatedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreatedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdDate", xmlWriter);

                if (localCreatedDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCreatedDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localCreditNoTracker) {
                namespace = "";
                writeStartElement(null, namespace, "creditNo", xmlWriter);

                if (localCreditNo == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "creditNo cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreditNo);
                }

                xmlWriter.writeEndElement();
            }

            if (localDomainsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "domains", xmlWriter);

                if (localDomains == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "domains cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDomains);
                }

                xmlWriter.writeEndElement();
            }

            if (localEconKindTracker) {
                namespace = "";
                writeStartElement(null, namespace, "econKind", xmlWriter);

                if (localEconKind == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "econKind cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localEconKind);
                }

                xmlWriter.writeEndElement();
            }

            if (localEndDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "endDate", xmlWriter);

                if (localEndDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "endDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEndDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localEntNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "entName", xmlWriter);

                if (localEntName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "entName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localEntName);
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            if (localIndustryCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "industryCode", xmlWriter);

                if (localIndustryCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "industryCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localIndustryCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localIndustryCodeStrTracker) {
                namespace = "";
                writeStartElement(null, namespace, "industryCodeStr", xmlWriter);

                if (localIndustryCodeStr == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "industryCodeStr cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localIndustryCodeStr);
                }

                xmlWriter.writeEndElement();
            }

            if (localIsQuotedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "isQuoted", xmlWriter);

                if (localIsQuoted == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "isQuoted cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localIsQuoted);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedById", xmlWriter);

                if (localLastModifiedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastModifiedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localOperNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "operName", xmlWriter);

                if (localOperName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "operName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOperName);
                }

                xmlWriter.writeEndElement();
            }

            if (localOrgNoTracker) {
                namespace = "";
                writeStartElement(null, namespace, "orgNo", xmlWriter);

                if (localOrgNo == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "orgNo cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOrgNo);
                }

                xmlWriter.writeEndElement();
            }

            if (localProvinceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "province", xmlWriter);

                if (localProvince == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "province cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProvince);
                }

                xmlWriter.writeEndElement();
            }

            if (localRegNoTracker) {
                namespace = "";
                writeStartElement(null, namespace, "regNo", xmlWriter);

                if (localRegNo == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "regNo cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localRegNo);
                }

                xmlWriter.writeEndElement();
            }

            if (localRegistCapiTracker) {
                namespace = "";
                writeStartElement(null, namespace, "registCapi", xmlWriter);

                if (localRegistCapi == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "registCapi cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localRegistCapi);
                }

                xmlWriter.writeEndElement();
            }

            if (localStartDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "startDate", xmlWriter);

                if (localStartDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "startDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localStartDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localStatusTracker) {
                namespace = "";
                writeStartElement(null, namespace, "status", xmlWriter);

                if (localStatus == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "status cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localStatus);
                }

                xmlWriter.writeEndElement();
            }

            if (localTermEndTracker) {
                namespace = "";
                writeStartElement(null, namespace, "termEnd", xmlWriter);

                if (localTermEnd == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "termEnd cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTermEnd));
                }

                xmlWriter.writeEndElement();
            }

            if (localTermStartTracker) {
                namespace = "";
                writeStartElement(null, namespace, "termStart", xmlWriter);

                if (localTermStart == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "termStart cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTermStart));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static EnterpriseInfoVO parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                EnterpriseInfoVO object = new EnterpriseInfoVO();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"enterpriseInfoVO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (EnterpriseInfoVO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "addressCity").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "addressCity").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "addressCity" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAddressCity(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "addressCounty").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "addressCounty").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "addressCounty" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAddressCounty(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "addressDetail").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "addressDetail").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "addressDetail" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAddressDetail(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "addressProvince").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "addressProvince").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "addressProvince" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAddressProvince(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "addressStr").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "addressStr").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "addressStr" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAddressStr(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beValid").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beValid").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beValid" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeValid(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "belongOrg").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "belongOrg").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "belongOrg" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBelongOrg(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "bizScope").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "bizScope").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "bizScope" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBizScope(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "checkDate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "checkDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "checkDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCheckDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "city").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "city").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "city" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCity(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "contactAddress").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "contactAddress").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "contactAddress" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContactAddress(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "contactEmail").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "contactEmail").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "contactEmail" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContactEmail(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "contactTelephone").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "contactTelephone").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "contactTelephone" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContactTelephone(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdDate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "creditNo").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "creditNo").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "creditNo" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreditNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "domains").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "domains").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "domains" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDomains(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "econKind").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "econKind").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "econKind" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEconKind(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "endDate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "endDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "endDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEndDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "entName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "entName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "entName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEntName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "industryCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "industryCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "industryCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIndustryCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "industryCodeStr").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "industryCodeStr").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "industryCodeStr" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIndustryCodeStr(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "isQuoted").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "isQuoted").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "isQuoted" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIsQuoted(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "operName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "operName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "operName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOperName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "orgNo").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "orgNo").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "orgNo" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOrgNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "province").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "province").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "province" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProvince(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "regNo").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "regNo").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "regNo" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRegNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "registCapi").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "registCapi").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "registCapi" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRegistCapi(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "startDate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "startDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "startDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStartDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "status").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "status").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "status" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatus(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "termEnd").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "termEnd").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "termEnd" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTermEnd(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "termStart").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "termStart").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "termStart" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTermStart(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class LockUserListE implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://project.funnel.api.manage.hps.com/",
                "lockUserList", "ns1");

        /**
         * field for LockUserList
         */
        protected LockUserList localLockUserList;

        /**
         * Auto generated getter method
         * @return LockUserList
         */
        public LockUserList getLockUserList() {
            return localLockUserList;
        }

        /**
         * Auto generated setter method
         * @param param LockUserList
         */
        public void setLockUserList(LockUserList param) {
            this.localLockUserList = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localLockUserList == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "lockUserList cannot be null!");
            }

            localLockUserList.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static LockUserListE parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                LockUserListE object = new LockUserListE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if ((reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://project.funnel.api.manage.hps.com/",
                                        "lockUserList").equals(reader.getName())) ||
                                    new javax.xml.namespace.QName("",
                                        "lockUserList").equals(reader.getName())) {
                                object.setLockUserList(LockUserList.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class SaveProjectFromQYGNewResponse implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = saveProjectFromQYGNewResponse
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for _return
         */
        protected java.lang.String local_return;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean local_returnTracker = false;

        public boolean is_returnSpecified() {
            return local_returnTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String get_return() {
            return local_return;
        }

        /**
         * Auto generated setter method
         * @param param _return
         */
        public void set_return(java.lang.String param) {
            local_returnTracker = param != null;

            this.local_return = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://project.funnel.api.manage.hps.com/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":saveProjectFromQYGNewResponse",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "saveProjectFromQYGNewResponse", xmlWriter);
                }
            }

            if (local_returnTracker) {
                namespace = "";
                writeStartElement(null, namespace, "return", xmlWriter);

                if (local_return == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "return cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(local_return);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SaveProjectFromQYGNewResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                SaveProjectFromQYGNewResponse object = new SaveProjectFromQYGNewResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"saveProjectFromQYGNewResponse".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (SaveProjectFromQYGNewResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "return").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "return").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "return" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ProjectSaveParam extends ToString implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = projectSaveParam
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for ContractSaveParam
         */
        protected ContractSaveParam localContractSaveParam;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContractSaveParamTracker = false;

        /**
         * field for ProjectRFiveSaveParam
         */
        protected ProjectRFiveSaveParam localProjectRFiveSaveParam;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectRFiveSaveParamTracker = false;

        /**
         * field for ProjectRFourSaveParam
         */
        protected ProjectRFourSaveParam localProjectRFourSaveParam;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectRFourSaveParamTracker = false;

        /**
         * field for ProjectROneSaveParam
         */
        protected ProjectROneSaveParam localProjectROneSaveParam;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectROneSaveParamTracker = false;

        /**
         * field for ProjectRSixSaveParam
         */
        protected ProjectRSixSaveParam localProjectRSixSaveParam;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectRSixSaveParamTracker = false;

        /**
         * field for ProjectRThreeSaveParam
         */
        protected ProjectRThreeSaveParam localProjectRThreeSaveParam;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectRThreeSaveParamTracker = false;

        /**
         * field for ProjectRTwoSaveParam
         */
        protected ProjectRTwoSaveParam localProjectRTwoSaveParam;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectRTwoSaveParamTracker = false;

        /**
         * field for QuoteSaveParam
         */
        protected QuoteSaveParam localQuoteSaveParam;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localQuoteSaveParamTracker = false;

        public boolean isContractSaveParamSpecified() {
            return localContractSaveParamTracker;
        }

        /**
         * Auto generated getter method
         * @return ContractSaveParam
         */
        public ContractSaveParam getContractSaveParam() {
            return localContractSaveParam;
        }

        /**
         * Auto generated setter method
         * @param param ContractSaveParam
         */
        public void setContractSaveParam(ContractSaveParam param) {
            localContractSaveParamTracker = param != null;

            this.localContractSaveParam = param;
        }

        public boolean isProjectRFiveSaveParamSpecified() {
            return localProjectRFiveSaveParamTracker;
        }

        /**
         * Auto generated getter method
         * @return ProjectRFiveSaveParam
         */
        public ProjectRFiveSaveParam getProjectRFiveSaveParam() {
            return localProjectRFiveSaveParam;
        }

        /**
         * Auto generated setter method
         * @param param ProjectRFiveSaveParam
         */
        public void setProjectRFiveSaveParam(ProjectRFiveSaveParam param) {
            localProjectRFiveSaveParamTracker = param != null;

            this.localProjectRFiveSaveParam = param;
        }

        public boolean isProjectRFourSaveParamSpecified() {
            return localProjectRFourSaveParamTracker;
        }

        /**
         * Auto generated getter method
         * @return ProjectRFourSaveParam
         */
        public ProjectRFourSaveParam getProjectRFourSaveParam() {
            return localProjectRFourSaveParam;
        }

        /**
         * Auto generated setter method
         * @param param ProjectRFourSaveParam
         */
        public void setProjectRFourSaveParam(ProjectRFourSaveParam param) {
            localProjectRFourSaveParamTracker = param != null;

            this.localProjectRFourSaveParam = param;
        }

        public boolean isProjectROneSaveParamSpecified() {
            return localProjectROneSaveParamTracker;
        }

        /**
         * Auto generated getter method
         * @return ProjectROneSaveParam
         */
        public ProjectROneSaveParam getProjectROneSaveParam() {
            return localProjectROneSaveParam;
        }

        /**
         * Auto generated setter method
         * @param param ProjectROneSaveParam
         */
        public void setProjectROneSaveParam(ProjectROneSaveParam param) {
            localProjectROneSaveParamTracker = param != null;

            this.localProjectROneSaveParam = param;
        }

        public boolean isProjectRSixSaveParamSpecified() {
            return localProjectRSixSaveParamTracker;
        }

        /**
         * Auto generated getter method
         * @return ProjectRSixSaveParam
         */
        public ProjectRSixSaveParam getProjectRSixSaveParam() {
            return localProjectRSixSaveParam;
        }

        /**
         * Auto generated setter method
         * @param param ProjectRSixSaveParam
         */
        public void setProjectRSixSaveParam(ProjectRSixSaveParam param) {
            localProjectRSixSaveParamTracker = param != null;

            this.localProjectRSixSaveParam = param;
        }

        public boolean isProjectRThreeSaveParamSpecified() {
            return localProjectRThreeSaveParamTracker;
        }

        /**
         * Auto generated getter method
         * @return ProjectRThreeSaveParam
         */
        public ProjectRThreeSaveParam getProjectRThreeSaveParam() {
            return localProjectRThreeSaveParam;
        }

        /**
         * Auto generated setter method
         * @param param ProjectRThreeSaveParam
         */
        public void setProjectRThreeSaveParam(ProjectRThreeSaveParam param) {
            localProjectRThreeSaveParamTracker = param != null;

            this.localProjectRThreeSaveParam = param;
        }

        public boolean isProjectRTwoSaveParamSpecified() {
            return localProjectRTwoSaveParamTracker;
        }

        /**
         * Auto generated getter method
         * @return ProjectRTwoSaveParam
         */
        public ProjectRTwoSaveParam getProjectRTwoSaveParam() {
            return localProjectRTwoSaveParam;
        }

        /**
         * Auto generated setter method
         * @param param ProjectRTwoSaveParam
         */
        public void setProjectRTwoSaveParam(ProjectRTwoSaveParam param) {
            localProjectRTwoSaveParamTracker = param != null;

            this.localProjectRTwoSaveParam = param;
        }

        public boolean isQuoteSaveParamSpecified() {
            return localQuoteSaveParamTracker;
        }

        /**
         * Auto generated getter method
         * @return QuoteSaveParam
         */
        public QuoteSaveParam getQuoteSaveParam() {
            return localQuoteSaveParam;
        }

        /**
         * Auto generated setter method
         * @param param QuoteSaveParam
         */
        public void setQuoteSaveParam(QuoteSaveParam param) {
            localQuoteSaveParamTracker = param != null;

            this.localQuoteSaveParam = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":projectSaveParam", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "projectSaveParam", xmlWriter);
            }

            if (localContractSaveParamTracker) {
                if (localContractSaveParam == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "contractSaveParam cannot be null!!");
                }

                localContractSaveParam.serialize(new javax.xml.namespace.QName(
                        "", "contractSaveParam"), xmlWriter);
            }

            if (localProjectRFiveSaveParamTracker) {
                if (localProjectRFiveSaveParam == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectRFiveSaveParam cannot be null!!");
                }

                localProjectRFiveSaveParam.serialize(new javax.xml.namespace.QName(
                        "", "projectRFiveSaveParam"), xmlWriter);
            }

            if (localProjectRFourSaveParamTracker) {
                if (localProjectRFourSaveParam == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectRFourSaveParam cannot be null!!");
                }

                localProjectRFourSaveParam.serialize(new javax.xml.namespace.QName(
                        "", "projectRFourSaveParam"), xmlWriter);
            }

            if (localProjectROneSaveParamTracker) {
                if (localProjectROneSaveParam == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectROneSaveParam cannot be null!!");
                }

                localProjectROneSaveParam.serialize(new javax.xml.namespace.QName(
                        "", "projectROneSaveParam"), xmlWriter);
            }

            if (localProjectRSixSaveParamTracker) {
                if (localProjectRSixSaveParam == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectRSixSaveParam cannot be null!!");
                }

                localProjectRSixSaveParam.serialize(new javax.xml.namespace.QName(
                        "", "projectRSixSaveParam"), xmlWriter);
            }

            if (localProjectRThreeSaveParamTracker) {
                if (localProjectRThreeSaveParam == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectRThreeSaveParam cannot be null!!");
                }

                localProjectRThreeSaveParam.serialize(new javax.xml.namespace.QName(
                        "", "projectRThreeSaveParam"), xmlWriter);
            }

            if (localProjectRTwoSaveParamTracker) {
                if (localProjectRTwoSaveParam == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectRTwoSaveParam cannot be null!!");
                }

                localProjectRTwoSaveParam.serialize(new javax.xml.namespace.QName(
                        "", "projectRTwoSaveParam"), xmlWriter);
            }

            if (localQuoteSaveParamTracker) {
                if (localQuoteSaveParam == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "quoteSaveParam cannot be null!!");
                }

                localQuoteSaveParam.serialize(new javax.xml.namespace.QName(
                        "", "quoteSaveParam"), xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ProjectSaveParam parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ProjectSaveParam object = new ProjectSaveParam();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"projectSaveParam".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ProjectSaveParam) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "contractSaveParam").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "contractSaveParam").equals(reader.getName())) {
                        object.setContractSaveParam(ContractSaveParam.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectRFiveSaveParam").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectRFiveSaveParam").equals(
                                reader.getName())) {
                        object.setProjectRFiveSaveParam(ProjectRFiveSaveParam.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectRFourSaveParam").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectRFourSaveParam").equals(
                                reader.getName())) {
                        object.setProjectRFourSaveParam(ProjectRFourSaveParam.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectROneSaveParam").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectROneSaveParam").equals(reader.getName())) {
                        object.setProjectROneSaveParam(ProjectROneSaveParam.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectRSixSaveParam").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectRSixSaveParam").equals(reader.getName())) {
                        object.setProjectRSixSaveParam(ProjectRSixSaveParam.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectRThreeSaveParam").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectRThreeSaveParam").equals(
                                reader.getName())) {
                        object.setProjectRThreeSaveParam(ProjectRThreeSaveParam.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectRTwoSaveParam").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectRTwoSaveParam").equals(reader.getName())) {
                        object.setProjectRTwoSaveParam(ProjectRTwoSaveParam.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "quoteSaveParam").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "quoteSaveParam").equals(
                                reader.getName())) {
                        object.setQuoteSaveParam(QuoteSaveParam.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ExtensionMapper {
        public static java.lang.Object getTypeObject(
            java.lang.String namespaceURI, java.lang.String typeName,
            javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "lockUserListResponse".equals(typeName)) {
                return LockUserListResponse.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "projectPurchaseForecastSaveParam".equals(typeName)) {
                return ProjectPurchaseForecastSaveParam.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "saveProjectFromQYGResponse".equals(typeName)) {
                return SaveProjectFromQYGResponse.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "basePostTagContentDTO".equals(typeName)) {
                return BasePostTagContentDTO.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "hashMap".equals(typeName)) {
                return HashMap.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "quoteSaveParam".equals(typeName)) {
                return QuoteSaveParam.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "userDTO".equals(typeName)) {
                return UserDTO.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "basicDto".equals(typeName)) {
                return BasicDto.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "quoteMaterialSaveParam".equals(typeName)) {
                return QuoteMaterialSaveParam.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "queryEnterpriseList".equals(typeName)) {
                return QueryEnterpriseList.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "competiorAnalysisTechnologySaveParam".equals(typeName)) {
                return CompetiorAnalysisTechnologySaveParam.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "quoteServeSaveParam".equals(typeName)) {
                return QuoteServeSaveParam.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "saveProjectFromQYGNew".equals(typeName)) {
                return SaveProjectFromQYGNew.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "queryEnterpriseListResponse".equals(typeName)) {
                return QueryEnterpriseListResponse.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "queryProjectManagerFromHPS".equals(typeName)) {
                return QueryProjectManagerFromHPS.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "contractReceivableSaveParam".equals(typeName)) {
                return ContractReceivableSaveParam.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "abstractMap".equals(typeName)) {
                return AbstractMap.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "jsonResult".equals(typeName)) {
                return JsonResult.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "enterpriseOtherParam".equals(typeName)) {
                return EnterpriseOtherParam.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "lockUserList".equals(typeName)) {
                return LockUserList.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "projectRThreeSaveParam".equals(typeName)) {
                return ProjectRThreeSaveParam.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "quoteProductSaveParam".equals(typeName)) {
                return QuoteProductSaveParam.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "projectROneSaveParam".equals(typeName)) {
                return ProjectROneSaveParam.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "projectRTwoSaveParam".equals(typeName)) {
                return ProjectRTwoSaveParam.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "projectSaveParam".equals(typeName)) {
                return ProjectSaveParam.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "saveProjectFromQYG".equals(typeName)) {
                return SaveProjectFromQYG.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "projectRFourSaveParam".equals(typeName)) {
                return ProjectRFourSaveParam.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "projectRFiveSaveParam".equals(typeName)) {
                return ProjectRFiveSaveParam.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "enterpriseInfoVO".equals(typeName)) {
                return EnterpriseInfoVO.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "contractSaveParam".equals(typeName)) {
                return ContractSaveParam.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "queryProjectManagerFromHPSResponse".equals(typeName)) {
                return QueryProjectManagerFromHPSResponse.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "toString".equals(typeName)) {
                return ToString.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "projectRSixSaveParam".equals(typeName)) {
                return ProjectRSixSaveParam.Factory.parse(reader);
            }

            if ("http://project.funnel.api.manage.hps.com/".equals(namespaceURI) &&
                    "saveProjectFromQYGNewResponse".equals(typeName)) {
                return SaveProjectFromQYGNewResponse.Factory.parse(reader);
            }

            throw new org.apache.axis2.databinding.ADBException(
                "Unsupported type " + namespaceURI + " " + typeName);
        }
    }

    public static class ProjectRSixSaveParam extends ToString implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = projectRSixSaveParam
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for CreatedById
         */
        protected java.lang.String localCreatedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedByIdTracker = false;

        /**
         * field for DataMessage
         */
        protected java.lang.String localDataMessage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDataMessageTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for LastModifiedById
         */
        protected java.lang.String localLastModifiedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastModifiedByIdTracker = false;

        /**
         * field for ProjectId
         */
        protected java.lang.String localProjectId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectIdTracker = false;

        /**
         * field for ProjectManagerCode
         */
        protected java.lang.String localProjectManagerCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectManagerCodeTracker = false;

        /**
         * field for ProjectManagerId
         */
        protected java.lang.String localProjectManagerId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectManagerIdTracker = false;

        /**
         * field for ProjectManagerName
         */
        protected java.lang.String localProjectManagerName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectManagerNameTracker = false;

        public boolean isCreatedByIdSpecified() {
            return localCreatedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreatedById() {
            return localCreatedById;
        }

        /**
         * Auto generated setter method
         * @param param CreatedById
         */
        public void setCreatedById(java.lang.String param) {
            localCreatedByIdTracker = param != null;

            this.localCreatedById = param;
        }

        public boolean isDataMessageSpecified() {
            return localDataMessageTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDataMessage() {
            return localDataMessage;
        }

        /**
         * Auto generated setter method
         * @param param DataMessage
         */
        public void setDataMessage(java.lang.String param) {
            localDataMessageTracker = param != null;

            this.localDataMessage = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        public boolean isLastModifiedByIdSpecified() {
            return localLastModifiedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLastModifiedById() {
            return localLastModifiedById;
        }

        /**
         * Auto generated setter method
         * @param param LastModifiedById
         */
        public void setLastModifiedById(java.lang.String param) {
            localLastModifiedByIdTracker = param != null;

            this.localLastModifiedById = param;
        }

        public boolean isProjectIdSpecified() {
            return localProjectIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectId() {
            return localProjectId;
        }

        /**
         * Auto generated setter method
         * @param param ProjectId
         */
        public void setProjectId(java.lang.String param) {
            localProjectIdTracker = param != null;

            this.localProjectId = param;
        }

        public boolean isProjectManagerCodeSpecified() {
            return localProjectManagerCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectManagerCode() {
            return localProjectManagerCode;
        }

        /**
         * Auto generated setter method
         * @param param ProjectManagerCode
         */
        public void setProjectManagerCode(java.lang.String param) {
            localProjectManagerCodeTracker = param != null;

            this.localProjectManagerCode = param;
        }

        public boolean isProjectManagerIdSpecified() {
            return localProjectManagerIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectManagerId() {
            return localProjectManagerId;
        }

        /**
         * Auto generated setter method
         * @param param ProjectManagerId
         */
        public void setProjectManagerId(java.lang.String param) {
            localProjectManagerIdTracker = param != null;

            this.localProjectManagerId = param;
        }

        public boolean isProjectManagerNameSpecified() {
            return localProjectManagerNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectManagerName() {
            return localProjectManagerName;
        }

        /**
         * Auto generated setter method
         * @param param ProjectManagerName
         */
        public void setProjectManagerName(java.lang.String param) {
            localProjectManagerNameTracker = param != null;

            this.localProjectManagerName = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":projectRSixSaveParam", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "projectRSixSaveParam", xmlWriter);
            }

            if (localCreatedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdById", xmlWriter);

                if (localCreatedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreatedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localDataMessageTracker) {
                namespace = "";
                writeStartElement(null, namespace, "dataMessage", xmlWriter);

                if (localDataMessage == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "dataMessage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDataMessage);
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedById", xmlWriter);

                if (localLastModifiedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastModifiedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectId", xmlWriter);

                if (localProjectId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectId);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectManagerCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectManagerCode",
                    xmlWriter);

                if (localProjectManagerCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectManagerCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectManagerCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectManagerIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectManagerId", xmlWriter);

                if (localProjectManagerId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectManagerId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectManagerId);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectManagerNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectManagerName",
                    xmlWriter);

                if (localProjectManagerName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectManagerName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectManagerName);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ProjectRSixSaveParam parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ProjectRSixSaveParam object = new ProjectRSixSaveParam();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"projectRSixSaveParam".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ProjectRSixSaveParam) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "dataMessage").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "dataMessage").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "dataMessage" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDataMessage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectManagerCode").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectManagerCode").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectManagerCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectManagerCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectManagerId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectManagerId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectManagerId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectManagerId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectManagerName").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectManagerName").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectManagerName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectManagerName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class QueryEnterpriseListResponseE implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://project.funnel.api.manage.hps.com/",
                "queryEnterpriseListResponse", "ns1");

        /**
         * field for QueryEnterpriseListResponse
         */
        protected QueryEnterpriseListResponse localQueryEnterpriseListResponse;

        /**
         * Auto generated getter method
         * @return QueryEnterpriseListResponse
         */
        public QueryEnterpriseListResponse getQueryEnterpriseListResponse() {
            return localQueryEnterpriseListResponse;
        }

        /**
         * Auto generated setter method
         * @param param QueryEnterpriseListResponse
         */
        public void setQueryEnterpriseListResponse(
            QueryEnterpriseListResponse param) {
            this.localQueryEnterpriseListResponse = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localQueryEnterpriseListResponse == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "queryEnterpriseListResponse cannot be null!");
            }

            localQueryEnterpriseListResponse.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static QueryEnterpriseListResponseE parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                QueryEnterpriseListResponseE object = new QueryEnterpriseListResponseE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if ((reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://project.funnel.api.manage.hps.com/",
                                        "queryEnterpriseListResponse").equals(
                                        reader.getName())) ||
                                    new javax.xml.namespace.QName("",
                                        "queryEnterpriseListResponse").equals(
                                        reader.getName())) {
                                object.setQueryEnterpriseListResponse(QueryEnterpriseListResponse.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class QueryEnterpriseListResponse implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = queryEnterpriseListResponse
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for _return
         * This was an Array!
         */
        protected EnterpriseInfoVO[] local_return;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean local_returnTracker = false;

        public boolean is_returnSpecified() {
            return local_returnTracker;
        }

        /**
         * Auto generated getter method
         * @return EnterpriseInfoVO[]
         */
        public EnterpriseInfoVO[] get_return() {
            return local_return;
        }

        /**
         * validate the array for _return
         */
        protected void validate_return(EnterpriseInfoVO[] param) {
        }

        /**
         * Auto generated setter method
         * @param param _return
         */
        public void set_return(EnterpriseInfoVO[] param) {
            validate_return(param);

            local_returnTracker = param != null;

            this.local_return = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param EnterpriseInfoVO
         */
        public void add_return(EnterpriseInfoVO param) {
            if (local_return == null) {
                local_return = new EnterpriseInfoVO[] {  };
            }

            //update the setting tracker
            local_returnTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);
            list.add(param);
            this.local_return = (EnterpriseInfoVO[]) list.toArray(new EnterpriseInfoVO[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://project.funnel.api.manage.hps.com/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":queryEnterpriseListResponse",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "queryEnterpriseListResponse", xmlWriter);
                }
            }

            if (local_returnTracker) {
                if (local_return != null) {
                    for (int i = 0; i < local_return.length; i++) {
                        if (local_return[i] != null) {
                            local_return[i].serialize(new javax.xml.namespace.QName(
                                    "", "return"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "return cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static QueryEnterpriseListResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                QueryEnterpriseListResponse object = new QueryEnterpriseListResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"queryEnterpriseListResponse".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (QueryEnterpriseListResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "return").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "return").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(EnterpriseInfoVO.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("", "return").equals(
                                            reader.getName())) {
                                    list1.add(EnterpriseInfoVO.Factory.parse(
                                            reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.set_return((EnterpriseInfoVO[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                EnterpriseInfoVO.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class BasePostTagContentDTO extends BasicDto implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = basePostTagContentDTO
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for BasePostCode
         */
        protected java.lang.String localBasePostCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBasePostCodeTracker = false;

        /**
         * field for BasePostId
         */
        protected java.lang.String localBasePostId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBasePostIdTracker = false;

        /**
         * field for CreatedById
         */
        protected java.lang.String localCreatedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedByIdTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for LastModifiedById
         */
        protected java.lang.String localLastModifiedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastModifiedByIdTracker = false;

        /**
         * field for StandardPostCode
         */
        protected java.lang.String localStandardPostCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStandardPostCodeTracker = false;

        /**
         * field for StandardPostId
         */
        protected java.lang.String localStandardPostId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStandardPostIdTracker = false;

        /**
         * field for TagCode
         */
        protected java.lang.String localTagCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTagCodeTracker = false;

        /**
         * field for TagContentDesc
         */
        protected java.lang.String localTagContentDesc;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTagContentDescTracker = false;

        /**
         * field for TagContentId
         */
        protected java.lang.String localTagContentId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTagContentIdTracker = false;

        /**
         * field for TagContentName
         */
        protected java.lang.String localTagContentName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTagContentNameTracker = false;

        /**
         * field for TagContentType
         */
        protected java.lang.String localTagContentType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTagContentTypeTracker = false;

        /**
         * field for TagId
         */
        protected java.lang.String localTagId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTagIdTracker = false;

        public boolean isBasePostCodeSpecified() {
            return localBasePostCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBasePostCode() {
            return localBasePostCode;
        }

        /**
         * Auto generated setter method
         * @param param BasePostCode
         */
        public void setBasePostCode(java.lang.String param) {
            localBasePostCodeTracker = param != null;

            this.localBasePostCode = param;
        }

        public boolean isBasePostIdSpecified() {
            return localBasePostIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBasePostId() {
            return localBasePostId;
        }

        /**
         * Auto generated setter method
         * @param param BasePostId
         */
        public void setBasePostId(java.lang.String param) {
            localBasePostIdTracker = param != null;

            this.localBasePostId = param;
        }

        public boolean isCreatedByIdSpecified() {
            return localCreatedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreatedById() {
            return localCreatedById;
        }

        /**
         * Auto generated setter method
         * @param param CreatedById
         */
        public void setCreatedById(java.lang.String param) {
            localCreatedByIdTracker = param != null;

            this.localCreatedById = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        public boolean isLastModifiedByIdSpecified() {
            return localLastModifiedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLastModifiedById() {
            return localLastModifiedById;
        }

        /**
         * Auto generated setter method
         * @param param LastModifiedById
         */
        public void setLastModifiedById(java.lang.String param) {
            localLastModifiedByIdTracker = param != null;

            this.localLastModifiedById = param;
        }

        public boolean isStandardPostCodeSpecified() {
            return localStandardPostCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStandardPostCode() {
            return localStandardPostCode;
        }

        /**
         * Auto generated setter method
         * @param param StandardPostCode
         */
        public void setStandardPostCode(java.lang.String param) {
            localStandardPostCodeTracker = param != null;

            this.localStandardPostCode = param;
        }

        public boolean isStandardPostIdSpecified() {
            return localStandardPostIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStandardPostId() {
            return localStandardPostId;
        }

        /**
         * Auto generated setter method
         * @param param StandardPostId
         */
        public void setStandardPostId(java.lang.String param) {
            localStandardPostIdTracker = param != null;

            this.localStandardPostId = param;
        }

        public boolean isTagCodeSpecified() {
            return localTagCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTagCode() {
            return localTagCode;
        }

        /**
         * Auto generated setter method
         * @param param TagCode
         */
        public void setTagCode(java.lang.String param) {
            localTagCodeTracker = param != null;

            this.localTagCode = param;
        }

        public boolean isTagContentDescSpecified() {
            return localTagContentDescTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTagContentDesc() {
            return localTagContentDesc;
        }

        /**
         * Auto generated setter method
         * @param param TagContentDesc
         */
        public void setTagContentDesc(java.lang.String param) {
            localTagContentDescTracker = param != null;

            this.localTagContentDesc = param;
        }

        public boolean isTagContentIdSpecified() {
            return localTagContentIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTagContentId() {
            return localTagContentId;
        }

        /**
         * Auto generated setter method
         * @param param TagContentId
         */
        public void setTagContentId(java.lang.String param) {
            localTagContentIdTracker = param != null;

            this.localTagContentId = param;
        }

        public boolean isTagContentNameSpecified() {
            return localTagContentNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTagContentName() {
            return localTagContentName;
        }

        /**
         * Auto generated setter method
         * @param param TagContentName
         */
        public void setTagContentName(java.lang.String param) {
            localTagContentNameTracker = param != null;

            this.localTagContentName = param;
        }

        public boolean isTagContentTypeSpecified() {
            return localTagContentTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTagContentType() {
            return localTagContentType;
        }

        /**
         * Auto generated setter method
         * @param param TagContentType
         */
        public void setTagContentType(java.lang.String param) {
            localTagContentTypeTracker = param != null;

            this.localTagContentType = param;
        }

        public boolean isTagIdSpecified() {
            return localTagIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTagId() {
            return localTagId;
        }

        /**
         * Auto generated setter method
         * @param param TagId
         */
        public void setTagId(java.lang.String param) {
            localTagIdTracker = param != null;

            this.localTagId = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":basePostTagContentDTO", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "basePostTagContentDTO", xmlWriter);
            }

            if (localBatchDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "batchDate", xmlWriter);

                if (localBatchDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "batchDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBatchDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localCreProIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "creProId", xmlWriter);

                if (localCreProId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "creProId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreProId);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedByTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdBy", xmlWriter);

                if (localCreatedBy == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdBy cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreatedBy);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdDate", xmlWriter);

                if (localCreatedDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCreatedDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localDeletedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "deleted", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "deleted cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDeleted));
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedByTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedBy", xmlWriter);

                if (localLastModifiedBy == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedBy cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastModifiedBy);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedDate", xmlWriter);

                if (localLastModifiedDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLastModifiedDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localModProIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "modProId", xmlWriter);

                if (localModProId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "modProId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localModProId);
                }

                xmlWriter.writeEndElement();
            }

            if (localBasePostCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "basePostCode", xmlWriter);

                if (localBasePostCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "basePostCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBasePostCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localBasePostIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "basePostId", xmlWriter);

                if (localBasePostId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "basePostId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBasePostId);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdById", xmlWriter);

                if (localCreatedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreatedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedById", xmlWriter);

                if (localLastModifiedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastModifiedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localStandardPostCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "standardPostCode", xmlWriter);

                if (localStandardPostCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "standardPostCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localStandardPostCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localStandardPostIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "standardPostId", xmlWriter);

                if (localStandardPostId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "standardPostId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localStandardPostId);
                }

                xmlWriter.writeEndElement();
            }

            if (localTagCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "tagCode", xmlWriter);

                if (localTagCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "tagCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTagCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localTagContentDescTracker) {
                namespace = "";
                writeStartElement(null, namespace, "tagContentDesc", xmlWriter);

                if (localTagContentDesc == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "tagContentDesc cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTagContentDesc);
                }

                xmlWriter.writeEndElement();
            }

            if (localTagContentIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "tagContentId", xmlWriter);

                if (localTagContentId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "tagContentId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTagContentId);
                }

                xmlWriter.writeEndElement();
            }

            if (localTagContentNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "tagContentName", xmlWriter);

                if (localTagContentName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "tagContentName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTagContentName);
                }

                xmlWriter.writeEndElement();
            }

            if (localTagContentTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "tagContentType", xmlWriter);

                if (localTagContentType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "tagContentType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTagContentType);
                }

                xmlWriter.writeEndElement();
            }

            if (localTagIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "tagId", xmlWriter);

                if (localTagId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "tagId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTagId);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static BasePostTagContentDTO parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                BasePostTagContentDTO object = new BasePostTagContentDTO();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"basePostTagContentDTO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (BasePostTagContentDTO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "batchDate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "batchDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "batchDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBatchDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "creProId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "creProId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "creProId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreProId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdBy").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdBy").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdBy" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedBy(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdDate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "deleted").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "deleted").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "deleted" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDeleted(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedBy").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedBy").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedBy" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedBy(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedDate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "modProId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "modProId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "modProId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setModProId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "basePostCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "basePostCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "basePostCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBasePostCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "basePostId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "basePostId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "basePostId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBasePostId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "standardPostCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "standardPostCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "standardPostCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStandardPostCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "standardPostId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "standardPostId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "standardPostId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStandardPostId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "tagCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "tagCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "tagCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTagCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "tagContentDesc").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "tagContentDesc").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "tagContentDesc" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTagContentDesc(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "tagContentId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "tagContentId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "tagContentId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTagContentId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "tagContentName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "tagContentName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "tagContentName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTagContentName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "tagContentType").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "tagContentType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "tagContentType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTagContentType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "tagId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "tagId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "tagId" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTagId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ToString implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = toString
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://project.funnel.api.manage.hps.com/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":toString", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "toString", xmlWriter);
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ToString parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ToString object = null;

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"toString".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ToString) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }

                            throw new org.apache.axis2.databinding.ADBException(
                                "The an abstract class can not be instantiated !!!");
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class HashMap extends AbstractMap implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = hashMap
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":hashMap", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "hashMap", xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static HashMap parse(javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                HashMap object = new HashMap();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"hashMap".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (HashMap) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ContractReceivableSaveParam extends ToString
        implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = contractReceivableSaveParam
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for BatchDate
         */
        protected java.util.Calendar localBatchDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBatchDateTracker = false;

        /**
         * field for ContractId
         */
        protected java.lang.String localContractId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContractIdTracker = false;

        /**
         * field for CreProId
         */
        protected java.lang.String localCreProId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreProIdTracker = false;

        /**
         * field for CreatedBy
         */
        protected java.lang.String localCreatedBy;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedByTracker = false;

        /**
         * field for CreatedById
         */
        protected java.lang.String localCreatedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedByIdTracker = false;

        /**
         * field for CreatedDate
         */
        protected java.util.Calendar localCreatedDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedDateTracker = false;

        /**
         * field for Deleted
         */
        protected boolean localDeleted;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDeletedTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for LastModifiedBy
         */
        protected java.lang.String localLastModifiedBy;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastModifiedByTracker = false;

        /**
         * field for LastModifiedById
         */
        protected java.lang.String localLastModifiedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastModifiedByIdTracker = false;

        /**
         * field for LastModifiedDate
         */
        protected java.util.Calendar localLastModifiedDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastModifiedDateTracker = false;

        /**
         * field for ModProId
         */
        protected java.lang.String localModProId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localModProIdTracker = false;

        /**
         * field for NodeTitle
         */
        protected java.lang.String localNodeTitle;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNodeTitleTracker = false;

        /**
         * field for PaymentAmount
         */
        protected java.math.BigDecimal localPaymentAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPaymentAmountTracker = false;

        /**
         * field for PaymentRatio
         */
        protected java.math.BigDecimal localPaymentRatio;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPaymentRatioTracker = false;

        /**
         * field for PaymentTime
         */
        protected java.util.Calendar localPaymentTime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPaymentTimeTracker = false;

        public boolean isBatchDateSpecified() {
            return localBatchDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getBatchDate() {
            return localBatchDate;
        }

        /**
         * Auto generated setter method
         * @param param BatchDate
         */
        public void setBatchDate(java.util.Calendar param) {
            localBatchDateTracker = param != null;

            this.localBatchDate = param;
        }

        public boolean isContractIdSpecified() {
            return localContractIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContractId() {
            return localContractId;
        }

        /**
         * Auto generated setter method
         * @param param ContractId
         */
        public void setContractId(java.lang.String param) {
            localContractIdTracker = param != null;

            this.localContractId = param;
        }

        public boolean isCreProIdSpecified() {
            return localCreProIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreProId() {
            return localCreProId;
        }

        /**
         * Auto generated setter method
         * @param param CreProId
         */
        public void setCreProId(java.lang.String param) {
            localCreProIdTracker = param != null;

            this.localCreProId = param;
        }

        public boolean isCreatedBySpecified() {
            return localCreatedByTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreatedBy() {
            return localCreatedBy;
        }

        /**
         * Auto generated setter method
         * @param param CreatedBy
         */
        public void setCreatedBy(java.lang.String param) {
            localCreatedByTracker = param != null;

            this.localCreatedBy = param;
        }

        public boolean isCreatedByIdSpecified() {
            return localCreatedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreatedById() {
            return localCreatedById;
        }

        /**
         * Auto generated setter method
         * @param param CreatedById
         */
        public void setCreatedById(java.lang.String param) {
            localCreatedByIdTracker = param != null;

            this.localCreatedById = param;
        }

        public boolean isCreatedDateSpecified() {
            return localCreatedDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getCreatedDate() {
            return localCreatedDate;
        }

        /**
         * Auto generated setter method
         * @param param CreatedDate
         */
        public void setCreatedDate(java.util.Calendar param) {
            localCreatedDateTracker = param != null;

            this.localCreatedDate = param;
        }

        public boolean isDeletedSpecified() {
            return localDeletedTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getDeleted() {
            return localDeleted;
        }

        /**
         * Auto generated setter method
         * @param param Deleted
         */
        public void setDeleted(boolean param) {
            // setting primitive attribute tracker to true
            localDeletedTracker = true;

            this.localDeleted = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        public boolean isLastModifiedBySpecified() {
            return localLastModifiedByTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLastModifiedBy() {
            return localLastModifiedBy;
        }

        /**
         * Auto generated setter method
         * @param param LastModifiedBy
         */
        public void setLastModifiedBy(java.lang.String param) {
            localLastModifiedByTracker = param != null;

            this.localLastModifiedBy = param;
        }

        public boolean isLastModifiedByIdSpecified() {
            return localLastModifiedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLastModifiedById() {
            return localLastModifiedById;
        }

        /**
         * Auto generated setter method
         * @param param LastModifiedById
         */
        public void setLastModifiedById(java.lang.String param) {
            localLastModifiedByIdTracker = param != null;

            this.localLastModifiedById = param;
        }

        public boolean isLastModifiedDateSpecified() {
            return localLastModifiedDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getLastModifiedDate() {
            return localLastModifiedDate;
        }

        /**
         * Auto generated setter method
         * @param param LastModifiedDate
         */
        public void setLastModifiedDate(java.util.Calendar param) {
            localLastModifiedDateTracker = param != null;

            this.localLastModifiedDate = param;
        }

        public boolean isModProIdSpecified() {
            return localModProIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getModProId() {
            return localModProId;
        }

        /**
         * Auto generated setter method
         * @param param ModProId
         */
        public void setModProId(java.lang.String param) {
            localModProIdTracker = param != null;

            this.localModProId = param;
        }

        public boolean isNodeTitleSpecified() {
            return localNodeTitleTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getNodeTitle() {
            return localNodeTitle;
        }

        /**
         * Auto generated setter method
         * @param param NodeTitle
         */
        public void setNodeTitle(java.lang.String param) {
            localNodeTitleTracker = param != null;

            this.localNodeTitle = param;
        }

        public boolean isPaymentAmountSpecified() {
            return localPaymentAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getPaymentAmount() {
            return localPaymentAmount;
        }

        /**
         * Auto generated setter method
         * @param param PaymentAmount
         */
        public void setPaymentAmount(java.math.BigDecimal param) {
            localPaymentAmountTracker = param != null;

            this.localPaymentAmount = param;
        }

        public boolean isPaymentRatioSpecified() {
            return localPaymentRatioTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getPaymentRatio() {
            return localPaymentRatio;
        }

        /**
         * Auto generated setter method
         * @param param PaymentRatio
         */
        public void setPaymentRatio(java.math.BigDecimal param) {
            localPaymentRatioTracker = param != null;

            this.localPaymentRatio = param;
        }

        public boolean isPaymentTimeSpecified() {
            return localPaymentTimeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getPaymentTime() {
            return localPaymentTime;
        }

        /**
         * Auto generated setter method
         * @param param PaymentTime
         */
        public void setPaymentTime(java.util.Calendar param) {
            localPaymentTimeTracker = param != null;

            this.localPaymentTime = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":contractReceivableSaveParam", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "contractReceivableSaveParam", xmlWriter);
            }

            if (localBatchDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "batchDate", xmlWriter);

                if (localBatchDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "batchDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBatchDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localContractIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "contractId", xmlWriter);

                if (localContractId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "contractId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localContractId);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreProIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "creProId", xmlWriter);

                if (localCreProId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "creProId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreProId);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedByTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdBy", xmlWriter);

                if (localCreatedBy == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdBy cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreatedBy);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdById", xmlWriter);

                if (localCreatedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreatedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdDate", xmlWriter);

                if (localCreatedDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCreatedDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localDeletedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "deleted", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "deleted cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDeleted));
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedByTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedBy", xmlWriter);

                if (localLastModifiedBy == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedBy cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastModifiedBy);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedById", xmlWriter);

                if (localLastModifiedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastModifiedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedDate", xmlWriter);

                if (localLastModifiedDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLastModifiedDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localModProIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "modProId", xmlWriter);

                if (localModProId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "modProId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localModProId);
                }

                xmlWriter.writeEndElement();
            }

            if (localNodeTitleTracker) {
                namespace = "";
                writeStartElement(null, namespace, "nodeTitle", xmlWriter);

                if (localNodeTitle == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "nodeTitle cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localNodeTitle);
                }

                xmlWriter.writeEndElement();
            }

            if (localPaymentAmountTracker) {
                namespace = "";
                writeStartElement(null, namespace, "paymentAmount", xmlWriter);

                if (localPaymentAmount == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "paymentAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPaymentAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localPaymentRatioTracker) {
                namespace = "";
                writeStartElement(null, namespace, "paymentRatio", xmlWriter);

                if (localPaymentRatio == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "paymentRatio cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPaymentRatio));
                }

                xmlWriter.writeEndElement();
            }

            if (localPaymentTimeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "paymentTime", xmlWriter);

                if (localPaymentTime == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "paymentTime cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPaymentTime));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ContractReceivableSaveParam parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ContractReceivableSaveParam object = new ContractReceivableSaveParam();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"contractReceivableSaveParam".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ContractReceivableSaveParam) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "batchDate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "batchDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "batchDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBatchDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "contractId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "contractId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "contractId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContractId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "creProId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "creProId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "creProId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreProId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdBy").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdBy").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdBy" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedBy(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdDate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "deleted").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "deleted").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "deleted" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDeleted(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedBy").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedBy").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedBy" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedBy(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedDate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "modProId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "modProId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "modProId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setModProId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "nodeTitle").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "nodeTitle").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "nodeTitle" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNodeTitle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "paymentAmount").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "paymentAmount").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "paymentAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPaymentAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "paymentRatio").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "paymentRatio").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "paymentRatio" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPaymentRatio(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "paymentTime").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "paymentTime").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "paymentTime" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPaymentTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ProjectROneSaveParam extends ToString implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = projectROneSaveParam
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for AddressCity
         */
        protected java.lang.String localAddressCity;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAddressCityTracker = false;

        /**
         * field for AddressCounty
         */
        protected java.lang.String localAddressCounty;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAddressCountyTracker = false;

        /**
         * field for AddressDetail
         */
        protected java.lang.String localAddressDetail;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAddressDetailTracker = false;

        /**
         * field for AddressProvince
         */
        protected java.lang.String localAddressProvince;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAddressProvinceTracker = false;

        /**
         * field for Area
         */
        protected java.lang.String localArea;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAreaTracker = false;

        /**
         * field for BeAfterPurchase
         */
        protected boolean localBeAfterPurchase;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeAfterPurchaseTracker = false;

        /**
         * field for BeAllopatric
         */
        protected boolean localBeAllopatric;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeAllopatricTracker = false;

        /**
         * field for BeGroupBuy
         */
        protected boolean localBeGroupBuy;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeGroupBuyTracker = false;

        /**
         * field for BeImgageProject
         */
        protected boolean localBeImgageProject;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeImgageProjectTracker = false;

        /**
         * field for BeManualSelectProjectFinish
         */
        protected boolean localBeManualSelectProjectFinish;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeManualSelectProjectFinishTracker = false;

        /**
         * field for BeMeetFirstParty
         */
        protected boolean localBeMeetFirstParty;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeMeetFirstPartyTracker = false;

        /**
         * field for BeSendGpms
         */
        protected java.lang.String localBeSendGpms;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeSendGpmsTracker = false;

        /**
         * field for BeStrategy
         */
        protected boolean localBeStrategy;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeStrategyTracker = false;

        /**
         * field for BeTurnStraightGuest
         */
        protected boolean localBeTurnStraightGuest;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeTurnStraightGuestTracker = false;

        /**
         * field for CancelPersonCode
         */
        protected java.lang.String localCancelPersonCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCancelPersonCodeTracker = false;

        /**
         * field for CancelReason
         */
        protected java.lang.String localCancelReason;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCancelReasonTracker = false;

        /**
         * field for CancelTime
         */
        protected java.util.Calendar localCancelTime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCancelTimeTracker = false;

        /**
         * field for Center
         */
        protected java.lang.String localCenter;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCenterTracker = false;

        /**
         * field for CleanEnergy
         */
        protected java.lang.String localCleanEnergy;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCleanEnergyTracker = false;

        /**
         * field for CleanEnergyType
         */
        protected java.lang.String localCleanEnergyType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCleanEnergyTypeTracker = false;

        /**
         * field for CreatedById
         */
        protected java.lang.String localCreatedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedByIdTracker = false;

        /**
         * field for DataSource
         */
        protected java.lang.String localDataSource;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDataSourceTracker = false;

        /**
         * field for DistrictCode
         */
        protected java.lang.String localDistrictCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDistrictCodeTracker = false;

        /**
         * field for DomainModel
         */
        protected java.lang.String localDomainModel;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDomainModelTracker = false;

        /**
         * field for DomainType
         */
        protected java.lang.String localDomainType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDomainTypeTracker = false;

        /**
         * field for EstimatedTimeBid
         */
        protected java.util.Calendar localEstimatedTimeBid;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEstimatedTimeBidTracker = false;

        /**
         * field for FirstCompanyId
         */
        protected java.lang.String localFirstCompanyId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFirstCompanyIdTracker = false;

        /**
         * field for FirstCompanyName
         */
        protected java.lang.String localFirstCompanyName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFirstCompanyNameTracker = false;

        /**
         * field for FirstCompanyOrgCode
         */
        protected java.lang.String localFirstCompanyOrgCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFirstCompanyOrgCodeTracker = false;

        /**
         * field for FrequencyConversion
         */
        protected boolean localFrequencyConversion;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFrequencyConversionTracker = false;

        /**
         * field for FunnelStage
         */
        protected java.lang.String localFunnelStage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFunnelStageTracker = false;

        /**
         * field for FunnelStageUpdateTime
         */
        protected java.util.Calendar localFunnelStageUpdateTime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFunnelStageUpdateTimeTracker = false;

        /**
         * field for GridCenterCode
         */
        protected java.lang.String localGridCenterCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGridCenterCodeTracker = false;

        /**
         * field for GridCenterName
         */
        protected java.lang.String localGridCenterName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGridCenterNameTracker = false;

        /**
         * field for GridCode
         */
        protected java.lang.String localGridCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGridCodeTracker = false;

        /**
         * field for GridName
         */
        protected java.lang.String localGridName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGridNameTracker = false;

        /**
         * field for GridUserCode
         */
        protected java.lang.String localGridUserCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGridUserCodeTracker = false;

        /**
         * field for GridUserName
         */
        protected java.lang.String localGridUserName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGridUserNameTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for IndustryHomeCategory
         */
        protected java.lang.String localIndustryHomeCategory;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIndustryHomeCategoryTracker = false;

        /**
         * field for LastModifiedById
         */
        protected java.lang.String localLastModifiedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastModifiedByIdTracker = false;

        /**
         * field for LesFlag
         */
        protected java.lang.String localLesFlag;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLesFlagTracker = false;

        /**
         * field for LesMsg
         */
        protected java.lang.String localLesMsg;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLesMsgTracker = false;

        /**
         * field for LoginLevel
         */
        protected int localLoginLevel;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLoginLevelTracker = false;

        /**
         * field for MsgId
         */
        protected java.lang.String localMsgId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMsgIdTracker = false;

        /**
         * field for ProductSeriesCode
         */
        protected java.lang.String localProductSeriesCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductSeriesCodeTracker = false;

        /**
         * field for ProductSeriesName
         */
        protected java.lang.String localProductSeriesName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductSeriesNameTracker = false;

        /**
         * field for ProjectCode
         */
        protected java.lang.String localProjectCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectCodeTracker = false;

        /**
         * field for ProjectCreaterCode
         */
        protected java.lang.String localProjectCreaterCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectCreaterCodeTracker = false;

        /**
         * field for ProjectCreaterId
         */
        protected java.lang.String localProjectCreaterId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectCreaterIdTracker = false;

        /**
         * field for ProjectCreaterName
         */
        protected java.lang.String localProjectCreaterName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectCreaterNameTracker = false;

        /**
         * field for ProjectFinishDate
         */
        protected java.util.Calendar localProjectFinishDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectFinishDateTracker = false;

        /**
         * field for ProjectLastModifiedDate
         */
        protected java.util.Calendar localProjectLastModifiedDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectLastModifiedDateTracker = false;

        /**
         * field for ProjectManagerCenter
         */
        protected java.lang.String localProjectManagerCenter;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectManagerCenterTracker = false;

        /**
         * field for ProjectManagerCode
         */
        protected java.lang.String localProjectManagerCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectManagerCodeTracker = false;

        /**
         * field for ProjectManagerId
         */
        protected java.lang.String localProjectManagerId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectManagerIdTracker = false;

        /**
         * field for ProjectManagerName
         */
        protected java.lang.String localProjectManagerName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectManagerNameTracker = false;

        /**
         * field for ProjectName
         */
        protected java.lang.String localProjectName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectNameTracker = false;

        /**
         * field for ProjectSource
         */
        protected java.lang.String localProjectSource;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectSourceTracker = false;

        /**
         * field for ProjectStatus
         */
        protected java.lang.String localProjectStatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectStatusTracker = false;

        /**
         * field for ProjectType
         */
        protected java.lang.String localProjectType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectTypeTracker = false;

        /**
         * field for PurchaseForecastList
         * This was an Array!
         */
        protected ProjectPurchaseForecastSaveParam[] localPurchaseForecastList;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPurchaseForecastListTracker = false;

        /**
         * field for SalesModel
         */
        protected java.lang.String localSalesModel;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSalesModelTracker = false;

        /**
         * field for SamplePlateType
         */
        protected java.lang.String localSamplePlateType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSamplePlateTypeTracker = false;

        /**
         * field for SendGpmsResult
         */
        protected java.lang.String localSendGpmsResult;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSendGpmsResultTracker = false;

        /**
         * field for SendGpmsTime
         */
        protected java.util.Calendar localSendGpmsTime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSendGpmsTimeTracker = false;

        public boolean isAddressCitySpecified() {
            return localAddressCityTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAddressCity() {
            return localAddressCity;
        }

        /**
         * Auto generated setter method
         * @param param AddressCity
         */
        public void setAddressCity(java.lang.String param) {
            localAddressCityTracker = param != null;

            this.localAddressCity = param;
        }

        public boolean isAddressCountySpecified() {
            return localAddressCountyTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAddressCounty() {
            return localAddressCounty;
        }

        /**
         * Auto generated setter method
         * @param param AddressCounty
         */
        public void setAddressCounty(java.lang.String param) {
            localAddressCountyTracker = param != null;

            this.localAddressCounty = param;
        }

        public boolean isAddressDetailSpecified() {
            return localAddressDetailTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAddressDetail() {
            return localAddressDetail;
        }

        /**
         * Auto generated setter method
         * @param param AddressDetail
         */
        public void setAddressDetail(java.lang.String param) {
            localAddressDetailTracker = param != null;

            this.localAddressDetail = param;
        }

        public boolean isAddressProvinceSpecified() {
            return localAddressProvinceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAddressProvince() {
            return localAddressProvince;
        }

        /**
         * Auto generated setter method
         * @param param AddressProvince
         */
        public void setAddressProvince(java.lang.String param) {
            localAddressProvinceTracker = param != null;

            this.localAddressProvince = param;
        }

        public boolean isAreaSpecified() {
            return localAreaTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getArea() {
            return localArea;
        }

        /**
         * Auto generated setter method
         * @param param Area
         */
        public void setArea(java.lang.String param) {
            localAreaTracker = param != null;

            this.localArea = param;
        }

        public boolean isBeAfterPurchaseSpecified() {
            return localBeAfterPurchaseTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeAfterPurchase() {
            return localBeAfterPurchase;
        }

        /**
         * Auto generated setter method
         * @param param BeAfterPurchase
         */
        public void setBeAfterPurchase(boolean param) {
            // setting primitive attribute tracker to true
            localBeAfterPurchaseTracker = true;

            this.localBeAfterPurchase = param;
        }

        public boolean isBeAllopatricSpecified() {
            return localBeAllopatricTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeAllopatric() {
            return localBeAllopatric;
        }

        /**
         * Auto generated setter method
         * @param param BeAllopatric
         */
        public void setBeAllopatric(boolean param) {
            // setting primitive attribute tracker to true
            localBeAllopatricTracker = true;

            this.localBeAllopatric = param;
        }

        public boolean isBeGroupBuySpecified() {
            return localBeGroupBuyTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeGroupBuy() {
            return localBeGroupBuy;
        }

        /**
         * Auto generated setter method
         * @param param BeGroupBuy
         */
        public void setBeGroupBuy(boolean param) {
            // setting primitive attribute tracker to true
            localBeGroupBuyTracker = true;

            this.localBeGroupBuy = param;
        }

        public boolean isBeImgageProjectSpecified() {
            return localBeImgageProjectTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeImgageProject() {
            return localBeImgageProject;
        }

        /**
         * Auto generated setter method
         * @param param BeImgageProject
         */
        public void setBeImgageProject(boolean param) {
            // setting primitive attribute tracker to true
            localBeImgageProjectTracker = true;

            this.localBeImgageProject = param;
        }

        public boolean isBeManualSelectProjectFinishSpecified() {
            return localBeManualSelectProjectFinishTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeManualSelectProjectFinish() {
            return localBeManualSelectProjectFinish;
        }

        /**
         * Auto generated setter method
         * @param param BeManualSelectProjectFinish
         */
        public void setBeManualSelectProjectFinish(boolean param) {
            // setting primitive attribute tracker to true
            localBeManualSelectProjectFinishTracker = true;

            this.localBeManualSelectProjectFinish = param;
        }

        public boolean isBeMeetFirstPartySpecified() {
            return localBeMeetFirstPartyTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeMeetFirstParty() {
            return localBeMeetFirstParty;
        }

        /**
         * Auto generated setter method
         * @param param BeMeetFirstParty
         */
        public void setBeMeetFirstParty(boolean param) {
            // setting primitive attribute tracker to true
            localBeMeetFirstPartyTracker = true;

            this.localBeMeetFirstParty = param;
        }

        public boolean isBeSendGpmsSpecified() {
            return localBeSendGpmsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBeSendGpms() {
            return localBeSendGpms;
        }

        /**
         * Auto generated setter method
         * @param param BeSendGpms
         */
        public void setBeSendGpms(java.lang.String param) {
            localBeSendGpmsTracker = param != null;

            this.localBeSendGpms = param;
        }

        public boolean isBeStrategySpecified() {
            return localBeStrategyTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeStrategy() {
            return localBeStrategy;
        }

        /**
         * Auto generated setter method
         * @param param BeStrategy
         */
        public void setBeStrategy(boolean param) {
            // setting primitive attribute tracker to true
            localBeStrategyTracker = true;

            this.localBeStrategy = param;
        }

        public boolean isBeTurnStraightGuestSpecified() {
            return localBeTurnStraightGuestTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeTurnStraightGuest() {
            return localBeTurnStraightGuest;
        }

        /**
         * Auto generated setter method
         * @param param BeTurnStraightGuest
         */
        public void setBeTurnStraightGuest(boolean param) {
            // setting primitive attribute tracker to true
            localBeTurnStraightGuestTracker = true;

            this.localBeTurnStraightGuest = param;
        }

        public boolean isCancelPersonCodeSpecified() {
            return localCancelPersonCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCancelPersonCode() {
            return localCancelPersonCode;
        }

        /**
         * Auto generated setter method
         * @param param CancelPersonCode
         */
        public void setCancelPersonCode(java.lang.String param) {
            localCancelPersonCodeTracker = param != null;

            this.localCancelPersonCode = param;
        }

        public boolean isCancelReasonSpecified() {
            return localCancelReasonTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCancelReason() {
            return localCancelReason;
        }

        /**
         * Auto generated setter method
         * @param param CancelReason
         */
        public void setCancelReason(java.lang.String param) {
            localCancelReasonTracker = param != null;

            this.localCancelReason = param;
        }

        public boolean isCancelTimeSpecified() {
            return localCancelTimeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getCancelTime() {
            return localCancelTime;
        }

        /**
         * Auto generated setter method
         * @param param CancelTime
         */
        public void setCancelTime(java.util.Calendar param) {
            localCancelTimeTracker = param != null;

            this.localCancelTime = param;
        }

        public boolean isCenterSpecified() {
            return localCenterTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCenter() {
            return localCenter;
        }

        /**
         * Auto generated setter method
         * @param param Center
         */
        public void setCenter(java.lang.String param) {
            localCenterTracker = param != null;

            this.localCenter = param;
        }

        public boolean isCleanEnergySpecified() {
            return localCleanEnergyTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCleanEnergy() {
            return localCleanEnergy;
        }

        /**
         * Auto generated setter method
         * @param param CleanEnergy
         */
        public void setCleanEnergy(java.lang.String param) {
            localCleanEnergyTracker = param != null;

            this.localCleanEnergy = param;
        }

        public boolean isCleanEnergyTypeSpecified() {
            return localCleanEnergyTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCleanEnergyType() {
            return localCleanEnergyType;
        }

        /**
         * Auto generated setter method
         * @param param CleanEnergyType
         */
        public void setCleanEnergyType(java.lang.String param) {
            localCleanEnergyTypeTracker = param != null;

            this.localCleanEnergyType = param;
        }

        public boolean isCreatedByIdSpecified() {
            return localCreatedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreatedById() {
            return localCreatedById;
        }

        /**
         * Auto generated setter method
         * @param param CreatedById
         */
        public void setCreatedById(java.lang.String param) {
            localCreatedByIdTracker = param != null;

            this.localCreatedById = param;
        }

        public boolean isDataSourceSpecified() {
            return localDataSourceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDataSource() {
            return localDataSource;
        }

        /**
         * Auto generated setter method
         * @param param DataSource
         */
        public void setDataSource(java.lang.String param) {
            localDataSourceTracker = param != null;

            this.localDataSource = param;
        }

        public boolean isDistrictCodeSpecified() {
            return localDistrictCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDistrictCode() {
            return localDistrictCode;
        }

        /**
         * Auto generated setter method
         * @param param DistrictCode
         */
        public void setDistrictCode(java.lang.String param) {
            localDistrictCodeTracker = param != null;

            this.localDistrictCode = param;
        }

        public boolean isDomainModelSpecified() {
            return localDomainModelTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDomainModel() {
            return localDomainModel;
        }

        /**
         * Auto generated setter method
         * @param param DomainModel
         */
        public void setDomainModel(java.lang.String param) {
            localDomainModelTracker = param != null;

            this.localDomainModel = param;
        }

        public boolean isDomainTypeSpecified() {
            return localDomainTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDomainType() {
            return localDomainType;
        }

        /**
         * Auto generated setter method
         * @param param DomainType
         */
        public void setDomainType(java.lang.String param) {
            localDomainTypeTracker = param != null;

            this.localDomainType = param;
        }

        public boolean isEstimatedTimeBidSpecified() {
            return localEstimatedTimeBidTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getEstimatedTimeBid() {
            return localEstimatedTimeBid;
        }

        /**
         * Auto generated setter method
         * @param param EstimatedTimeBid
         */
        public void setEstimatedTimeBid(java.util.Calendar param) {
            localEstimatedTimeBidTracker = param != null;

            this.localEstimatedTimeBid = param;
        }

        public boolean isFirstCompanyIdSpecified() {
            return localFirstCompanyIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFirstCompanyId() {
            return localFirstCompanyId;
        }

        /**
         * Auto generated setter method
         * @param param FirstCompanyId
         */
        public void setFirstCompanyId(java.lang.String param) {
            localFirstCompanyIdTracker = param != null;

            this.localFirstCompanyId = param;
        }

        public boolean isFirstCompanyNameSpecified() {
            return localFirstCompanyNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFirstCompanyName() {
            return localFirstCompanyName;
        }

        /**
         * Auto generated setter method
         * @param param FirstCompanyName
         */
        public void setFirstCompanyName(java.lang.String param) {
            localFirstCompanyNameTracker = param != null;

            this.localFirstCompanyName = param;
        }

        public boolean isFirstCompanyOrgCodeSpecified() {
            return localFirstCompanyOrgCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFirstCompanyOrgCode() {
            return localFirstCompanyOrgCode;
        }

        /**
         * Auto generated setter method
         * @param param FirstCompanyOrgCode
         */
        public void setFirstCompanyOrgCode(java.lang.String param) {
            localFirstCompanyOrgCodeTracker = param != null;

            this.localFirstCompanyOrgCode = param;
        }

        public boolean isFrequencyConversionSpecified() {
            return localFrequencyConversionTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getFrequencyConversion() {
            return localFrequencyConversion;
        }

        /**
         * Auto generated setter method
         * @param param FrequencyConversion
         */
        public void setFrequencyConversion(boolean param) {
            // setting primitive attribute tracker to true
            localFrequencyConversionTracker = true;

            this.localFrequencyConversion = param;
        }

        public boolean isFunnelStageSpecified() {
            return localFunnelStageTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFunnelStage() {
            return localFunnelStage;
        }

        /**
         * Auto generated setter method
         * @param param FunnelStage
         */
        public void setFunnelStage(java.lang.String param) {
            localFunnelStageTracker = param != null;

            this.localFunnelStage = param;
        }

        public boolean isFunnelStageUpdateTimeSpecified() {
            return localFunnelStageUpdateTimeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getFunnelStageUpdateTime() {
            return localFunnelStageUpdateTime;
        }

        /**
         * Auto generated setter method
         * @param param FunnelStageUpdateTime
         */
        public void setFunnelStageUpdateTime(java.util.Calendar param) {
            localFunnelStageUpdateTimeTracker = param != null;

            this.localFunnelStageUpdateTime = param;
        }

        public boolean isGridCenterCodeSpecified() {
            return localGridCenterCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGridCenterCode() {
            return localGridCenterCode;
        }

        /**
         * Auto generated setter method
         * @param param GridCenterCode
         */
        public void setGridCenterCode(java.lang.String param) {
            localGridCenterCodeTracker = param != null;

            this.localGridCenterCode = param;
        }

        public boolean isGridCenterNameSpecified() {
            return localGridCenterNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGridCenterName() {
            return localGridCenterName;
        }

        /**
         * Auto generated setter method
         * @param param GridCenterName
         */
        public void setGridCenterName(java.lang.String param) {
            localGridCenterNameTracker = param != null;

            this.localGridCenterName = param;
        }

        public boolean isGridCodeSpecified() {
            return localGridCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGridCode() {
            return localGridCode;
        }

        /**
         * Auto generated setter method
         * @param param GridCode
         */
        public void setGridCode(java.lang.String param) {
            localGridCodeTracker = param != null;

            this.localGridCode = param;
        }

        public boolean isGridNameSpecified() {
            return localGridNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGridName() {
            return localGridName;
        }

        /**
         * Auto generated setter method
         * @param param GridName
         */
        public void setGridName(java.lang.String param) {
            localGridNameTracker = param != null;

            this.localGridName = param;
        }

        public boolean isGridUserCodeSpecified() {
            return localGridUserCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGridUserCode() {
            return localGridUserCode;
        }

        /**
         * Auto generated setter method
         * @param param GridUserCode
         */
        public void setGridUserCode(java.lang.String param) {
            localGridUserCodeTracker = param != null;

            this.localGridUserCode = param;
        }

        public boolean isGridUserNameSpecified() {
            return localGridUserNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGridUserName() {
            return localGridUserName;
        }

        /**
         * Auto generated setter method
         * @param param GridUserName
         */
        public void setGridUserName(java.lang.String param) {
            localGridUserNameTracker = param != null;

            this.localGridUserName = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        public boolean isIndustryHomeCategorySpecified() {
            return localIndustryHomeCategoryTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getIndustryHomeCategory() {
            return localIndustryHomeCategory;
        }

        /**
         * Auto generated setter method
         * @param param IndustryHomeCategory
         */
        public void setIndustryHomeCategory(java.lang.String param) {
            localIndustryHomeCategoryTracker = param != null;

            this.localIndustryHomeCategory = param;
        }

        public boolean isLastModifiedByIdSpecified() {
            return localLastModifiedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLastModifiedById() {
            return localLastModifiedById;
        }

        /**
         * Auto generated setter method
         * @param param LastModifiedById
         */
        public void setLastModifiedById(java.lang.String param) {
            localLastModifiedByIdTracker = param != null;

            this.localLastModifiedById = param;
        }

        public boolean isLesFlagSpecified() {
            return localLesFlagTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLesFlag() {
            return localLesFlag;
        }

        /**
         * Auto generated setter method
         * @param param LesFlag
         */
        public void setLesFlag(java.lang.String param) {
            localLesFlagTracker = param != null;

            this.localLesFlag = param;
        }

        public boolean isLesMsgSpecified() {
            return localLesMsgTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLesMsg() {
            return localLesMsg;
        }

        /**
         * Auto generated setter method
         * @param param LesMsg
         */
        public void setLesMsg(java.lang.String param) {
            localLesMsgTracker = param != null;

            this.localLesMsg = param;
        }

        public boolean isLoginLevelSpecified() {
            return localLoginLevelTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getLoginLevel() {
            return localLoginLevel;
        }

        /**
         * Auto generated setter method
         * @param param LoginLevel
         */
        public void setLoginLevel(int param) {
            // setting primitive attribute tracker to true
            localLoginLevelTracker = param != java.lang.Integer.MIN_VALUE;

            this.localLoginLevel = param;
        }

        public boolean isMsgIdSpecified() {
            return localMsgIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMsgId() {
            return localMsgId;
        }

        /**
         * Auto generated setter method
         * @param param MsgId
         */
        public void setMsgId(java.lang.String param) {
            localMsgIdTracker = param != null;

            this.localMsgId = param;
        }

        public boolean isProductSeriesCodeSpecified() {
            return localProductSeriesCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProductSeriesCode() {
            return localProductSeriesCode;
        }

        /**
         * Auto generated setter method
         * @param param ProductSeriesCode
         */
        public void setProductSeriesCode(java.lang.String param) {
            localProductSeriesCodeTracker = param != null;

            this.localProductSeriesCode = param;
        }

        public boolean isProductSeriesNameSpecified() {
            return localProductSeriesNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProductSeriesName() {
            return localProductSeriesName;
        }

        /**
         * Auto generated setter method
         * @param param ProductSeriesName
         */
        public void setProductSeriesName(java.lang.String param) {
            localProductSeriesNameTracker = param != null;

            this.localProductSeriesName = param;
        }

        public boolean isProjectCodeSpecified() {
            return localProjectCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectCode() {
            return localProjectCode;
        }

        /**
         * Auto generated setter method
         * @param param ProjectCode
         */
        public void setProjectCode(java.lang.String param) {
            localProjectCodeTracker = param != null;

            this.localProjectCode = param;
        }

        public boolean isProjectCreaterCodeSpecified() {
            return localProjectCreaterCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectCreaterCode() {
            return localProjectCreaterCode;
        }

        /**
         * Auto generated setter method
         * @param param ProjectCreaterCode
         */
        public void setProjectCreaterCode(java.lang.String param) {
            localProjectCreaterCodeTracker = param != null;

            this.localProjectCreaterCode = param;
        }

        public boolean isProjectCreaterIdSpecified() {
            return localProjectCreaterIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectCreaterId() {
            return localProjectCreaterId;
        }

        /**
         * Auto generated setter method
         * @param param ProjectCreaterId
         */
        public void setProjectCreaterId(java.lang.String param) {
            localProjectCreaterIdTracker = param != null;

            this.localProjectCreaterId = param;
        }

        public boolean isProjectCreaterNameSpecified() {
            return localProjectCreaterNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectCreaterName() {
            return localProjectCreaterName;
        }

        /**
         * Auto generated setter method
         * @param param ProjectCreaterName
         */
        public void setProjectCreaterName(java.lang.String param) {
            localProjectCreaterNameTracker = param != null;

            this.localProjectCreaterName = param;
        }

        public boolean isProjectFinishDateSpecified() {
            return localProjectFinishDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getProjectFinishDate() {
            return localProjectFinishDate;
        }

        /**
         * Auto generated setter method
         * @param param ProjectFinishDate
         */
        public void setProjectFinishDate(java.util.Calendar param) {
            localProjectFinishDateTracker = param != null;

            this.localProjectFinishDate = param;
        }

        public boolean isProjectLastModifiedDateSpecified() {
            return localProjectLastModifiedDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getProjectLastModifiedDate() {
            return localProjectLastModifiedDate;
        }

        /**
         * Auto generated setter method
         * @param param ProjectLastModifiedDate
         */
        public void setProjectLastModifiedDate(java.util.Calendar param) {
            localProjectLastModifiedDateTracker = param != null;

            this.localProjectLastModifiedDate = param;
        }

        public boolean isProjectManagerCenterSpecified() {
            return localProjectManagerCenterTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectManagerCenter() {
            return localProjectManagerCenter;
        }

        /**
         * Auto generated setter method
         * @param param ProjectManagerCenter
         */
        public void setProjectManagerCenter(java.lang.String param) {
            localProjectManagerCenterTracker = param != null;

            this.localProjectManagerCenter = param;
        }

        public boolean isProjectManagerCodeSpecified() {
            return localProjectManagerCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectManagerCode() {
            return localProjectManagerCode;
        }

        /**
         * Auto generated setter method
         * @param param ProjectManagerCode
         */
        public void setProjectManagerCode(java.lang.String param) {
            localProjectManagerCodeTracker = param != null;

            this.localProjectManagerCode = param;
        }

        public boolean isProjectManagerIdSpecified() {
            return localProjectManagerIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectManagerId() {
            return localProjectManagerId;
        }

        /**
         * Auto generated setter method
         * @param param ProjectManagerId
         */
        public void setProjectManagerId(java.lang.String param) {
            localProjectManagerIdTracker = param != null;

            this.localProjectManagerId = param;
        }

        public boolean isProjectManagerNameSpecified() {
            return localProjectManagerNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectManagerName() {
            return localProjectManagerName;
        }

        /**
         * Auto generated setter method
         * @param param ProjectManagerName
         */
        public void setProjectManagerName(java.lang.String param) {
            localProjectManagerNameTracker = param != null;

            this.localProjectManagerName = param;
        }

        public boolean isProjectNameSpecified() {
            return localProjectNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectName() {
            return localProjectName;
        }

        /**
         * Auto generated setter method
         * @param param ProjectName
         */
        public void setProjectName(java.lang.String param) {
            localProjectNameTracker = param != null;

            this.localProjectName = param;
        }

        public boolean isProjectSourceSpecified() {
            return localProjectSourceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectSource() {
            return localProjectSource;
        }

        /**
         * Auto generated setter method
         * @param param ProjectSource
         */
        public void setProjectSource(java.lang.String param) {
            localProjectSourceTracker = param != null;

            this.localProjectSource = param;
        }

        public boolean isProjectStatusSpecified() {
            return localProjectStatusTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectStatus() {
            return localProjectStatus;
        }

        /**
         * Auto generated setter method
         * @param param ProjectStatus
         */
        public void setProjectStatus(java.lang.String param) {
            localProjectStatusTracker = param != null;

            this.localProjectStatus = param;
        }

        public boolean isProjectTypeSpecified() {
            return localProjectTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectType() {
            return localProjectType;
        }

        /**
         * Auto generated setter method
         * @param param ProjectType
         */
        public void setProjectType(java.lang.String param) {
            localProjectTypeTracker = param != null;

            this.localProjectType = param;
        }

        public boolean isPurchaseForecastListSpecified() {
            return localPurchaseForecastListTracker;
        }

        /**
         * Auto generated getter method
         * @return ProjectPurchaseForecastSaveParam[]
         */
        public ProjectPurchaseForecastSaveParam[] getPurchaseForecastList() {
            return localPurchaseForecastList;
        }

        /**
         * validate the array for PurchaseForecastList
         */
        protected void validatePurchaseForecastList(
            ProjectPurchaseForecastSaveParam[] param) {
        }

        /**
         * Auto generated setter method
         * @param param PurchaseForecastList
         */
        public void setPurchaseForecastList(
            ProjectPurchaseForecastSaveParam[] param) {
            validatePurchaseForecastList(param);

            localPurchaseForecastListTracker = true;

            this.localPurchaseForecastList = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param ProjectPurchaseForecastSaveParam
         */
        public void addPurchaseForecastList(
            ProjectPurchaseForecastSaveParam param) {
            if (localPurchaseForecastList == null) {
                localPurchaseForecastList = new ProjectPurchaseForecastSaveParam[] {
                        
                    };
            }

            //update the setting tracker
            localPurchaseForecastListTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localPurchaseForecastList);
            list.add(param);
            this.localPurchaseForecastList = (ProjectPurchaseForecastSaveParam[]) list.toArray(new ProjectPurchaseForecastSaveParam[list.size()]);
        }

        public boolean isSalesModelSpecified() {
            return localSalesModelTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSalesModel() {
            return localSalesModel;
        }

        /**
         * Auto generated setter method
         * @param param SalesModel
         */
        public void setSalesModel(java.lang.String param) {
            localSalesModelTracker = param != null;

            this.localSalesModel = param;
        }

        public boolean isSamplePlateTypeSpecified() {
            return localSamplePlateTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSamplePlateType() {
            return localSamplePlateType;
        }

        /**
         * Auto generated setter method
         * @param param SamplePlateType
         */
        public void setSamplePlateType(java.lang.String param) {
            localSamplePlateTypeTracker = param != null;

            this.localSamplePlateType = param;
        }

        public boolean isSendGpmsResultSpecified() {
            return localSendGpmsResultTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSendGpmsResult() {
            return localSendGpmsResult;
        }

        /**
         * Auto generated setter method
         * @param param SendGpmsResult
         */
        public void setSendGpmsResult(java.lang.String param) {
            localSendGpmsResultTracker = param != null;

            this.localSendGpmsResult = param;
        }

        public boolean isSendGpmsTimeSpecified() {
            return localSendGpmsTimeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getSendGpmsTime() {
            return localSendGpmsTime;
        }

        /**
         * Auto generated setter method
         * @param param SendGpmsTime
         */
        public void setSendGpmsTime(java.util.Calendar param) {
            localSendGpmsTimeTracker = param != null;

            this.localSendGpmsTime = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":projectROneSaveParam", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "projectROneSaveParam", xmlWriter);
            }

            if (localAddressCityTracker) {
                namespace = "";
                writeStartElement(null, namespace, "addressCity", xmlWriter);

                if (localAddressCity == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "addressCity cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAddressCity);
                }

                xmlWriter.writeEndElement();
            }

            if (localAddressCountyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "addressCounty", xmlWriter);

                if (localAddressCounty == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "addressCounty cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAddressCounty);
                }

                xmlWriter.writeEndElement();
            }

            if (localAddressDetailTracker) {
                namespace = "";
                writeStartElement(null, namespace, "addressDetail", xmlWriter);

                if (localAddressDetail == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "addressDetail cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAddressDetail);
                }

                xmlWriter.writeEndElement();
            }

            if (localAddressProvinceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "addressProvince", xmlWriter);

                if (localAddressProvince == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "addressProvince cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAddressProvince);
                }

                xmlWriter.writeEndElement();
            }

            if (localAreaTracker) {
                namespace = "";
                writeStartElement(null, namespace, "area", xmlWriter);

                if (localArea == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "area cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localArea);
                }

                xmlWriter.writeEndElement();
            }

            if (localBeAfterPurchaseTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beAfterPurchase", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beAfterPurchase cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeAfterPurchase));
                }

                xmlWriter.writeEndElement();
            }

            if (localBeAllopatricTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beAllopatric", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beAllopatric cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeAllopatric));
                }

                xmlWriter.writeEndElement();
            }

            if (localBeGroupBuyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beGroupBuy", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beGroupBuy cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeGroupBuy));
                }

                xmlWriter.writeEndElement();
            }

            if (localBeImgageProjectTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beImgageProject", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beImgageProject cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeImgageProject));
                }

                xmlWriter.writeEndElement();
            }

            if (localBeManualSelectProjectFinishTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "beManualSelectProjectFinish", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beManualSelectProjectFinish cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeManualSelectProjectFinish));
                }

                xmlWriter.writeEndElement();
            }

            if (localBeMeetFirstPartyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beMeetFirstParty", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beMeetFirstParty cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeMeetFirstParty));
                }

                xmlWriter.writeEndElement();
            }

            if (localBeSendGpmsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beSendGpms", xmlWriter);

                if (localBeSendGpms == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "beSendGpms cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBeSendGpms);
                }

                xmlWriter.writeEndElement();
            }

            if (localBeStrategyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beStrategy", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beStrategy cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeStrategy));
                }

                xmlWriter.writeEndElement();
            }

            if (localBeTurnStraightGuestTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beTurnStraightGuest",
                    xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beTurnStraightGuest cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeTurnStraightGuest));
                }

                xmlWriter.writeEndElement();
            }

            if (localCancelPersonCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "cancelPersonCode", xmlWriter);

                if (localCancelPersonCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "cancelPersonCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCancelPersonCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localCancelReasonTracker) {
                namespace = "";
                writeStartElement(null, namespace, "cancelReason", xmlWriter);

                if (localCancelReason == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "cancelReason cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCancelReason);
                }

                xmlWriter.writeEndElement();
            }

            if (localCancelTimeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "cancelTime", xmlWriter);

                if (localCancelTime == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "cancelTime cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCancelTime));
                }

                xmlWriter.writeEndElement();
            }

            if (localCenterTracker) {
                namespace = "";
                writeStartElement(null, namespace, "center", xmlWriter);

                if (localCenter == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "center cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCenter);
                }

                xmlWriter.writeEndElement();
            }

            if (localCleanEnergyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "cleanEnergy", xmlWriter);

                if (localCleanEnergy == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "cleanEnergy cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCleanEnergy);
                }

                xmlWriter.writeEndElement();
            }

            if (localCleanEnergyTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "cleanEnergyType", xmlWriter);

                if (localCleanEnergyType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "cleanEnergyType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCleanEnergyType);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdById", xmlWriter);

                if (localCreatedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreatedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localDataSourceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "dataSource", xmlWriter);

                if (localDataSource == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "dataSource cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDataSource);
                }

                xmlWriter.writeEndElement();
            }

            if (localDistrictCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "districtCode", xmlWriter);

                if (localDistrictCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "districtCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDistrictCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localDomainModelTracker) {
                namespace = "";
                writeStartElement(null, namespace, "domainModel", xmlWriter);

                if (localDomainModel == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "domainModel cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDomainModel);
                }

                xmlWriter.writeEndElement();
            }

            if (localDomainTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "domainType", xmlWriter);

                if (localDomainType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "domainType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDomainType);
                }

                xmlWriter.writeEndElement();
            }

            if (localEstimatedTimeBidTracker) {
                namespace = "";
                writeStartElement(null, namespace, "estimatedTimeBid", xmlWriter);

                if (localEstimatedTimeBid == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "estimatedTimeBid cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEstimatedTimeBid));
                }

                xmlWriter.writeEndElement();
            }

            if (localFirstCompanyIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "firstCompanyId", xmlWriter);

                if (localFirstCompanyId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "firstCompanyId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFirstCompanyId);
                }

                xmlWriter.writeEndElement();
            }

            if (localFirstCompanyNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "firstCompanyName", xmlWriter);

                if (localFirstCompanyName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "firstCompanyName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFirstCompanyName);
                }

                xmlWriter.writeEndElement();
            }

            if (localFirstCompanyOrgCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "firstCompanyOrgCode",
                    xmlWriter);

                if (localFirstCompanyOrgCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "firstCompanyOrgCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFirstCompanyOrgCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localFrequencyConversionTracker) {
                namespace = "";
                writeStartElement(null, namespace, "frequencyConversion",
                    xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "frequencyConversion cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFrequencyConversion));
                }

                xmlWriter.writeEndElement();
            }

            if (localFunnelStageTracker) {
                namespace = "";
                writeStartElement(null, namespace, "funnelStage", xmlWriter);

                if (localFunnelStage == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "funnelStage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFunnelStage);
                }

                xmlWriter.writeEndElement();
            }

            if (localFunnelStageUpdateTimeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "funnelStageUpdateTime",
                    xmlWriter);

                if (localFunnelStageUpdateTime == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "funnelStageUpdateTime cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFunnelStageUpdateTime));
                }

                xmlWriter.writeEndElement();
            }

            if (localGridCenterCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "gridCenterCode", xmlWriter);

                if (localGridCenterCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "gridCenterCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localGridCenterCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localGridCenterNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "gridCenterName", xmlWriter);

                if (localGridCenterName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "gridCenterName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localGridCenterName);
                }

                xmlWriter.writeEndElement();
            }

            if (localGridCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "gridCode", xmlWriter);

                if (localGridCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "gridCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localGridCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localGridNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "gridName", xmlWriter);

                if (localGridName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "gridName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localGridName);
                }

                xmlWriter.writeEndElement();
            }

            if (localGridUserCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "gridUserCode", xmlWriter);

                if (localGridUserCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "gridUserCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localGridUserCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localGridUserNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "gridUserName", xmlWriter);

                if (localGridUserName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "gridUserName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localGridUserName);
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            if (localIndustryHomeCategoryTracker) {
                namespace = "";
                writeStartElement(null, namespace, "industryHomeCategory",
                    xmlWriter);

                if (localIndustryHomeCategory == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "industryHomeCategory cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localIndustryHomeCategory);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedById", xmlWriter);

                if (localLastModifiedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastModifiedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localLesFlagTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lesFlag", xmlWriter);

                if (localLesFlag == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lesFlag cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLesFlag);
                }

                xmlWriter.writeEndElement();
            }

            if (localLesMsgTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lesMsg", xmlWriter);

                if (localLesMsg == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lesMsg cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLesMsg);
                }

                xmlWriter.writeEndElement();
            }

            if (localLoginLevelTracker) {
                namespace = "";
                writeStartElement(null, namespace, "loginLevel", xmlWriter);

                if (localLoginLevel == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "loginLevel cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLoginLevel));
                }

                xmlWriter.writeEndElement();
            }

            if (localMsgIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "msgId", xmlWriter);

                if (localMsgId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "msgId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localMsgId);
                }

                xmlWriter.writeEndElement();
            }

            if (localProductSeriesCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "productSeriesCode",
                    xmlWriter);

                if (localProductSeriesCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "productSeriesCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProductSeriesCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localProductSeriesNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "productSeriesName",
                    xmlWriter);

                if (localProductSeriesName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "productSeriesName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProductSeriesName);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectCode", xmlWriter);

                if (localProjectCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectCreaterCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectCreaterCode",
                    xmlWriter);

                if (localProjectCreaterCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectCreaterCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectCreaterCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectCreaterIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectCreaterId", xmlWriter);

                if (localProjectCreaterId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectCreaterId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectCreaterId);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectCreaterNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectCreaterName",
                    xmlWriter);

                if (localProjectCreaterName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectCreaterName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectCreaterName);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectFinishDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectFinishDate",
                    xmlWriter);

                if (localProjectFinishDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectFinishDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localProjectFinishDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectLastModifiedDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectLastModifiedDate",
                    xmlWriter);

                if (localProjectLastModifiedDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectLastModifiedDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localProjectLastModifiedDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectManagerCenterTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectManagerCenter",
                    xmlWriter);

                if (localProjectManagerCenter == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectManagerCenter cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectManagerCenter);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectManagerCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectManagerCode",
                    xmlWriter);

                if (localProjectManagerCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectManagerCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectManagerCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectManagerIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectManagerId", xmlWriter);

                if (localProjectManagerId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectManagerId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectManagerId);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectManagerNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectManagerName",
                    xmlWriter);

                if (localProjectManagerName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectManagerName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectManagerName);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectName", xmlWriter);

                if (localProjectName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectName);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectSourceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectSource", xmlWriter);

                if (localProjectSource == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectSource cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectSource);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectStatusTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectStatus", xmlWriter);

                if (localProjectStatus == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectStatus cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectStatus);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectType", xmlWriter);

                if (localProjectType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectType);
                }

                xmlWriter.writeEndElement();
            }

            if (localPurchaseForecastListTracker) {
                if (localPurchaseForecastList != null) {
                    for (int i = 0; i < localPurchaseForecastList.length;
                            i++) {
                        if (localPurchaseForecastList[i] != null) {
                            localPurchaseForecastList[i].serialize(new javax.xml.namespace.QName(
                                    "", "purchaseForecastList"), xmlWriter);
                        } else {
                            writeStartElement(null, "", "purchaseForecastList",
                                xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    writeStartElement(null, "", "purchaseForecastList",
                        xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }

            if (localSalesModelTracker) {
                namespace = "";
                writeStartElement(null, namespace, "salesModel", xmlWriter);

                if (localSalesModel == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "salesModel cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSalesModel);
                }

                xmlWriter.writeEndElement();
            }

            if (localSamplePlateTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "samplePlateType", xmlWriter);

                if (localSamplePlateType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "samplePlateType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSamplePlateType);
                }

                xmlWriter.writeEndElement();
            }

            if (localSendGpmsResultTracker) {
                namespace = "";
                writeStartElement(null, namespace, "sendGpmsResult", xmlWriter);

                if (localSendGpmsResult == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "sendGpmsResult cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSendGpmsResult);
                }

                xmlWriter.writeEndElement();
            }

            if (localSendGpmsTimeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "sendGpmsTime", xmlWriter);

                if (localSendGpmsTime == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "sendGpmsTime cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSendGpmsTime));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ProjectROneSaveParam parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ProjectROneSaveParam object = new ProjectROneSaveParam();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"projectROneSaveParam".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ProjectROneSaveParam) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list62 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "addressCity").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "addressCity").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "addressCity" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAddressCity(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "addressCounty").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "addressCounty").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "addressCounty" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAddressCounty(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "addressDetail").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "addressDetail").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "addressDetail" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAddressDetail(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "addressProvince").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "addressProvince").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "addressProvince" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAddressProvince(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "area").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "area").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "area" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setArea(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beAfterPurchase").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beAfterPurchase").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beAfterPurchase" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeAfterPurchase(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beAllopatric").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beAllopatric").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beAllopatric" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeAllopatric(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beGroupBuy").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beGroupBuy").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beGroupBuy" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeGroupBuy(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beImgageProject").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beImgageProject").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beImgageProject" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeImgageProject(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "beManualSelectProjectFinish").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "beManualSelectProjectFinish").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " +
                                "beManualSelectProjectFinish" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeManualSelectProjectFinish(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beMeetFirstParty").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beMeetFirstParty").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beMeetFirstParty" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeMeetFirstParty(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beSendGpms").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beSendGpms").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beSendGpms" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeSendGpms(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beStrategy").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beStrategy").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beStrategy" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeStrategy(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "beTurnStraightGuest").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "beTurnStraightGuest").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beTurnStraightGuest" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeTurnStraightGuest(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "cancelPersonCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "cancelPersonCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "cancelPersonCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCancelPersonCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "cancelReason").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "cancelReason").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "cancelReason" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCancelReason(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "cancelTime").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "cancelTime").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "cancelTime" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCancelTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "center").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "center").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "center" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCenter(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "cleanEnergy").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "cleanEnergy").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "cleanEnergy" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCleanEnergy(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "cleanEnergyType").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "cleanEnergyType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "cleanEnergyType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCleanEnergyType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "dataSource").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "dataSource").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "dataSource" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDataSource(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "districtCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "districtCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "districtCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDistrictCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "domainModel").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "domainModel").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "domainModel" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDomainModel(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "domainType").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "domainType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "domainType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDomainType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "estimatedTimeBid").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "estimatedTimeBid").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "estimatedTimeBid" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEstimatedTimeBid(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "firstCompanyId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "firstCompanyId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "firstCompanyId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFirstCompanyId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "firstCompanyName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "firstCompanyName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "firstCompanyName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFirstCompanyName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "firstCompanyOrgCode").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "firstCompanyOrgCode").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "firstCompanyOrgCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFirstCompanyOrgCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "frequencyConversion").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "frequencyConversion").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "frequencyConversion" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFrequencyConversion(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "funnelStage").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "funnelStage").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "funnelStage" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFunnelStage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "funnelStageUpdateTime").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "funnelStageUpdateTime").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "funnelStageUpdateTime" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFunnelStageUpdateTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "gridCenterCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "gridCenterCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "gridCenterCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGridCenterCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "gridCenterName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "gridCenterName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "gridCenterName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGridCenterName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "gridCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "gridCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "gridCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGridCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "gridName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "gridName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "gridName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGridName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "gridUserCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "gridUserCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "gridUserCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGridUserCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "gridUserName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "gridUserName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "gridUserName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGridUserName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "industryHomeCategory").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "industryHomeCategory").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "industryHomeCategory" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIndustryHomeCategory(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lesFlag").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lesFlag").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lesFlag" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLesFlag(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lesMsg").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lesMsg").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lesMsg" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLesMsg(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "loginLevel").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "loginLevel").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "loginLevel" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLoginLevel(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setLoginLevel(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "msgId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "msgId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "msgId" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMsgId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "productSeriesCode").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "productSeriesCode").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "productSeriesCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductSeriesCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "productSeriesName").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "productSeriesName").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "productSeriesName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductSeriesName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectCreaterCode").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectCreaterCode").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectCreaterCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectCreaterCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectCreaterId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectCreaterId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectCreaterId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectCreaterId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectCreaterName").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectCreaterName").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectCreaterName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectCreaterName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectFinishDate").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectFinishDate").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectFinishDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectFinishDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectLastModifiedDate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectLastModifiedDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectLastModifiedDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectLastModifiedDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectManagerCenter").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectManagerCenter").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectManagerCenter" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectManagerCenter(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectManagerCode").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectManagerCode").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectManagerCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectManagerCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectManagerId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectManagerId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectManagerId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectManagerId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectManagerName").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectManagerName").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectManagerName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectManagerName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectSource").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectSource").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectSource" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectSource(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectStatus").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectStatus").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectStatus" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectStatus(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectType").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "purchaseForecastList").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "purchaseForecastList").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            list62.add(null);
                            reader.next();
                        } else {
                            list62.add(ProjectPurchaseForecastSaveParam.Factory.parse(
                                    reader));
                        }

                        //loop until we find a start element that is not part of this array
                        boolean loopDone62 = false;

                        while (!loopDone62) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone62 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "purchaseForecastList").equals(
                                            reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                            "nil");

                                    if ("true".equals(nillableValue) ||
                                            "1".equals(nillableValue)) {
                                        list62.add(null);
                                        reader.next();
                                    } else {
                                        list62.add(ProjectPurchaseForecastSaveParam.Factory.parse(
                                                reader));
                                    }
                                } else {
                                    loopDone62 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setPurchaseForecastList((ProjectPurchaseForecastSaveParam[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                ProjectPurchaseForecastSaveParam.class, list62));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "salesModel").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "salesModel").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "salesModel" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSalesModel(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "samplePlateType").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "samplePlateType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "samplePlateType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSamplePlateType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "sendGpmsResult").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "sendGpmsResult").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "sendGpmsResult" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSendGpmsResult(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "sendGpmsTime").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "sendGpmsTime").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "sendGpmsTime" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSendGpmsTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class QueryProjectManagerFromHPSE implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://project.funnel.api.manage.hps.com/",
                "queryProjectManagerFromHPS", "ns1");

        /**
         * field for QueryProjectManagerFromHPS
         */
        protected QueryProjectManagerFromHPS localQueryProjectManagerFromHPS;

        /**
         * Auto generated getter method
         * @return QueryProjectManagerFromHPS
         */
        public QueryProjectManagerFromHPS getQueryProjectManagerFromHPS() {
            return localQueryProjectManagerFromHPS;
        }

        /**
         * Auto generated setter method
         * @param param QueryProjectManagerFromHPS
         */
        public void setQueryProjectManagerFromHPS(
            QueryProjectManagerFromHPS param) {
            this.localQueryProjectManagerFromHPS = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localQueryProjectManagerFromHPS == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "queryProjectManagerFromHPS cannot be null!");
            }

            localQueryProjectManagerFromHPS.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static QueryProjectManagerFromHPSE parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                QueryProjectManagerFromHPSE object = new QueryProjectManagerFromHPSE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if ((reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://project.funnel.api.manage.hps.com/",
                                        "queryProjectManagerFromHPS").equals(
                                        reader.getName())) ||
                                    new javax.xml.namespace.QName("",
                                        "queryProjectManagerFromHPS").equals(
                                        reader.getName())) {
                                object.setQueryProjectManagerFromHPS(QueryProjectManagerFromHPS.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ProjectRFourSaveParam extends ToString implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = projectRFourSaveParam
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for ActualInstallationAmount
         */
        protected java.math.BigDecimal localActualInstallationAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localActualInstallationAmountTracker = false;

        /**
         * field for ActualTenderTime
         */
        protected java.util.Calendar localActualTenderTime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localActualTenderTimeTracker = false;

        /**
         * field for BeAdvanceFund
         */
        protected boolean localBeAdvanceFund;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeAdvanceFundTracker = false;

        /**
         * field for BeIndependentBid
         */
        protected java.lang.String localBeIndependentBid;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeIndependentBidTracker = false;

        /**
         * field for BeSendWithOne
         */
        protected boolean localBeSendWithOne;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeSendWithOneTracker = false;

        /**
         * field for BeSinceSupervision
         */
        protected boolean localBeSinceSupervision;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeSinceSupervisionTracker = false;

        /**
         * field for Business
         */
        protected java.lang.String localBusiness;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBusinessTracker = false;

        /**
         * field for BusinessProfits
         */
        protected java.math.BigDecimal localBusinessProfits;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBusinessProfitsTracker = false;

        /**
         * field for CompetiorAnalysisList
         * This was an Array!
         */
        protected CompetiorAnalysisTechnologySaveParam[] localCompetiorAnalysisList;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCompetiorAnalysisListTracker = false;

        /**
         * field for CreatedById
         */
        protected java.lang.String localCreatedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedByIdTracker = false;

        /**
         * field for FirstBidDocument
         */
        protected java.lang.String localFirstBidDocument;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFirstBidDocumentTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for LastModifiedById
         */
        protected java.lang.String localLastModifiedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastModifiedByIdTracker = false;

        /**
         * field for Money
         */
        protected java.math.BigDecimal localMoney;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMoneyTracker = false;

        /**
         * field for PoolOrgRatio
         */
        protected double localPoolOrgRatio;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPoolOrgRatioTracker = false;

        /**
         * field for ProjectId
         */
        protected java.lang.String localProjectId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectIdTracker = false;

        /**
         * field for TechnicalProposal
         */
        protected java.lang.String localTechnicalProposal;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTechnicalProposalTracker = false;

        /**
         * field for Tender
         */
        protected java.lang.String localTender;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTenderTracker = false;

        /**
         * field for WbsCode
         */
        protected java.lang.String localWbsCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWbsCodeTracker = false;

        public boolean isActualInstallationAmountSpecified() {
            return localActualInstallationAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getActualInstallationAmount() {
            return localActualInstallationAmount;
        }

        /**
         * Auto generated setter method
         * @param param ActualInstallationAmount
         */
        public void setActualInstallationAmount(java.math.BigDecimal param) {
            localActualInstallationAmountTracker = param != null;

            this.localActualInstallationAmount = param;
        }

        public boolean isActualTenderTimeSpecified() {
            return localActualTenderTimeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getActualTenderTime() {
            return localActualTenderTime;
        }

        /**
         * Auto generated setter method
         * @param param ActualTenderTime
         */
        public void setActualTenderTime(java.util.Calendar param) {
            localActualTenderTimeTracker = param != null;

            this.localActualTenderTime = param;
        }

        public boolean isBeAdvanceFundSpecified() {
            return localBeAdvanceFundTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeAdvanceFund() {
            return localBeAdvanceFund;
        }

        /**
         * Auto generated setter method
         * @param param BeAdvanceFund
         */
        public void setBeAdvanceFund(boolean param) {
            // setting primitive attribute tracker to true
            localBeAdvanceFundTracker = true;

            this.localBeAdvanceFund = param;
        }

        public boolean isBeIndependentBidSpecified() {
            return localBeIndependentBidTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBeIndependentBid() {
            return localBeIndependentBid;
        }

        /**
         * Auto generated setter method
         * @param param BeIndependentBid
         */
        public void setBeIndependentBid(java.lang.String param) {
            localBeIndependentBidTracker = param != null;

            this.localBeIndependentBid = param;
        }

        public boolean isBeSendWithOneSpecified() {
            return localBeSendWithOneTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeSendWithOne() {
            return localBeSendWithOne;
        }

        /**
         * Auto generated setter method
         * @param param BeSendWithOne
         */
        public void setBeSendWithOne(boolean param) {
            // setting primitive attribute tracker to true
            localBeSendWithOneTracker = true;

            this.localBeSendWithOne = param;
        }

        public boolean isBeSinceSupervisionSpecified() {
            return localBeSinceSupervisionTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeSinceSupervision() {
            return localBeSinceSupervision;
        }

        /**
         * Auto generated setter method
         * @param param BeSinceSupervision
         */
        public void setBeSinceSupervision(boolean param) {
            // setting primitive attribute tracker to true
            localBeSinceSupervisionTracker = true;

            this.localBeSinceSupervision = param;
        }

        public boolean isBusinessSpecified() {
            return localBusinessTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBusiness() {
            return localBusiness;
        }

        /**
         * Auto generated setter method
         * @param param Business
         */
        public void setBusiness(java.lang.String param) {
            localBusinessTracker = param != null;

            this.localBusiness = param;
        }

        public boolean isBusinessProfitsSpecified() {
            return localBusinessProfitsTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getBusinessProfits() {
            return localBusinessProfits;
        }

        /**
         * Auto generated setter method
         * @param param BusinessProfits
         */
        public void setBusinessProfits(java.math.BigDecimal param) {
            localBusinessProfitsTracker = param != null;

            this.localBusinessProfits = param;
        }

        public boolean isCompetiorAnalysisListSpecified() {
            return localCompetiorAnalysisListTracker;
        }

        /**
         * Auto generated getter method
         * @return CompetiorAnalysisTechnologySaveParam[]
         */
        public CompetiorAnalysisTechnologySaveParam[] getCompetiorAnalysisList() {
            return localCompetiorAnalysisList;
        }

        /**
         * validate the array for CompetiorAnalysisList
         */
        protected void validateCompetiorAnalysisList(
            CompetiorAnalysisTechnologySaveParam[] param) {
        }

        /**
         * Auto generated setter method
         * @param param CompetiorAnalysisList
         */
        public void setCompetiorAnalysisList(
            CompetiorAnalysisTechnologySaveParam[] param) {
            validateCompetiorAnalysisList(param);

            localCompetiorAnalysisListTracker = true;

            this.localCompetiorAnalysisList = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param CompetiorAnalysisTechnologySaveParam
         */
        public void addCompetiorAnalysisList(
            CompetiorAnalysisTechnologySaveParam param) {
            if (localCompetiorAnalysisList == null) {
                localCompetiorAnalysisList = new CompetiorAnalysisTechnologySaveParam[] {
                        
                    };
            }

            //update the setting tracker
            localCompetiorAnalysisListTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localCompetiorAnalysisList);
            list.add(param);
            this.localCompetiorAnalysisList = (CompetiorAnalysisTechnologySaveParam[]) list.toArray(new CompetiorAnalysisTechnologySaveParam[list.size()]);
        }

        public boolean isCreatedByIdSpecified() {
            return localCreatedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreatedById() {
            return localCreatedById;
        }

        /**
         * Auto generated setter method
         * @param param CreatedById
         */
        public void setCreatedById(java.lang.String param) {
            localCreatedByIdTracker = param != null;

            this.localCreatedById = param;
        }

        public boolean isFirstBidDocumentSpecified() {
            return localFirstBidDocumentTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFirstBidDocument() {
            return localFirstBidDocument;
        }

        /**
         * Auto generated setter method
         * @param param FirstBidDocument
         */
        public void setFirstBidDocument(java.lang.String param) {
            localFirstBidDocumentTracker = param != null;

            this.localFirstBidDocument = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        public boolean isLastModifiedByIdSpecified() {
            return localLastModifiedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLastModifiedById() {
            return localLastModifiedById;
        }

        /**
         * Auto generated setter method
         * @param param LastModifiedById
         */
        public void setLastModifiedById(java.lang.String param) {
            localLastModifiedByIdTracker = param != null;

            this.localLastModifiedById = param;
        }

        public boolean isMoneySpecified() {
            return localMoneyTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getMoney() {
            return localMoney;
        }

        /**
         * Auto generated setter method
         * @param param Money
         */
        public void setMoney(java.math.BigDecimal param) {
            localMoneyTracker = param != null;

            this.localMoney = param;
        }

        public boolean isPoolOrgRatioSpecified() {
            return localPoolOrgRatioTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getPoolOrgRatio() {
            return localPoolOrgRatio;
        }

        /**
         * Auto generated setter method
         * @param param PoolOrgRatio
         */
        public void setPoolOrgRatio(double param) {
            // setting primitive attribute tracker to true
            localPoolOrgRatioTracker = !java.lang.Double.isNaN(param);

            this.localPoolOrgRatio = param;
        }

        public boolean isProjectIdSpecified() {
            return localProjectIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectId() {
            return localProjectId;
        }

        /**
         * Auto generated setter method
         * @param param ProjectId
         */
        public void setProjectId(java.lang.String param) {
            localProjectIdTracker = param != null;

            this.localProjectId = param;
        }

        public boolean isTechnicalProposalSpecified() {
            return localTechnicalProposalTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTechnicalProposal() {
            return localTechnicalProposal;
        }

        /**
         * Auto generated setter method
         * @param param TechnicalProposal
         */
        public void setTechnicalProposal(java.lang.String param) {
            localTechnicalProposalTracker = param != null;

            this.localTechnicalProposal = param;
        }

        public boolean isTenderSpecified() {
            return localTenderTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTender() {
            return localTender;
        }

        /**
         * Auto generated setter method
         * @param param Tender
         */
        public void setTender(java.lang.String param) {
            localTenderTracker = param != null;

            this.localTender = param;
        }

        public boolean isWbsCodeSpecified() {
            return localWbsCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getWbsCode() {
            return localWbsCode;
        }

        /**
         * Auto generated setter method
         * @param param WbsCode
         */
        public void setWbsCode(java.lang.String param) {
            localWbsCodeTracker = param != null;

            this.localWbsCode = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":projectRFourSaveParam", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "projectRFourSaveParam", xmlWriter);
            }

            if (localActualInstallationAmountTracker) {
                namespace = "";
                writeStartElement(null, namespace, "actualInstallationAmount",
                    xmlWriter);

                if (localActualInstallationAmount == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "actualInstallationAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localActualInstallationAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localActualTenderTimeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "actualTenderTime", xmlWriter);

                if (localActualTenderTime == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "actualTenderTime cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localActualTenderTime));
                }

                xmlWriter.writeEndElement();
            }

            if (localBeAdvanceFundTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beAdvanceFund", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beAdvanceFund cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeAdvanceFund));
                }

                xmlWriter.writeEndElement();
            }

            if (localBeIndependentBidTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beIndependentBid", xmlWriter);

                if (localBeIndependentBid == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "beIndependentBid cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBeIndependentBid);
                }

                xmlWriter.writeEndElement();
            }

            if (localBeSendWithOneTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beSendWithOne", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beSendWithOne cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeSendWithOne));
                }

                xmlWriter.writeEndElement();
            }

            if (localBeSinceSupervisionTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beSinceSupervision",
                    xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beSinceSupervision cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeSinceSupervision));
                }

                xmlWriter.writeEndElement();
            }

            if (localBusinessTracker) {
                namespace = "";
                writeStartElement(null, namespace, "business", xmlWriter);

                if (localBusiness == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "business cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBusiness);
                }

                xmlWriter.writeEndElement();
            }

            if (localBusinessProfitsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "businessProfits", xmlWriter);

                if (localBusinessProfits == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "businessProfits cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBusinessProfits));
                }

                xmlWriter.writeEndElement();
            }

            if (localCompetiorAnalysisListTracker) {
                if (localCompetiorAnalysisList != null) {
                    for (int i = 0; i < localCompetiorAnalysisList.length;
                            i++) {
                        if (localCompetiorAnalysisList[i] != null) {
                            localCompetiorAnalysisList[i].serialize(new javax.xml.namespace.QName(
                                    "", "competiorAnalysisList"), xmlWriter);
                        } else {
                            writeStartElement(null, "",
                                "competiorAnalysisList", xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    writeStartElement(null, "", "competiorAnalysisList",
                        xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }

            if (localCreatedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdById", xmlWriter);

                if (localCreatedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreatedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localFirstBidDocumentTracker) {
                namespace = "";
                writeStartElement(null, namespace, "firstBidDocument", xmlWriter);

                if (localFirstBidDocument == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "firstBidDocument cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFirstBidDocument);
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedById", xmlWriter);

                if (localLastModifiedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastModifiedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localMoneyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "money", xmlWriter);

                if (localMoney == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "money cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMoney));
                }

                xmlWriter.writeEndElement();
            }

            if (localPoolOrgRatioTracker) {
                namespace = "";
                writeStartElement(null, namespace, "poolOrgRatio", xmlWriter);

                if (java.lang.Double.isNaN(localPoolOrgRatio)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "poolOrgRatio cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPoolOrgRatio));
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectId", xmlWriter);

                if (localProjectId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectId);
                }

                xmlWriter.writeEndElement();
            }

            if (localTechnicalProposalTracker) {
                namespace = "";
                writeStartElement(null, namespace, "technicalProposal",
                    xmlWriter);

                if (localTechnicalProposal == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "technicalProposal cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTechnicalProposal);
                }

                xmlWriter.writeEndElement();
            }

            if (localTenderTracker) {
                namespace = "";
                writeStartElement(null, namespace, "tender", xmlWriter);

                if (localTender == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "tender cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTender);
                }

                xmlWriter.writeEndElement();
            }

            if (localWbsCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "wbsCode", xmlWriter);

                if (localWbsCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "wbsCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localWbsCode);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ProjectRFourSaveParam parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ProjectRFourSaveParam object = new ProjectRFourSaveParam();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"projectRFourSaveParam".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ProjectRFourSaveParam) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list9 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "actualInstallationAmount").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "actualInstallationAmount").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "actualInstallationAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setActualInstallationAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "actualTenderTime").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "actualTenderTime").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "actualTenderTime" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setActualTenderTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beAdvanceFund").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beAdvanceFund").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beAdvanceFund" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeAdvanceFund(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beIndependentBid").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beIndependentBid").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beIndependentBid" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeIndependentBid(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beSendWithOne").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beSendWithOne").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beSendWithOne" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeSendWithOne(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "beSinceSupervision").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "beSinceSupervision").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beSinceSupervision" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeSinceSupervision(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "business").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "business").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "business" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBusiness(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "businessProfits").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "businessProfits").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "businessProfits" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBusinessProfits(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "competiorAnalysisList").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "competiorAnalysisList").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            list9.add(null);
                            reader.next();
                        } else {
                            list9.add(CompetiorAnalysisTechnologySaveParam.Factory.parse(
                                    reader));
                        }

                        //loop until we find a start element that is not part of this array
                        boolean loopDone9 = false;

                        while (!loopDone9) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone9 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "competiorAnalysisList").equals(
                                            reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                            "nil");

                                    if ("true".equals(nillableValue) ||
                                            "1".equals(nillableValue)) {
                                        list9.add(null);
                                        reader.next();
                                    } else {
                                        list9.add(CompetiorAnalysisTechnologySaveParam.Factory.parse(
                                                reader));
                                    }
                                } else {
                                    loopDone9 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setCompetiorAnalysisList((CompetiorAnalysisTechnologySaveParam[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                CompetiorAnalysisTechnologySaveParam.class,
                                list9));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "firstBidDocument").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "firstBidDocument").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "firstBidDocument" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFirstBidDocument(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "money").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "money").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "money" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMoney(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "poolOrgRatio").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "poolOrgRatio").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "poolOrgRatio" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPoolOrgRatio(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setPoolOrgRatio(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "technicalProposal").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "technicalProposal").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "technicalProposal" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTechnicalProposal(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "tender").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "tender").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "tender" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTender(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "wbsCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "wbsCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "wbsCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setWbsCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class JsonResult extends ToString implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = jsonResult
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":jsonResult", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "jsonResult", xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static JsonResult parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                JsonResult object = new JsonResult();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"jsonResult".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (JsonResult) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class UserDTO extends BasicDto implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = userDTO
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for ActiveBeginTime
         */
        protected java.util.Calendar localActiveBeginTime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localActiveBeginTimeTracker = false;

        /**
         * field for ActiveEndTime
         */
        protected java.util.Calendar localActiveEndTime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localActiveEndTimeTracker = false;

        /**
         * field for BeLocked
         */
        protected boolean localBeLocked;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeLockedTracker = false;

        /**
         * field for BeSystemManage
         */
        protected boolean localBeSystemManage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeSystemManageTracker = false;

        /**
         * field for Code
         */
        protected java.lang.String localCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCodeTracker = false;

        /**
         * field for CreatedById
         */
        protected java.lang.String localCreatedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedByIdTracker = false;

        /**
         * field for DeptName
         */
        protected java.lang.String localDeptName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDeptNameTracker = false;

        /**
         * field for DeptNo
         */
        protected java.lang.String localDeptNo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDeptNoTracker = false;

        /**
         * field for DomainCode
         */
        protected java.lang.String localDomainCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDomainCodeTracker = false;

        /**
         * field for DomainName
         */
        protected java.lang.String localDomainName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDomainNameTracker = false;

        /**
         * field for Email
         */
        protected java.lang.String localEmail;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEmailTracker = false;

        /**
         * field for Fax
         */
        protected java.lang.String localFax;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFaxTracker = false;

        /**
         * field for FirstLineCode
         */
        protected java.lang.String localFirstLineCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFirstLineCodeTracker = false;

        /**
         * field for FirstLineName
         */
        protected java.lang.String localFirstLineName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFirstLineNameTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for ImgPath
         */
        protected java.lang.String localImgPath;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localImgPathTracker = false;

        /**
         * field for IsManage
         */
        protected java.lang.String localIsManage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIsManageTracker = false;

        /**
         * field for LastLoginTime
         */
        protected java.util.Calendar localLastLoginTime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastLoginTimeTracker = false;

        /**
         * field for LastModifiedById
         */
        protected java.lang.String localLastModifiedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastModifiedByIdTracker = false;

        /**
         * field for LockReason
         */
        protected java.lang.String localLockReason;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLockReasonTracker = false;

        /**
         * field for Mobile
         */
        protected java.lang.String localMobile;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMobileTracker = false;

        /**
         * field for Name
         */
        protected java.lang.String localName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNameTracker = false;

        /**
         * field for Openid
         */
        protected java.lang.String localOpenid;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOpenidTracker = false;

        /**
         * field for OrganizationCode
         */
        protected java.lang.String localOrganizationCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOrganizationCodeTracker = false;

        /**
         * field for OrganizationName
         */
        protected java.lang.String localOrganizationName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOrganizationNameTracker = false;

        /**
         * field for Phone
         */
        protected java.lang.String localPhone;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPhoneTracker = false;

        /**
         * field for RegistTime
         */
        protected java.lang.String localRegistTime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRegistTimeTracker = false;

        /**
         * field for Remark
         */
        protected java.lang.String localRemark;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRemarkTracker = false;

        /**
         * field for SecondLineCode
         */
        protected java.lang.String localSecondLineCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSecondLineCodeTracker = false;

        /**
         * field for SecondLineName
         */
        protected java.lang.String localSecondLineName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSecondLineNameTracker = false;

        /**
         * field for Sex
         */
        protected java.lang.String localSex;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSexTracker = false;

        /**
         * field for StandardPostCode
         */
        protected java.lang.String localStandardPostCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStandardPostCodeTracker = false;

        /**
         * field for StandardPostName
         */
        protected java.lang.String localStandardPostName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStandardPostNameTracker = false;

        /**
         * field for TagInfo
         * This was an Array!
         */
        protected BasePostTagContentDTO[] localTagInfo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTagInfoTracker = false;

        public boolean isActiveBeginTimeSpecified() {
            return localActiveBeginTimeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getActiveBeginTime() {
            return localActiveBeginTime;
        }

        /**
         * Auto generated setter method
         * @param param ActiveBeginTime
         */
        public void setActiveBeginTime(java.util.Calendar param) {
            localActiveBeginTimeTracker = param != null;

            this.localActiveBeginTime = param;
        }

        public boolean isActiveEndTimeSpecified() {
            return localActiveEndTimeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getActiveEndTime() {
            return localActiveEndTime;
        }

        /**
         * Auto generated setter method
         * @param param ActiveEndTime
         */
        public void setActiveEndTime(java.util.Calendar param) {
            localActiveEndTimeTracker = param != null;

            this.localActiveEndTime = param;
        }

        public boolean isBeLockedSpecified() {
            return localBeLockedTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeLocked() {
            return localBeLocked;
        }

        /**
         * Auto generated setter method
         * @param param BeLocked
         */
        public void setBeLocked(boolean param) {
            // setting primitive attribute tracker to true
            localBeLockedTracker = true;

            this.localBeLocked = param;
        }

        public boolean isBeSystemManageSpecified() {
            return localBeSystemManageTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeSystemManage() {
            return localBeSystemManage;
        }

        /**
         * Auto generated setter method
         * @param param BeSystemManage
         */
        public void setBeSystemManage(boolean param) {
            // setting primitive attribute tracker to true
            localBeSystemManageTracker = true;

            this.localBeSystemManage = param;
        }

        public boolean isCodeSpecified() {
            return localCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCode() {
            return localCode;
        }

        /**
         * Auto generated setter method
         * @param param Code
         */
        public void setCode(java.lang.String param) {
            localCodeTracker = param != null;

            this.localCode = param;
        }

        public boolean isCreatedByIdSpecified() {
            return localCreatedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreatedById() {
            return localCreatedById;
        }

        /**
         * Auto generated setter method
         * @param param CreatedById
         */
        public void setCreatedById(java.lang.String param) {
            localCreatedByIdTracker = param != null;

            this.localCreatedById = param;
        }

        public boolean isDeptNameSpecified() {
            return localDeptNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDeptName() {
            return localDeptName;
        }

        /**
         * Auto generated setter method
         * @param param DeptName
         */
        public void setDeptName(java.lang.String param) {
            localDeptNameTracker = param != null;

            this.localDeptName = param;
        }

        public boolean isDeptNoSpecified() {
            return localDeptNoTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDeptNo() {
            return localDeptNo;
        }

        /**
         * Auto generated setter method
         * @param param DeptNo
         */
        public void setDeptNo(java.lang.String param) {
            localDeptNoTracker = param != null;

            this.localDeptNo = param;
        }

        public boolean isDomainCodeSpecified() {
            return localDomainCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDomainCode() {
            return localDomainCode;
        }

        /**
         * Auto generated setter method
         * @param param DomainCode
         */
        public void setDomainCode(java.lang.String param) {
            localDomainCodeTracker = param != null;

            this.localDomainCode = param;
        }

        public boolean isDomainNameSpecified() {
            return localDomainNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDomainName() {
            return localDomainName;
        }

        /**
         * Auto generated setter method
         * @param param DomainName
         */
        public void setDomainName(java.lang.String param) {
            localDomainNameTracker = param != null;

            this.localDomainName = param;
        }

        public boolean isEmailSpecified() {
            return localEmailTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEmail() {
            return localEmail;
        }

        /**
         * Auto generated setter method
         * @param param Email
         */
        public void setEmail(java.lang.String param) {
            localEmailTracker = param != null;

            this.localEmail = param;
        }

        public boolean isFaxSpecified() {
            return localFaxTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFax() {
            return localFax;
        }

        /**
         * Auto generated setter method
         * @param param Fax
         */
        public void setFax(java.lang.String param) {
            localFaxTracker = param != null;

            this.localFax = param;
        }

        public boolean isFirstLineCodeSpecified() {
            return localFirstLineCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFirstLineCode() {
            return localFirstLineCode;
        }

        /**
         * Auto generated setter method
         * @param param FirstLineCode
         */
        public void setFirstLineCode(java.lang.String param) {
            localFirstLineCodeTracker = param != null;

            this.localFirstLineCode = param;
        }

        public boolean isFirstLineNameSpecified() {
            return localFirstLineNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFirstLineName() {
            return localFirstLineName;
        }

        /**
         * Auto generated setter method
         * @param param FirstLineName
         */
        public void setFirstLineName(java.lang.String param) {
            localFirstLineNameTracker = param != null;

            this.localFirstLineName = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        public boolean isImgPathSpecified() {
            return localImgPathTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getImgPath() {
            return localImgPath;
        }

        /**
         * Auto generated setter method
         * @param param ImgPath
         */
        public void setImgPath(java.lang.String param) {
            localImgPathTracker = param != null;

            this.localImgPath = param;
        }

        public boolean isIsManageSpecified() {
            return localIsManageTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getIsManage() {
            return localIsManage;
        }

        /**
         * Auto generated setter method
         * @param param IsManage
         */
        public void setIsManage(java.lang.String param) {
            localIsManageTracker = param != null;

            this.localIsManage = param;
        }

        public boolean isLastLoginTimeSpecified() {
            return localLastLoginTimeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getLastLoginTime() {
            return localLastLoginTime;
        }

        /**
         * Auto generated setter method
         * @param param LastLoginTime
         */
        public void setLastLoginTime(java.util.Calendar param) {
            localLastLoginTimeTracker = param != null;

            this.localLastLoginTime = param;
        }

        public boolean isLastModifiedByIdSpecified() {
            return localLastModifiedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLastModifiedById() {
            return localLastModifiedById;
        }

        /**
         * Auto generated setter method
         * @param param LastModifiedById
         */
        public void setLastModifiedById(java.lang.String param) {
            localLastModifiedByIdTracker = param != null;

            this.localLastModifiedById = param;
        }

        public boolean isLockReasonSpecified() {
            return localLockReasonTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLockReason() {
            return localLockReason;
        }

        /**
         * Auto generated setter method
         * @param param LockReason
         */
        public void setLockReason(java.lang.String param) {
            localLockReasonTracker = param != null;

            this.localLockReason = param;
        }

        public boolean isMobileSpecified() {
            return localMobileTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMobile() {
            return localMobile;
        }

        /**
         * Auto generated setter method
         * @param param Mobile
         */
        public void setMobile(java.lang.String param) {
            localMobileTracker = param != null;

            this.localMobile = param;
        }

        public boolean isNameSpecified() {
            return localNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getName() {
            return localName;
        }

        /**
         * Auto generated setter method
         * @param param Name
         */
        public void setName(java.lang.String param) {
            localNameTracker = param != null;

            this.localName = param;
        }

        public boolean isOpenidSpecified() {
            return localOpenidTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOpenid() {
            return localOpenid;
        }

        /**
         * Auto generated setter method
         * @param param Openid
         */
        public void setOpenid(java.lang.String param) {
            localOpenidTracker = param != null;

            this.localOpenid = param;
        }

        public boolean isOrganizationCodeSpecified() {
            return localOrganizationCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOrganizationCode() {
            return localOrganizationCode;
        }

        /**
         * Auto generated setter method
         * @param param OrganizationCode
         */
        public void setOrganizationCode(java.lang.String param) {
            localOrganizationCodeTracker = param != null;

            this.localOrganizationCode = param;
        }

        public boolean isOrganizationNameSpecified() {
            return localOrganizationNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOrganizationName() {
            return localOrganizationName;
        }

        /**
         * Auto generated setter method
         * @param param OrganizationName
         */
        public void setOrganizationName(java.lang.String param) {
            localOrganizationNameTracker = param != null;

            this.localOrganizationName = param;
        }

        public boolean isPhoneSpecified() {
            return localPhoneTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPhone() {
            return localPhone;
        }

        /**
         * Auto generated setter method
         * @param param Phone
         */
        public void setPhone(java.lang.String param) {
            localPhoneTracker = param != null;

            this.localPhone = param;
        }

        public boolean isRegistTimeSpecified() {
            return localRegistTimeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getRegistTime() {
            return localRegistTime;
        }

        /**
         * Auto generated setter method
         * @param param RegistTime
         */
        public void setRegistTime(java.lang.String param) {
            localRegistTimeTracker = param != null;

            this.localRegistTime = param;
        }

        public boolean isRemarkSpecified() {
            return localRemarkTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getRemark() {
            return localRemark;
        }

        /**
         * Auto generated setter method
         * @param param Remark
         */
        public void setRemark(java.lang.String param) {
            localRemarkTracker = param != null;

            this.localRemark = param;
        }

        public boolean isSecondLineCodeSpecified() {
            return localSecondLineCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSecondLineCode() {
            return localSecondLineCode;
        }

        /**
         * Auto generated setter method
         * @param param SecondLineCode
         */
        public void setSecondLineCode(java.lang.String param) {
            localSecondLineCodeTracker = param != null;

            this.localSecondLineCode = param;
        }

        public boolean isSecondLineNameSpecified() {
            return localSecondLineNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSecondLineName() {
            return localSecondLineName;
        }

        /**
         * Auto generated setter method
         * @param param SecondLineName
         */
        public void setSecondLineName(java.lang.String param) {
            localSecondLineNameTracker = param != null;

            this.localSecondLineName = param;
        }

        public boolean isSexSpecified() {
            return localSexTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSex() {
            return localSex;
        }

        /**
         * Auto generated setter method
         * @param param Sex
         */
        public void setSex(java.lang.String param) {
            localSexTracker = param != null;

            this.localSex = param;
        }

        public boolean isStandardPostCodeSpecified() {
            return localStandardPostCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStandardPostCode() {
            return localStandardPostCode;
        }

        /**
         * Auto generated setter method
         * @param param StandardPostCode
         */
        public void setStandardPostCode(java.lang.String param) {
            localStandardPostCodeTracker = param != null;

            this.localStandardPostCode = param;
        }

        public boolean isStandardPostNameSpecified() {
            return localStandardPostNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStandardPostName() {
            return localStandardPostName;
        }

        /**
         * Auto generated setter method
         * @param param StandardPostName
         */
        public void setStandardPostName(java.lang.String param) {
            localStandardPostNameTracker = param != null;

            this.localStandardPostName = param;
        }

        public boolean isTagInfoSpecified() {
            return localTagInfoTracker;
        }

        /**
         * Auto generated getter method
         * @return BasePostTagContentDTO[]
         */
        public BasePostTagContentDTO[] getTagInfo() {
            return localTagInfo;
        }

        /**
         * validate the array for TagInfo
         */
        protected void validateTagInfo(BasePostTagContentDTO[] param) {
        }

        /**
         * Auto generated setter method
         * @param param TagInfo
         */
        public void setTagInfo(BasePostTagContentDTO[] param) {
            validateTagInfo(param);

            localTagInfoTracker = true;

            this.localTagInfo = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param BasePostTagContentDTO
         */
        public void addTagInfo(BasePostTagContentDTO param) {
            if (localTagInfo == null) {
                localTagInfo = new BasePostTagContentDTO[] {  };
            }

            //update the setting tracker
            localTagInfoTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localTagInfo);
            list.add(param);
            this.localTagInfo = (BasePostTagContentDTO[]) list.toArray(new BasePostTagContentDTO[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":userDTO", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "userDTO", xmlWriter);
            }

            if (localBatchDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "batchDate", xmlWriter);

                if (localBatchDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "batchDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBatchDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localCreProIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "creProId", xmlWriter);

                if (localCreProId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "creProId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreProId);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedByTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdBy", xmlWriter);

                if (localCreatedBy == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdBy cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreatedBy);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdDate", xmlWriter);

                if (localCreatedDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCreatedDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localDeletedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "deleted", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "deleted cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDeleted));
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedByTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedBy", xmlWriter);

                if (localLastModifiedBy == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedBy cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastModifiedBy);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedDate", xmlWriter);

                if (localLastModifiedDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLastModifiedDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localModProIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "modProId", xmlWriter);

                if (localModProId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "modProId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localModProId);
                }

                xmlWriter.writeEndElement();
            }

            if (localActiveBeginTimeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "activeBeginTime", xmlWriter);

                if (localActiveBeginTime == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "activeBeginTime cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localActiveBeginTime));
                }

                xmlWriter.writeEndElement();
            }

            if (localActiveEndTimeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "activeEndTime", xmlWriter);

                if (localActiveEndTime == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "activeEndTime cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localActiveEndTime));
                }

                xmlWriter.writeEndElement();
            }

            if (localBeLockedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beLocked", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beLocked cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeLocked));
                }

                xmlWriter.writeEndElement();
            }

            if (localBeSystemManageTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beSystemManage", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beSystemManage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeSystemManage));
                }

                xmlWriter.writeEndElement();
            }

            if (localCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "code", xmlWriter);

                if (localCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "code cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdById", xmlWriter);

                if (localCreatedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreatedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localDeptNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "deptName", xmlWriter);

                if (localDeptName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "deptName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDeptName);
                }

                xmlWriter.writeEndElement();
            }

            if (localDeptNoTracker) {
                namespace = "";
                writeStartElement(null, namespace, "deptNo", xmlWriter);

                if (localDeptNo == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "deptNo cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDeptNo);
                }

                xmlWriter.writeEndElement();
            }

            if (localDomainCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "domainCode", xmlWriter);

                if (localDomainCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "domainCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDomainCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localDomainNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "domainName", xmlWriter);

                if (localDomainName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "domainName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDomainName);
                }

                xmlWriter.writeEndElement();
            }

            if (localEmailTracker) {
                namespace = "";
                writeStartElement(null, namespace, "email", xmlWriter);

                if (localEmail == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "email cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localEmail);
                }

                xmlWriter.writeEndElement();
            }

            if (localFaxTracker) {
                namespace = "";
                writeStartElement(null, namespace, "fax", xmlWriter);

                if (localFax == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "fax cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFax);
                }

                xmlWriter.writeEndElement();
            }

            if (localFirstLineCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "firstLineCode", xmlWriter);

                if (localFirstLineCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "firstLineCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFirstLineCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localFirstLineNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "firstLineName", xmlWriter);

                if (localFirstLineName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "firstLineName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFirstLineName);
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            if (localImgPathTracker) {
                namespace = "";
                writeStartElement(null, namespace, "imgPath", xmlWriter);

                if (localImgPath == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "imgPath cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localImgPath);
                }

                xmlWriter.writeEndElement();
            }

            if (localIsManageTracker) {
                namespace = "";
                writeStartElement(null, namespace, "isManage", xmlWriter);

                if (localIsManage == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "isManage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localIsManage);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastLoginTimeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastLoginTime", xmlWriter);

                if (localLastLoginTime == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastLoginTime cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLastLoginTime));
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedById", xmlWriter);

                if (localLastModifiedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastModifiedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localLockReasonTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lockReason", xmlWriter);

                if (localLockReason == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lockReason cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLockReason);
                }

                xmlWriter.writeEndElement();
            }

            if (localMobileTracker) {
                namespace = "";
                writeStartElement(null, namespace, "mobile", xmlWriter);

                if (localMobile == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "mobile cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localMobile);
                }

                xmlWriter.writeEndElement();
            }

            if (localNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "name", xmlWriter);

                if (localName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "name cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localName);
                }

                xmlWriter.writeEndElement();
            }

            if (localOpenidTracker) {
                namespace = "";
                writeStartElement(null, namespace, "openid", xmlWriter);

                if (localOpenid == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "openid cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOpenid);
                }

                xmlWriter.writeEndElement();
            }

            if (localOrganizationCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "organizationCode", xmlWriter);

                if (localOrganizationCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "organizationCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOrganizationCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localOrganizationNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "organizationName", xmlWriter);

                if (localOrganizationName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "organizationName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOrganizationName);
                }

                xmlWriter.writeEndElement();
            }

            if (localPhoneTracker) {
                namespace = "";
                writeStartElement(null, namespace, "phone", xmlWriter);

                if (localPhone == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "phone cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPhone);
                }

                xmlWriter.writeEndElement();
            }

            if (localRegistTimeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "registTime", xmlWriter);

                if (localRegistTime == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "registTime cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localRegistTime);
                }

                xmlWriter.writeEndElement();
            }

            if (localRemarkTracker) {
                namespace = "";
                writeStartElement(null, namespace, "remark", xmlWriter);

                if (localRemark == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "remark cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localRemark);
                }

                xmlWriter.writeEndElement();
            }

            if (localSecondLineCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "secondLineCode", xmlWriter);

                if (localSecondLineCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "secondLineCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSecondLineCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localSecondLineNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "secondLineName", xmlWriter);

                if (localSecondLineName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "secondLineName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSecondLineName);
                }

                xmlWriter.writeEndElement();
            }

            if (localSexTracker) {
                namespace = "";
                writeStartElement(null, namespace, "sex", xmlWriter);

                if (localSex == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "sex cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSex);
                }

                xmlWriter.writeEndElement();
            }

            if (localStandardPostCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "standardPostCode", xmlWriter);

                if (localStandardPostCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "standardPostCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localStandardPostCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localStandardPostNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "standardPostName", xmlWriter);

                if (localStandardPostName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "standardPostName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localStandardPostName);
                }

                xmlWriter.writeEndElement();
            }

            if (localTagInfoTracker) {
                if (localTagInfo != null) {
                    for (int i = 0; i < localTagInfo.length; i++) {
                        if (localTagInfo[i] != null) {
                            localTagInfo[i].serialize(new javax.xml.namespace.QName(
                                    "", "tagInfo"), xmlWriter);
                        } else {
                            writeStartElement(null, "", "tagInfo", xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    writeStartElement(null, "", "tagInfo", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static UserDTO parse(javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                UserDTO object = new UserDTO();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"userDTO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (UserDTO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list42 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "batchDate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "batchDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "batchDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBatchDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "creProId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "creProId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "creProId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreProId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdBy").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdBy").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdBy" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedBy(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdDate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "deleted").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "deleted").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "deleted" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDeleted(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedBy").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedBy").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedBy" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedBy(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedDate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "modProId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "modProId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "modProId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setModProId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "activeBeginTime").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "activeBeginTime").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "activeBeginTime" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setActiveBeginTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "activeEndTime").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "activeEndTime").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "activeEndTime" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setActiveEndTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beLocked").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beLocked").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beLocked" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeLocked(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beSystemManage").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beSystemManage").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beSystemManage" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeSystemManage(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "code").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "code").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "code" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "deptName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "deptName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "deptName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDeptName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "deptNo").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "deptNo").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "deptNo" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDeptNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "domainCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "domainCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "domainCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDomainCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "domainName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "domainName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "domainName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDomainName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "email").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "email").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "email" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEmail(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "fax").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "fax").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "fax" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFax(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "firstLineCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "firstLineCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "firstLineCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFirstLineCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "firstLineName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "firstLineName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "firstLineName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFirstLineName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "imgPath").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "imgPath").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "imgPath" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setImgPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "isManage").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "isManage").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "isManage" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIsManage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastLoginTime").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastLoginTime").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastLoginTime" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastLoginTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lockReason").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lockReason").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lockReason" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLockReason(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "mobile").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "mobile").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "mobile" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "name").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "name").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "name" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "openid").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "openid").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "openid" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOpenid(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "organizationCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "organizationCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "organizationCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOrganizationCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "organizationName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "organizationName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "organizationName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOrganizationName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "phone").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "phone").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "phone" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPhone(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "registTime").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "registTime").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "registTime" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRegistTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "remark").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "remark").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "remark" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRemark(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "secondLineCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "secondLineCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "secondLineCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSecondLineCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "secondLineName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "secondLineName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "secondLineName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSecondLineName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "sex").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "sex").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "sex" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSex(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "standardPostCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "standardPostCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "standardPostCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStandardPostCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "standardPostName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "standardPostName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "standardPostName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStandardPostName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "tagInfo").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "tagInfo").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            list42.add(null);
                            reader.next();
                        } else {
                            list42.add(BasePostTagContentDTO.Factory.parse(
                                    reader));
                        }

                        //loop until we find a start element that is not part of this array
                        boolean loopDone42 = false;

                        while (!loopDone42) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone42 = true;
                            } else {
                                if (new javax.xml.namespace.QName("", "tagInfo").equals(
                                            reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                            "nil");

                                    if ("true".equals(nillableValue) ||
                                            "1".equals(nillableValue)) {
                                        list42.add(null);
                                        reader.next();
                                    } else {
                                        list42.add(BasePostTagContentDTO.Factory.parse(
                                                reader));
                                    }
                                } else {
                                    loopDone42 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setTagInfo((BasePostTagContentDTO[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                BasePostTagContentDTO.class, list42));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class LockUserListResponseE implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://project.funnel.api.manage.hps.com/",
                "lockUserListResponse", "ns1");

        /**
         * field for LockUserListResponse
         */
        protected LockUserListResponse localLockUserListResponse;

        /**
         * Auto generated getter method
         * @return LockUserListResponse
         */
        public LockUserListResponse getLockUserListResponse() {
            return localLockUserListResponse;
        }

        /**
         * Auto generated setter method
         * @param param LockUserListResponse
         */
        public void setLockUserListResponse(LockUserListResponse param) {
            this.localLockUserListResponse = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localLockUserListResponse == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "lockUserListResponse cannot be null!");
            }

            localLockUserListResponse.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static LockUserListResponseE parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                LockUserListResponseE object = new LockUserListResponseE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if ((reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://project.funnel.api.manage.hps.com/",
                                        "lockUserListResponse").equals(
                                        reader.getName())) ||
                                    new javax.xml.namespace.QName("",
                                        "lockUserListResponse").equals(
                                        reader.getName())) {
                                object.setLockUserListResponse(LockUserListResponse.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class QuoteSaveParam extends ToString implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = quoteSaveParam
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for BeContracted
         */
        protected boolean localBeContracted;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeContractedTracker = false;

        /**
         * field for BeMaterialPriceSingle
         */
        protected boolean localBeMaterialPriceSingle;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeMaterialPriceSingleTracker = false;

        /**
         * field for ContractId
         */
        protected java.lang.String localContractId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContractIdTracker = false;

        /**
         * field for DomainModel
         */
        protected java.lang.String localDomainModel;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDomainModelTracker = false;

        /**
         * field for DomainType
         */
        protected java.lang.String localDomainType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDomainTypeTracker = false;

        /**
         * field for FunnelStage
         */
        protected java.lang.String localFunnelStage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFunnelStageTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for MaterialTaxRate
         */
        protected double localMaterialTaxRate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaterialTaxRateTracker = false;

        /**
         * field for NeedApproval
         */
        protected boolean localNeedApproval;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNeedApprovalTracker = false;

        /**
         * field for ProjectCode
         */
        protected java.lang.String localProjectCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectCodeTracker = false;

        /**
         * field for ProjectId
         */
        protected java.lang.String localProjectId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectIdTracker = false;

        /**
         * field for QuoteMaterialList
         * This was an Array!
         */
        protected QuoteMaterialSaveParam[] localQuoteMaterialList;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localQuoteMaterialListTracker = false;

        /**
         * field for QuoteProductList
         * This was an Array!
         */
        protected QuoteProductSaveParam[] localQuoteProductList;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localQuoteProductListTracker = false;

        /**
         * field for QuoteServeList
         * This was an Array!
         */
        protected QuoteServeSaveParam[] localQuoteServeList;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localQuoteServeListTracker = false;

        /**
         * field for QuoteStage
         */
        protected java.lang.String localQuoteStage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localQuoteStageTracker = false;

        /**
         * field for QuoteType
         */
        protected java.lang.String localQuoteType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localQuoteTypeTracker = false;

        /**
         * field for ServicePriceType
         */
        protected java.lang.String localServicePriceType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localServicePriceTypeTracker = false;

        /**
         * field for VersionIndex
         */
        protected int localVersionIndex;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localVersionIndexTracker = false;

        public boolean isBeContractedSpecified() {
            return localBeContractedTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeContracted() {
            return localBeContracted;
        }

        /**
         * Auto generated setter method
         * @param param BeContracted
         */
        public void setBeContracted(boolean param) {
            // setting primitive attribute tracker to true
            localBeContractedTracker = true;

            this.localBeContracted = param;
        }

        public boolean isBeMaterialPriceSingleSpecified() {
            return localBeMaterialPriceSingleTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeMaterialPriceSingle() {
            return localBeMaterialPriceSingle;
        }

        /**
         * Auto generated setter method
         * @param param BeMaterialPriceSingle
         */
        public void setBeMaterialPriceSingle(boolean param) {
            // setting primitive attribute tracker to true
            localBeMaterialPriceSingleTracker = true;

            this.localBeMaterialPriceSingle = param;
        }

        public boolean isContractIdSpecified() {
            return localContractIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContractId() {
            return localContractId;
        }

        /**
         * Auto generated setter method
         * @param param ContractId
         */
        public void setContractId(java.lang.String param) {
            localContractIdTracker = param != null;

            this.localContractId = param;
        }

        public boolean isDomainModelSpecified() {
            return localDomainModelTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDomainModel() {
            return localDomainModel;
        }

        /**
         * Auto generated setter method
         * @param param DomainModel
         */
        public void setDomainModel(java.lang.String param) {
            localDomainModelTracker = param != null;

            this.localDomainModel = param;
        }

        public boolean isDomainTypeSpecified() {
            return localDomainTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDomainType() {
            return localDomainType;
        }

        /**
         * Auto generated setter method
         * @param param DomainType
         */
        public void setDomainType(java.lang.String param) {
            localDomainTypeTracker = param != null;

            this.localDomainType = param;
        }

        public boolean isFunnelStageSpecified() {
            return localFunnelStageTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFunnelStage() {
            return localFunnelStage;
        }

        /**
         * Auto generated setter method
         * @param param FunnelStage
         */
        public void setFunnelStage(java.lang.String param) {
            localFunnelStageTracker = param != null;

            this.localFunnelStage = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        public boolean isMaterialTaxRateSpecified() {
            return localMaterialTaxRateTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getMaterialTaxRate() {
            return localMaterialTaxRate;
        }

        /**
         * Auto generated setter method
         * @param param MaterialTaxRate
         */
        public void setMaterialTaxRate(double param) {
            // setting primitive attribute tracker to true
            localMaterialTaxRateTracker = !java.lang.Double.isNaN(param);

            this.localMaterialTaxRate = param;
        }

        public boolean isNeedApprovalSpecified() {
            return localNeedApprovalTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getNeedApproval() {
            return localNeedApproval;
        }

        /**
         * Auto generated setter method
         * @param param NeedApproval
         */
        public void setNeedApproval(boolean param) {
            // setting primitive attribute tracker to true
            localNeedApprovalTracker = true;

            this.localNeedApproval = param;
        }

        public boolean isProjectCodeSpecified() {
            return localProjectCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectCode() {
            return localProjectCode;
        }

        /**
         * Auto generated setter method
         * @param param ProjectCode
         */
        public void setProjectCode(java.lang.String param) {
            localProjectCodeTracker = param != null;

            this.localProjectCode = param;
        }

        public boolean isProjectIdSpecified() {
            return localProjectIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectId() {
            return localProjectId;
        }

        /**
         * Auto generated setter method
         * @param param ProjectId
         */
        public void setProjectId(java.lang.String param) {
            localProjectIdTracker = param != null;

            this.localProjectId = param;
        }

        public boolean isQuoteMaterialListSpecified() {
            return localQuoteMaterialListTracker;
        }

        /**
         * Auto generated getter method
         * @return QuoteMaterialSaveParam[]
         */
        public QuoteMaterialSaveParam[] getQuoteMaterialList() {
            return localQuoteMaterialList;
        }

        /**
         * validate the array for QuoteMaterialList
         */
        protected void validateQuoteMaterialList(QuoteMaterialSaveParam[] param) {
        }

        /**
         * Auto generated setter method
         * @param param QuoteMaterialList
         */
        public void setQuoteMaterialList(QuoteMaterialSaveParam[] param) {
            validateQuoteMaterialList(param);

            localQuoteMaterialListTracker = true;

            this.localQuoteMaterialList = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param QuoteMaterialSaveParam
         */
        public void addQuoteMaterialList(QuoteMaterialSaveParam param) {
            if (localQuoteMaterialList == null) {
                localQuoteMaterialList = new QuoteMaterialSaveParam[] {  };
            }

            //update the setting tracker
            localQuoteMaterialListTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localQuoteMaterialList);
            list.add(param);
            this.localQuoteMaterialList = (QuoteMaterialSaveParam[]) list.toArray(new QuoteMaterialSaveParam[list.size()]);
        }

        public boolean isQuoteProductListSpecified() {
            return localQuoteProductListTracker;
        }

        /**
         * Auto generated getter method
         * @return QuoteProductSaveParam[]
         */
        public QuoteProductSaveParam[] getQuoteProductList() {
            return localQuoteProductList;
        }

        /**
         * validate the array for QuoteProductList
         */
        protected void validateQuoteProductList(QuoteProductSaveParam[] param) {
        }

        /**
         * Auto generated setter method
         * @param param QuoteProductList
         */
        public void setQuoteProductList(QuoteProductSaveParam[] param) {
            validateQuoteProductList(param);

            localQuoteProductListTracker = true;

            this.localQuoteProductList = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param QuoteProductSaveParam
         */
        public void addQuoteProductList(QuoteProductSaveParam param) {
            if (localQuoteProductList == null) {
                localQuoteProductList = new QuoteProductSaveParam[] {  };
            }

            //update the setting tracker
            localQuoteProductListTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localQuoteProductList);
            list.add(param);
            this.localQuoteProductList = (QuoteProductSaveParam[]) list.toArray(new QuoteProductSaveParam[list.size()]);
        }

        public boolean isQuoteServeListSpecified() {
            return localQuoteServeListTracker;
        }

        /**
         * Auto generated getter method
         * @return QuoteServeSaveParam[]
         */
        public QuoteServeSaveParam[] getQuoteServeList() {
            return localQuoteServeList;
        }

        /**
         * validate the array for QuoteServeList
         */
        protected void validateQuoteServeList(QuoteServeSaveParam[] param) {
        }

        /**
         * Auto generated setter method
         * @param param QuoteServeList
         */
        public void setQuoteServeList(QuoteServeSaveParam[] param) {
            validateQuoteServeList(param);

            localQuoteServeListTracker = true;

            this.localQuoteServeList = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param QuoteServeSaveParam
         */
        public void addQuoteServeList(QuoteServeSaveParam param) {
            if (localQuoteServeList == null) {
                localQuoteServeList = new QuoteServeSaveParam[] {  };
            }

            //update the setting tracker
            localQuoteServeListTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localQuoteServeList);
            list.add(param);
            this.localQuoteServeList = (QuoteServeSaveParam[]) list.toArray(new QuoteServeSaveParam[list.size()]);
        }

        public boolean isQuoteStageSpecified() {
            return localQuoteStageTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQuoteStage() {
            return localQuoteStage;
        }

        /**
         * Auto generated setter method
         * @param param QuoteStage
         */
        public void setQuoteStage(java.lang.String param) {
            localQuoteStageTracker = param != null;

            this.localQuoteStage = param;
        }

        public boolean isQuoteTypeSpecified() {
            return localQuoteTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQuoteType() {
            return localQuoteType;
        }

        /**
         * Auto generated setter method
         * @param param QuoteType
         */
        public void setQuoteType(java.lang.String param) {
            localQuoteTypeTracker = param != null;

            this.localQuoteType = param;
        }

        public boolean isServicePriceTypeSpecified() {
            return localServicePriceTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getServicePriceType() {
            return localServicePriceType;
        }

        /**
         * Auto generated setter method
         * @param param ServicePriceType
         */
        public void setServicePriceType(java.lang.String param) {
            localServicePriceTypeTracker = param != null;

            this.localServicePriceType = param;
        }

        public boolean isVersionIndexSpecified() {
            return localVersionIndexTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getVersionIndex() {
            return localVersionIndex;
        }

        /**
         * Auto generated setter method
         * @param param VersionIndex
         */
        public void setVersionIndex(int param) {
            // setting primitive attribute tracker to true
            localVersionIndexTracker = param != java.lang.Integer.MIN_VALUE;

            this.localVersionIndex = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":quoteSaveParam", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "quoteSaveParam", xmlWriter);
            }

            if (localBeContractedTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beContracted", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beContracted cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeContracted));
                }

                xmlWriter.writeEndElement();
            }

            if (localBeMaterialPriceSingleTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beMaterialPriceSingle",
                    xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beMaterialPriceSingle cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeMaterialPriceSingle));
                }

                xmlWriter.writeEndElement();
            }

            if (localContractIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "contractId", xmlWriter);

                if (localContractId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "contractId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localContractId);
                }

                xmlWriter.writeEndElement();
            }

            if (localDomainModelTracker) {
                namespace = "";
                writeStartElement(null, namespace, "domainModel", xmlWriter);

                if (localDomainModel == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "domainModel cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDomainModel);
                }

                xmlWriter.writeEndElement();
            }

            if (localDomainTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "domainType", xmlWriter);

                if (localDomainType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "domainType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDomainType);
                }

                xmlWriter.writeEndElement();
            }

            if (localFunnelStageTracker) {
                namespace = "";
                writeStartElement(null, namespace, "funnelStage", xmlWriter);

                if (localFunnelStage == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "funnelStage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFunnelStage);
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            if (localMaterialTaxRateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "materialTaxRate", xmlWriter);

                if (java.lang.Double.isNaN(localMaterialTaxRate)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "materialTaxRate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMaterialTaxRate));
                }

                xmlWriter.writeEndElement();
            }

            if (localNeedApprovalTracker) {
                namespace = "";
                writeStartElement(null, namespace, "needApproval", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "needApproval cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNeedApproval));
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectCode", xmlWriter);

                if (localProjectCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectId", xmlWriter);

                if (localProjectId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectId);
                }

                xmlWriter.writeEndElement();
            }

            if (localQuoteMaterialListTracker) {
                if (localQuoteMaterialList != null) {
                    for (int i = 0; i < localQuoteMaterialList.length; i++) {
                        if (localQuoteMaterialList[i] != null) {
                            localQuoteMaterialList[i].serialize(new javax.xml.namespace.QName(
                                    "", "quoteMaterialList"), xmlWriter);
                        } else {
                            writeStartElement(null, "", "quoteMaterialList",
                                xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    writeStartElement(null, "", "quoteMaterialList", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }

            if (localQuoteProductListTracker) {
                if (localQuoteProductList != null) {
                    for (int i = 0; i < localQuoteProductList.length; i++) {
                        if (localQuoteProductList[i] != null) {
                            localQuoteProductList[i].serialize(new javax.xml.namespace.QName(
                                    "", "quoteProductList"), xmlWriter);
                        } else {
                            writeStartElement(null, "", "quoteProductList",
                                xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    writeStartElement(null, "", "quoteProductList", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }

            if (localQuoteServeListTracker) {
                if (localQuoteServeList != null) {
                    for (int i = 0; i < localQuoteServeList.length; i++) {
                        if (localQuoteServeList[i] != null) {
                            localQuoteServeList[i].serialize(new javax.xml.namespace.QName(
                                    "", "quoteServeList"), xmlWriter);
                        } else {
                            writeStartElement(null, "", "quoteServeList",
                                xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    writeStartElement(null, "", "quoteServeList", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }

            if (localQuoteStageTracker) {
                namespace = "";
                writeStartElement(null, namespace, "quoteStage", xmlWriter);

                if (localQuoteStage == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "quoteStage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localQuoteStage);
                }

                xmlWriter.writeEndElement();
            }

            if (localQuoteTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "quoteType", xmlWriter);

                if (localQuoteType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "quoteType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localQuoteType);
                }

                xmlWriter.writeEndElement();
            }

            if (localServicePriceTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "servicePriceType", xmlWriter);

                if (localServicePriceType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "servicePriceType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localServicePriceType);
                }

                xmlWriter.writeEndElement();
            }

            if (localVersionIndexTracker) {
                namespace = "";
                writeStartElement(null, namespace, "versionIndex", xmlWriter);

                if (localVersionIndex == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "versionIndex cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localVersionIndex));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static QuoteSaveParam parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                QuoteSaveParam object = new QuoteSaveParam();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"quoteSaveParam".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (QuoteSaveParam) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list12 = new java.util.ArrayList();

                    java.util.ArrayList list13 = new java.util.ArrayList();

                    java.util.ArrayList list14 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beContracted").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beContracted").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beContracted" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeContracted(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "beMaterialPriceSingle").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "beMaterialPriceSingle").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beMaterialPriceSingle" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeMaterialPriceSingle(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "contractId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "contractId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "contractId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContractId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "domainModel").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "domainModel").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "domainModel" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDomainModel(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "domainType").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "domainType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "domainType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDomainType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "funnelStage").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "funnelStage").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "funnelStage" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFunnelStage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "materialTaxRate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "materialTaxRate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "materialTaxRate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaterialTaxRate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setMaterialTaxRate(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "needApproval").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "needApproval").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "needApproval" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNeedApproval(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "quoteMaterialList").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "quoteMaterialList").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            list12.add(null);
                            reader.next();
                        } else {
                            list12.add(QuoteMaterialSaveParam.Factory.parse(
                                    reader));
                        }

                        //loop until we find a start element that is not part of this array
                        boolean loopDone12 = false;

                        while (!loopDone12) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone12 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "quoteMaterialList").equals(
                                            reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                            "nil");

                                    if ("true".equals(nillableValue) ||
                                            "1".equals(nillableValue)) {
                                        list12.add(null);
                                        reader.next();
                                    } else {
                                        list12.add(QuoteMaterialSaveParam.Factory.parse(
                                                reader));
                                    }
                                } else {
                                    loopDone12 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setQuoteMaterialList((QuoteMaterialSaveParam[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                QuoteMaterialSaveParam.class, list12));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "quoteProductList").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "quoteProductList").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            list13.add(null);
                            reader.next();
                        } else {
                            list13.add(QuoteProductSaveParam.Factory.parse(
                                    reader));
                        }

                        //loop until we find a start element that is not part of this array
                        boolean loopDone13 = false;

                        while (!loopDone13) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone13 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "quoteProductList").equals(
                                            reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                            "nil");

                                    if ("true".equals(nillableValue) ||
                                            "1".equals(nillableValue)) {
                                        list13.add(null);
                                        reader.next();
                                    } else {
                                        list13.add(QuoteProductSaveParam.Factory.parse(
                                                reader));
                                    }
                                } else {
                                    loopDone13 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setQuoteProductList((QuoteProductSaveParam[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                QuoteProductSaveParam.class, list13));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "quoteServeList").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "quoteServeList").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            list14.add(null);
                            reader.next();
                        } else {
                            list14.add(QuoteServeSaveParam.Factory.parse(reader));
                        }

                        //loop until we find a start element that is not part of this array
                        boolean loopDone14 = false;

                        while (!loopDone14) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone14 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "quoteServeList").equals(
                                            reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                            "nil");

                                    if ("true".equals(nillableValue) ||
                                            "1".equals(nillableValue)) {
                                        list14.add(null);
                                        reader.next();
                                    } else {
                                        list14.add(QuoteServeSaveParam.Factory.parse(
                                                reader));
                                    }
                                } else {
                                    loopDone14 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setQuoteServeList((QuoteServeSaveParam[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                QuoteServeSaveParam.class, list14));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "quoteStage").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "quoteStage").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "quoteStage" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setQuoteStage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "quoteType").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "quoteType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "quoteType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setQuoteType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "servicePriceType").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "servicePriceType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "servicePriceType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setServicePriceType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "versionIndex").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "versionIndex").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "versionIndex" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setVersionIndex(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setVersionIndex(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class QuoteMaterialSaveParam extends ToString implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = quoteMaterialSaveParam
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for BeLowerPrice
         */
        protected boolean localBeLowerPrice;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeLowerPriceTracker = false;

        /**
         * field for CostPrice
         */
        protected java.math.BigDecimal localCostPrice;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCostPriceTracker = false;

        /**
         * field for DemandQuantity
         */
        protected int localDemandQuantity;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDemandQuantityTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for MaterialBrandCode
         */
        protected java.lang.String localMaterialBrandCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaterialBrandCodeTracker = false;

        /**
         * field for MaterialCode
         */
        protected java.lang.String localMaterialCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaterialCodeTracker = false;

        /**
         * field for MaterialGroupCode
         */
        protected java.lang.String localMaterialGroupCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaterialGroupCodeTracker = false;

        /**
         * field for MaterialName
         */
        protected java.lang.String localMaterialName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaterialNameTracker = false;

        /**
         * field for MaterialSpecCode
         */
        protected java.lang.String localMaterialSpecCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaterialSpecCodeTracker = false;

        /**
         * field for ProductCode
         */
        protected java.lang.String localProductCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductCodeTracker = false;

        /**
         * field for ProductName
         */
        protected java.lang.String localProductName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductNameTracker = false;

        /**
         * field for ProjectCode
         */
        protected java.lang.String localProjectCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectCodeTracker = false;

        /**
         * field for ProjectId
         */
        protected java.lang.String localProjectId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectIdTracker = false;

        /**
         * field for QuoteId
         */
        protected java.lang.String localQuoteId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localQuoteIdTracker = false;

        /**
         * field for TotalPrice
         */
        protected java.math.BigDecimal localTotalPrice;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTotalPriceTracker = false;

        /**
         * field for Unit
         */
        protected java.lang.String localUnit;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitTracker = false;

        /**
         * field for UnitPrice
         */
        protected java.math.BigDecimal localUnitPrice;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnitPriceTracker = false;

        public boolean isBeLowerPriceSpecified() {
            return localBeLowerPriceTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeLowerPrice() {
            return localBeLowerPrice;
        }

        /**
         * Auto generated setter method
         * @param param BeLowerPrice
         */
        public void setBeLowerPrice(boolean param) {
            // setting primitive attribute tracker to true
            localBeLowerPriceTracker = true;

            this.localBeLowerPrice = param;
        }

        public boolean isCostPriceSpecified() {
            return localCostPriceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getCostPrice() {
            return localCostPrice;
        }

        /**
         * Auto generated setter method
         * @param param CostPrice
         */
        public void setCostPrice(java.math.BigDecimal param) {
            localCostPriceTracker = param != null;

            this.localCostPrice = param;
        }

        public boolean isDemandQuantitySpecified() {
            return localDemandQuantityTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getDemandQuantity() {
            return localDemandQuantity;
        }

        /**
         * Auto generated setter method
         * @param param DemandQuantity
         */
        public void setDemandQuantity(int param) {
            // setting primitive attribute tracker to true
            localDemandQuantityTracker = param != java.lang.Integer.MIN_VALUE;

            this.localDemandQuantity = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        public boolean isMaterialBrandCodeSpecified() {
            return localMaterialBrandCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMaterialBrandCode() {
            return localMaterialBrandCode;
        }

        /**
         * Auto generated setter method
         * @param param MaterialBrandCode
         */
        public void setMaterialBrandCode(java.lang.String param) {
            localMaterialBrandCodeTracker = param != null;

            this.localMaterialBrandCode = param;
        }

        public boolean isMaterialCodeSpecified() {
            return localMaterialCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMaterialCode() {
            return localMaterialCode;
        }

        /**
         * Auto generated setter method
         * @param param MaterialCode
         */
        public void setMaterialCode(java.lang.String param) {
            localMaterialCodeTracker = param != null;

            this.localMaterialCode = param;
        }

        public boolean isMaterialGroupCodeSpecified() {
            return localMaterialGroupCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMaterialGroupCode() {
            return localMaterialGroupCode;
        }

        /**
         * Auto generated setter method
         * @param param MaterialGroupCode
         */
        public void setMaterialGroupCode(java.lang.String param) {
            localMaterialGroupCodeTracker = param != null;

            this.localMaterialGroupCode = param;
        }

        public boolean isMaterialNameSpecified() {
            return localMaterialNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMaterialName() {
            return localMaterialName;
        }

        /**
         * Auto generated setter method
         * @param param MaterialName
         */
        public void setMaterialName(java.lang.String param) {
            localMaterialNameTracker = param != null;

            this.localMaterialName = param;
        }

        public boolean isMaterialSpecCodeSpecified() {
            return localMaterialSpecCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMaterialSpecCode() {
            return localMaterialSpecCode;
        }

        /**
         * Auto generated setter method
         * @param param MaterialSpecCode
         */
        public void setMaterialSpecCode(java.lang.String param) {
            localMaterialSpecCodeTracker = param != null;

            this.localMaterialSpecCode = param;
        }

        public boolean isProductCodeSpecified() {
            return localProductCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProductCode() {
            return localProductCode;
        }

        /**
         * Auto generated setter method
         * @param param ProductCode
         */
        public void setProductCode(java.lang.String param) {
            localProductCodeTracker = param != null;

            this.localProductCode = param;
        }

        public boolean isProductNameSpecified() {
            return localProductNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProductName() {
            return localProductName;
        }

        /**
         * Auto generated setter method
         * @param param ProductName
         */
        public void setProductName(java.lang.String param) {
            localProductNameTracker = param != null;

            this.localProductName = param;
        }

        public boolean isProjectCodeSpecified() {
            return localProjectCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectCode() {
            return localProjectCode;
        }

        /**
         * Auto generated setter method
         * @param param ProjectCode
         */
        public void setProjectCode(java.lang.String param) {
            localProjectCodeTracker = param != null;

            this.localProjectCode = param;
        }

        public boolean isProjectIdSpecified() {
            return localProjectIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectId() {
            return localProjectId;
        }

        /**
         * Auto generated setter method
         * @param param ProjectId
         */
        public void setProjectId(java.lang.String param) {
            localProjectIdTracker = param != null;

            this.localProjectId = param;
        }

        public boolean isQuoteIdSpecified() {
            return localQuoteIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQuoteId() {
            return localQuoteId;
        }

        /**
         * Auto generated setter method
         * @param param QuoteId
         */
        public void setQuoteId(java.lang.String param) {
            localQuoteIdTracker = param != null;

            this.localQuoteId = param;
        }

        public boolean isTotalPriceSpecified() {
            return localTotalPriceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getTotalPrice() {
            return localTotalPrice;
        }

        /**
         * Auto generated setter method
         * @param param TotalPrice
         */
        public void setTotalPrice(java.math.BigDecimal param) {
            localTotalPriceTracker = param != null;

            this.localTotalPrice = param;
        }

        public boolean isUnitSpecified() {
            return localUnitTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUnit() {
            return localUnit;
        }

        /**
         * Auto generated setter method
         * @param param Unit
         */
        public void setUnit(java.lang.String param) {
            localUnitTracker = param != null;

            this.localUnit = param;
        }

        public boolean isUnitPriceSpecified() {
            return localUnitPriceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getUnitPrice() {
            return localUnitPrice;
        }

        /**
         * Auto generated setter method
         * @param param UnitPrice
         */
        public void setUnitPrice(java.math.BigDecimal param) {
            localUnitPriceTracker = param != null;

            this.localUnitPrice = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":quoteMaterialSaveParam", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "quoteMaterialSaveParam", xmlWriter);
            }

            if (localBeLowerPriceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beLowerPrice", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beLowerPrice cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeLowerPrice));
                }

                xmlWriter.writeEndElement();
            }

            if (localCostPriceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "costPrice", xmlWriter);

                if (localCostPrice == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "costPrice cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCostPrice));
                }

                xmlWriter.writeEndElement();
            }

            if (localDemandQuantityTracker) {
                namespace = "";
                writeStartElement(null, namespace, "demandQuantity", xmlWriter);

                if (localDemandQuantity == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "demandQuantity cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDemandQuantity));
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            if (localMaterialBrandCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "materialBrandCode",
                    xmlWriter);

                if (localMaterialBrandCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "materialBrandCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localMaterialBrandCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localMaterialCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "materialCode", xmlWriter);

                if (localMaterialCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "materialCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localMaterialCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localMaterialGroupCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "materialGroupCode",
                    xmlWriter);

                if (localMaterialGroupCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "materialGroupCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localMaterialGroupCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localMaterialNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "materialName", xmlWriter);

                if (localMaterialName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "materialName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localMaterialName);
                }

                xmlWriter.writeEndElement();
            }

            if (localMaterialSpecCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "materialSpecCode", xmlWriter);

                if (localMaterialSpecCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "materialSpecCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localMaterialSpecCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localProductCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "productCode", xmlWriter);

                if (localProductCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "productCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProductCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localProductNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "productName", xmlWriter);

                if (localProductName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "productName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProductName);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectCode", xmlWriter);

                if (localProjectCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectId", xmlWriter);

                if (localProjectId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectId);
                }

                xmlWriter.writeEndElement();
            }

            if (localQuoteIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "quoteId", xmlWriter);

                if (localQuoteId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "quoteId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localQuoteId);
                }

                xmlWriter.writeEndElement();
            }

            if (localTotalPriceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "totalPrice", xmlWriter);

                if (localTotalPrice == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "totalPrice cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTotalPrice));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitTracker) {
                namespace = "";
                writeStartElement(null, namespace, "unit", xmlWriter);

                if (localUnit == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "unit cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localUnit);
                }

                xmlWriter.writeEndElement();
            }

            if (localUnitPriceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "unitPrice", xmlWriter);

                if (localUnitPrice == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "unitPrice cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnitPrice));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static QuoteMaterialSaveParam parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                QuoteMaterialSaveParam object = new QuoteMaterialSaveParam();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"quoteMaterialSaveParam".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (QuoteMaterialSaveParam) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beLowerPrice").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beLowerPrice").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beLowerPrice" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeLowerPrice(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "costPrice").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "costPrice").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "costPrice" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCostPrice(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "demandQuantity").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "demandQuantity").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "demandQuantity" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDemandQuantity(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setDemandQuantity(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "materialBrandCode").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "materialBrandCode").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "materialBrandCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaterialBrandCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "materialCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "materialCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "materialCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaterialCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "materialGroupCode").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "materialGroupCode").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "materialGroupCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaterialGroupCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "materialName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "materialName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "materialName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaterialName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "materialSpecCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "materialSpecCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "materialSpecCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaterialSpecCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "productCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "productCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "productCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "productName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "productName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "productName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "quoteId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "quoteId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "quoteId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setQuoteId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "totalPrice").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "totalPrice").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "totalPrice" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTotalPrice(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "unit").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "unit").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "unit" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnit(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "unitPrice").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "unitPrice").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "unitPrice" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnitPrice(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class SaveProjectFromQYGResponse implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = saveProjectFromQYGResponse
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for _return
         */
        protected java.lang.String local_return;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean local_returnTracker = false;

        public boolean is_returnSpecified() {
            return local_returnTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String get_return() {
            return local_return;
        }

        /**
         * Auto generated setter method
         * @param param _return
         */
        public void set_return(java.lang.String param) {
            local_returnTracker = param != null;

            this.local_return = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://project.funnel.api.manage.hps.com/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":saveProjectFromQYGResponse",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "saveProjectFromQYGResponse", xmlWriter);
                }
            }

            if (local_returnTracker) {
                namespace = "";
                writeStartElement(null, namespace, "return", xmlWriter);

                if (local_return == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "return cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(local_return);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SaveProjectFromQYGResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                SaveProjectFromQYGResponse object = new SaveProjectFromQYGResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"saveProjectFromQYGResponse".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (SaveProjectFromQYGResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "return").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "return").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "return" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class SaveProjectFromQYGNewE implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://project.funnel.api.manage.hps.com/",
                "saveProjectFromQYGNew", "ns1");

        /**
         * field for SaveProjectFromQYGNew
         */
        protected SaveProjectFromQYGNew localSaveProjectFromQYGNew;

        /**
         * Auto generated getter method
         * @return SaveProjectFromQYGNew
         */
        public SaveProjectFromQYGNew getSaveProjectFromQYGNew() {
            return localSaveProjectFromQYGNew;
        }

        /**
         * Auto generated setter method
         * @param param SaveProjectFromQYGNew
         */
        public void setSaveProjectFromQYGNew(SaveProjectFromQYGNew param) {
            this.localSaveProjectFromQYGNew = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localSaveProjectFromQYGNew == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "saveProjectFromQYGNew cannot be null!");
            }

            localSaveProjectFromQYGNew.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SaveProjectFromQYGNewE parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                SaveProjectFromQYGNewE object = new SaveProjectFromQYGNewE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if ((reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://project.funnel.api.manage.hps.com/",
                                        "saveProjectFromQYGNew").equals(
                                        reader.getName())) ||
                                    new javax.xml.namespace.QName("",
                                        "saveProjectFromQYGNew").equals(
                                        reader.getName())) {
                                object.setSaveProjectFromQYGNew(SaveProjectFromQYGNew.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CompetiorAnalysisTechnologySaveParam extends ToString
        implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = competiorAnalysisTechnologySaveParam
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for Brand
         */
        protected java.lang.String localBrand;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBrandTracker = false;

        /**
         * field for CreatedById
         */
        protected java.lang.String localCreatedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedByIdTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for InstallationCostComparison
         */
        protected java.lang.String localInstallationCostComparison;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInstallationCostComparisonTracker = false;

        /**
         * field for LastModifiedById
         */
        protected java.lang.String localLastModifiedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastModifiedByIdTracker = false;

        /**
         * field for MaterialCostComparison
         */
        protected java.lang.String localMaterialCostComparison;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaterialCostComparisonTracker = false;

        /**
         * field for ModelType
         */
        protected java.lang.String localModelType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localModelTypeTracker = false;

        /**
         * field for Price
         */
        protected java.math.BigDecimal localPrice;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPriceTracker = false;

        /**
         * field for ProductCode
         */
        protected java.lang.String localProductCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductCodeTracker = false;

        /**
         * field for ProductName
         */
        protected java.lang.String localProductName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductNameTracker = false;

        /**
         * field for ProjectId
         */
        protected java.lang.String localProjectId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectIdTracker = false;

        public boolean isBrandSpecified() {
            return localBrandTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBrand() {
            return localBrand;
        }

        /**
         * Auto generated setter method
         * @param param Brand
         */
        public void setBrand(java.lang.String param) {
            localBrandTracker = param != null;

            this.localBrand = param;
        }

        public boolean isCreatedByIdSpecified() {
            return localCreatedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreatedById() {
            return localCreatedById;
        }

        /**
         * Auto generated setter method
         * @param param CreatedById
         */
        public void setCreatedById(java.lang.String param) {
            localCreatedByIdTracker = param != null;

            this.localCreatedById = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        public boolean isInstallationCostComparisonSpecified() {
            return localInstallationCostComparisonTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getInstallationCostComparison() {
            return localInstallationCostComparison;
        }

        /**
         * Auto generated setter method
         * @param param InstallationCostComparison
         */
        public void setInstallationCostComparison(java.lang.String param) {
            localInstallationCostComparisonTracker = param != null;

            this.localInstallationCostComparison = param;
        }

        public boolean isLastModifiedByIdSpecified() {
            return localLastModifiedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLastModifiedById() {
            return localLastModifiedById;
        }

        /**
         * Auto generated setter method
         * @param param LastModifiedById
         */
        public void setLastModifiedById(java.lang.String param) {
            localLastModifiedByIdTracker = param != null;

            this.localLastModifiedById = param;
        }

        public boolean isMaterialCostComparisonSpecified() {
            return localMaterialCostComparisonTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMaterialCostComparison() {
            return localMaterialCostComparison;
        }

        /**
         * Auto generated setter method
         * @param param MaterialCostComparison
         */
        public void setMaterialCostComparison(java.lang.String param) {
            localMaterialCostComparisonTracker = param != null;

            this.localMaterialCostComparison = param;
        }

        public boolean isModelTypeSpecified() {
            return localModelTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getModelType() {
            return localModelType;
        }

        /**
         * Auto generated setter method
         * @param param ModelType
         */
        public void setModelType(java.lang.String param) {
            localModelTypeTracker = param != null;

            this.localModelType = param;
        }

        public boolean isPriceSpecified() {
            return localPriceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getPrice() {
            return localPrice;
        }

        /**
         * Auto generated setter method
         * @param param Price
         */
        public void setPrice(java.math.BigDecimal param) {
            localPriceTracker = param != null;

            this.localPrice = param;
        }

        public boolean isProductCodeSpecified() {
            return localProductCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProductCode() {
            return localProductCode;
        }

        /**
         * Auto generated setter method
         * @param param ProductCode
         */
        public void setProductCode(java.lang.String param) {
            localProductCodeTracker = param != null;

            this.localProductCode = param;
        }

        public boolean isProductNameSpecified() {
            return localProductNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProductName() {
            return localProductName;
        }

        /**
         * Auto generated setter method
         * @param param ProductName
         */
        public void setProductName(java.lang.String param) {
            localProductNameTracker = param != null;

            this.localProductName = param;
        }

        public boolean isProjectIdSpecified() {
            return localProjectIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectId() {
            return localProjectId;
        }

        /**
         * Auto generated setter method
         * @param param ProjectId
         */
        public void setProjectId(java.lang.String param) {
            localProjectIdTracker = param != null;

            this.localProjectId = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":competiorAnalysisTechnologySaveParam",
                    xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "competiorAnalysisTechnologySaveParam", xmlWriter);
            }

            if (localBrandTracker) {
                namespace = "";
                writeStartElement(null, namespace, "brand", xmlWriter);

                if (localBrand == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "brand cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBrand);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdById", xmlWriter);

                if (localCreatedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreatedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            if (localInstallationCostComparisonTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "installationCostComparison", xmlWriter);

                if (localInstallationCostComparison == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "installationCostComparison cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localInstallationCostComparison);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedById", xmlWriter);

                if (localLastModifiedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastModifiedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localMaterialCostComparisonTracker) {
                namespace = "";
                writeStartElement(null, namespace, "materialCostComparison",
                    xmlWriter);

                if (localMaterialCostComparison == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "materialCostComparison cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localMaterialCostComparison);
                }

                xmlWriter.writeEndElement();
            }

            if (localModelTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "modelType", xmlWriter);

                if (localModelType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "modelType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localModelType);
                }

                xmlWriter.writeEndElement();
            }

            if (localPriceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "price", xmlWriter);

                if (localPrice == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "price cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPrice));
                }

                xmlWriter.writeEndElement();
            }

            if (localProductCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "productCode", xmlWriter);

                if (localProductCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "productCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProductCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localProductNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "productName", xmlWriter);

                if (localProductName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "productName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProductName);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectId", xmlWriter);

                if (localProjectId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectId);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CompetiorAnalysisTechnologySaveParam parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CompetiorAnalysisTechnologySaveParam object = new CompetiorAnalysisTechnologySaveParam();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"competiorAnalysisTechnologySaveParam".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (CompetiorAnalysisTechnologySaveParam) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "brand").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "brand").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "brand" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBrand(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "installationCostComparison").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "installationCostComparison").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "installationCostComparison" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInstallationCostComparison(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "materialCostComparison").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "materialCostComparison").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "materialCostComparison" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaterialCostComparison(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "modelType").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "modelType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "modelType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setModelType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "price").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "price").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "price" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPrice(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "productCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "productCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "productCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "productName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "productName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "productName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProductName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ContractSaveParam extends ToString implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = contractSaveParam
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for ApprovalStatus
         */
        protected java.lang.String localApprovalStatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localApprovalStatusTracker = false;

        /**
         * field for BeCash
         */
        protected boolean localBeCash;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeCashTracker = false;

        /**
         * field for BeChanging
         */
        protected boolean localBeChanging;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeChangingTracker = false;

        /**
         * field for ContractAttachement
         */
        protected java.lang.String localContractAttachement;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContractAttachementTracker = false;

        /**
         * field for ContractCode
         */
        protected java.lang.String localContractCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContractCodeTracker = false;

        /**
         * field for ContractEndTime
         */
        protected java.util.Calendar localContractEndTime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContractEndTimeTracker = false;

        /**
         * field for ContractName
         */
        protected java.lang.String localContractName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContractNameTracker = false;

        /**
         * field for ContractOtherFile
         */
        protected java.lang.String localContractOtherFile;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContractOtherFileTracker = false;

        /**
         * field for ContractStartTime
         */
        protected java.util.Calendar localContractStartTime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContractStartTimeTracker = false;

        /**
         * field for ContractTotalAmount
         */
        protected java.math.BigDecimal localContractTotalAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContractTotalAmountTracker = false;

        /**
         * field for ContractType
         */
        protected java.lang.String localContractType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContractTypeTracker = false;

        /**
         * field for CreatedById
         */
        protected java.lang.String localCreatedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedByIdTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for LastModifiedById
         */
        protected java.lang.String localLastModifiedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastModifiedByIdTracker = false;

        /**
         * field for ListP
         * This was an Array!
         */
        protected HashMap[] localListP;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localListPTracker = false;

        /**
         * field for ListR
         * This was an Array!
         */
        protected ContractReceivableSaveParam[] localListR;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localListRTracker = false;

        /**
         * field for ProjectId
         */
        protected java.lang.String localProjectId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectIdTracker = false;

        /**
         * field for SignFirstParty
         */
        protected java.lang.String localSignFirstParty;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSignFirstPartyTracker = false;

        /**
         * field for SignFirstPartyCode
         */
        protected java.lang.String localSignFirstPartyCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSignFirstPartyCodeTracker = false;

        /**
         * field for SignFirstPartyId
         */
        protected java.lang.String localSignFirstPartyId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSignFirstPartyIdTracker = false;

        /**
         * field for SignSecondParty
         */
        protected java.lang.String localSignSecondParty;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSignSecondPartyTracker = false;

        /**
         * field for SignSecondPartyCode
         */
        protected java.lang.String localSignSecondPartyCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSignSecondPartyCodeTracker = false;

        /**
         * field for SignSecondPartyId
         */
        protected java.lang.String localSignSecondPartyId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSignSecondPartyIdTracker = false;

        /**
         * field for SignTime
         */
        protected java.util.Calendar localSignTime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSignTimeTracker = false;

        /**
         * field for VersionIndex
         */
        protected int localVersionIndex;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localVersionIndexTracker = false;

        /**
         * field for VersionName
         */
        protected java.lang.String localVersionName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localVersionNameTracker = false;

        public boolean isApprovalStatusSpecified() {
            return localApprovalStatusTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getApprovalStatus() {
            return localApprovalStatus;
        }

        /**
         * Auto generated setter method
         * @param param ApprovalStatus
         */
        public void setApprovalStatus(java.lang.String param) {
            localApprovalStatusTracker = param != null;

            this.localApprovalStatus = param;
        }

        public boolean isBeCashSpecified() {
            return localBeCashTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeCash() {
            return localBeCash;
        }

        /**
         * Auto generated setter method
         * @param param BeCash
         */
        public void setBeCash(boolean param) {
            // setting primitive attribute tracker to true
            localBeCashTracker = true;

            this.localBeCash = param;
        }

        public boolean isBeChangingSpecified() {
            return localBeChangingTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeChanging() {
            return localBeChanging;
        }

        /**
         * Auto generated setter method
         * @param param BeChanging
         */
        public void setBeChanging(boolean param) {
            // setting primitive attribute tracker to true
            localBeChangingTracker = true;

            this.localBeChanging = param;
        }

        public boolean isContractAttachementSpecified() {
            return localContractAttachementTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContractAttachement() {
            return localContractAttachement;
        }

        /**
         * Auto generated setter method
         * @param param ContractAttachement
         */
        public void setContractAttachement(java.lang.String param) {
            localContractAttachementTracker = param != null;

            this.localContractAttachement = param;
        }

        public boolean isContractCodeSpecified() {
            return localContractCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContractCode() {
            return localContractCode;
        }

        /**
         * Auto generated setter method
         * @param param ContractCode
         */
        public void setContractCode(java.lang.String param) {
            localContractCodeTracker = param != null;

            this.localContractCode = param;
        }

        public boolean isContractEndTimeSpecified() {
            return localContractEndTimeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getContractEndTime() {
            return localContractEndTime;
        }

        /**
         * Auto generated setter method
         * @param param ContractEndTime
         */
        public void setContractEndTime(java.util.Calendar param) {
            localContractEndTimeTracker = param != null;

            this.localContractEndTime = param;
        }

        public boolean isContractNameSpecified() {
            return localContractNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContractName() {
            return localContractName;
        }

        /**
         * Auto generated setter method
         * @param param ContractName
         */
        public void setContractName(java.lang.String param) {
            localContractNameTracker = param != null;

            this.localContractName = param;
        }

        public boolean isContractOtherFileSpecified() {
            return localContractOtherFileTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContractOtherFile() {
            return localContractOtherFile;
        }

        /**
         * Auto generated setter method
         * @param param ContractOtherFile
         */
        public void setContractOtherFile(java.lang.String param) {
            localContractOtherFileTracker = param != null;

            this.localContractOtherFile = param;
        }

        public boolean isContractStartTimeSpecified() {
            return localContractStartTimeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getContractStartTime() {
            return localContractStartTime;
        }

        /**
         * Auto generated setter method
         * @param param ContractStartTime
         */
        public void setContractStartTime(java.util.Calendar param) {
            localContractStartTimeTracker = param != null;

            this.localContractStartTime = param;
        }

        public boolean isContractTotalAmountSpecified() {
            return localContractTotalAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getContractTotalAmount() {
            return localContractTotalAmount;
        }

        /**
         * Auto generated setter method
         * @param param ContractTotalAmount
         */
        public void setContractTotalAmount(java.math.BigDecimal param) {
            localContractTotalAmountTracker = param != null;

            this.localContractTotalAmount = param;
        }

        public boolean isContractTypeSpecified() {
            return localContractTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContractType() {
            return localContractType;
        }

        /**
         * Auto generated setter method
         * @param param ContractType
         */
        public void setContractType(java.lang.String param) {
            localContractTypeTracker = param != null;

            this.localContractType = param;
        }

        public boolean isCreatedByIdSpecified() {
            return localCreatedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreatedById() {
            return localCreatedById;
        }

        /**
         * Auto generated setter method
         * @param param CreatedById
         */
        public void setCreatedById(java.lang.String param) {
            localCreatedByIdTracker = param != null;

            this.localCreatedById = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        public boolean isLastModifiedByIdSpecified() {
            return localLastModifiedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLastModifiedById() {
            return localLastModifiedById;
        }

        /**
         * Auto generated setter method
         * @param param LastModifiedById
         */
        public void setLastModifiedById(java.lang.String param) {
            localLastModifiedByIdTracker = param != null;

            this.localLastModifiedById = param;
        }

        public boolean isListPSpecified() {
            return localListPTracker;
        }

        /**
         * Auto generated getter method
         * @return HashMap[]
         */
        public HashMap[] getListP() {
            return localListP;
        }

        /**
         * validate the array for ListP
         */
        protected void validateListP(HashMap[] param) {
        }

        /**
         * Auto generated setter method
         * @param param ListP
         */
        public void setListP(HashMap[] param) {
            validateListP(param);

            localListPTracker = true;

            this.localListP = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param HashMap
         */
        public void addListP(HashMap param) {
            if (localListP == null) {
                localListP = new HashMap[] {  };
            }

            //update the setting tracker
            localListPTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localListP);
            list.add(param);
            this.localListP = (HashMap[]) list.toArray(new HashMap[list.size()]);
        }

        public boolean isListRSpecified() {
            return localListRTracker;
        }

        /**
         * Auto generated getter method
         * @return ContractReceivableSaveParam[]
         */
        public ContractReceivableSaveParam[] getListR() {
            return localListR;
        }

        /**
         * validate the array for ListR
         */
        protected void validateListR(ContractReceivableSaveParam[] param) {
        }

        /**
         * Auto generated setter method
         * @param param ListR
         */
        public void setListR(ContractReceivableSaveParam[] param) {
            validateListR(param);

            localListRTracker = true;

            this.localListR = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param ContractReceivableSaveParam
         */
        public void addListR(ContractReceivableSaveParam param) {
            if (localListR == null) {
                localListR = new ContractReceivableSaveParam[] {  };
            }

            //update the setting tracker
            localListRTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localListR);
            list.add(param);
            this.localListR = (ContractReceivableSaveParam[]) list.toArray(new ContractReceivableSaveParam[list.size()]);
        }

        public boolean isProjectIdSpecified() {
            return localProjectIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectId() {
            return localProjectId;
        }

        /**
         * Auto generated setter method
         * @param param ProjectId
         */
        public void setProjectId(java.lang.String param) {
            localProjectIdTracker = param != null;

            this.localProjectId = param;
        }

        public boolean isSignFirstPartySpecified() {
            return localSignFirstPartyTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSignFirstParty() {
            return localSignFirstParty;
        }

        /**
         * Auto generated setter method
         * @param param SignFirstParty
         */
        public void setSignFirstParty(java.lang.String param) {
            localSignFirstPartyTracker = param != null;

            this.localSignFirstParty = param;
        }

        public boolean isSignFirstPartyCodeSpecified() {
            return localSignFirstPartyCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSignFirstPartyCode() {
            return localSignFirstPartyCode;
        }

        /**
         * Auto generated setter method
         * @param param SignFirstPartyCode
         */
        public void setSignFirstPartyCode(java.lang.String param) {
            localSignFirstPartyCodeTracker = param != null;

            this.localSignFirstPartyCode = param;
        }

        public boolean isSignFirstPartyIdSpecified() {
            return localSignFirstPartyIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSignFirstPartyId() {
            return localSignFirstPartyId;
        }

        /**
         * Auto generated setter method
         * @param param SignFirstPartyId
         */
        public void setSignFirstPartyId(java.lang.String param) {
            localSignFirstPartyIdTracker = param != null;

            this.localSignFirstPartyId = param;
        }

        public boolean isSignSecondPartySpecified() {
            return localSignSecondPartyTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSignSecondParty() {
            return localSignSecondParty;
        }

        /**
         * Auto generated setter method
         * @param param SignSecondParty
         */
        public void setSignSecondParty(java.lang.String param) {
            localSignSecondPartyTracker = param != null;

            this.localSignSecondParty = param;
        }

        public boolean isSignSecondPartyCodeSpecified() {
            return localSignSecondPartyCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSignSecondPartyCode() {
            return localSignSecondPartyCode;
        }

        /**
         * Auto generated setter method
         * @param param SignSecondPartyCode
         */
        public void setSignSecondPartyCode(java.lang.String param) {
            localSignSecondPartyCodeTracker = param != null;

            this.localSignSecondPartyCode = param;
        }

        public boolean isSignSecondPartyIdSpecified() {
            return localSignSecondPartyIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSignSecondPartyId() {
            return localSignSecondPartyId;
        }

        /**
         * Auto generated setter method
         * @param param SignSecondPartyId
         */
        public void setSignSecondPartyId(java.lang.String param) {
            localSignSecondPartyIdTracker = param != null;

            this.localSignSecondPartyId = param;
        }

        public boolean isSignTimeSpecified() {
            return localSignTimeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getSignTime() {
            return localSignTime;
        }

        /**
         * Auto generated setter method
         * @param param SignTime
         */
        public void setSignTime(java.util.Calendar param) {
            localSignTimeTracker = param != null;

            this.localSignTime = param;
        }

        public boolean isVersionIndexSpecified() {
            return localVersionIndexTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getVersionIndex() {
            return localVersionIndex;
        }

        /**
         * Auto generated setter method
         * @param param VersionIndex
         */
        public void setVersionIndex(int param) {
            // setting primitive attribute tracker to true
            localVersionIndexTracker = param != java.lang.Integer.MIN_VALUE;

            this.localVersionIndex = param;
        }

        public boolean isVersionNameSpecified() {
            return localVersionNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getVersionName() {
            return localVersionName;
        }

        /**
         * Auto generated setter method
         * @param param VersionName
         */
        public void setVersionName(java.lang.String param) {
            localVersionNameTracker = param != null;

            this.localVersionName = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":contractSaveParam", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "contractSaveParam", xmlWriter);
            }

            if (localApprovalStatusTracker) {
                namespace = "";
                writeStartElement(null, namespace, "approvalStatus", xmlWriter);

                if (localApprovalStatus == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "approvalStatus cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localApprovalStatus);
                }

                xmlWriter.writeEndElement();
            }

            if (localBeCashTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beCash", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beCash cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeCash));
                }

                xmlWriter.writeEndElement();
            }

            if (localBeChangingTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beChanging", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beChanging cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeChanging));
                }

                xmlWriter.writeEndElement();
            }

            if (localContractAttachementTracker) {
                namespace = "";
                writeStartElement(null, namespace, "contractAttachement",
                    xmlWriter);

                if (localContractAttachement == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "contractAttachement cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localContractAttachement);
                }

                xmlWriter.writeEndElement();
            }

            if (localContractCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "contractCode", xmlWriter);

                if (localContractCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "contractCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localContractCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localContractEndTimeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "contractEndTime", xmlWriter);

                if (localContractEndTime == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "contractEndTime cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localContractEndTime));
                }

                xmlWriter.writeEndElement();
            }

            if (localContractNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "contractName", xmlWriter);

                if (localContractName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "contractName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localContractName);
                }

                xmlWriter.writeEndElement();
            }

            if (localContractOtherFileTracker) {
                namespace = "";
                writeStartElement(null, namespace, "contractOtherFile",
                    xmlWriter);

                if (localContractOtherFile == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "contractOtherFile cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localContractOtherFile);
                }

                xmlWriter.writeEndElement();
            }

            if (localContractStartTimeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "contractStartTime",
                    xmlWriter);

                if (localContractStartTime == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "contractStartTime cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localContractStartTime));
                }

                xmlWriter.writeEndElement();
            }

            if (localContractTotalAmountTracker) {
                namespace = "";
                writeStartElement(null, namespace, "contractTotalAmount",
                    xmlWriter);

                if (localContractTotalAmount == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "contractTotalAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localContractTotalAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localContractTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "contractType", xmlWriter);

                if (localContractType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "contractType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localContractType);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdById", xmlWriter);

                if (localCreatedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreatedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedById", xmlWriter);

                if (localLastModifiedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastModifiedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localListPTracker) {
                if (localListP != null) {
                    for (int i = 0; i < localListP.length; i++) {
                        if (localListP[i] != null) {
                            localListP[i].serialize(new javax.xml.namespace.QName(
                                    "", "listP"), xmlWriter);
                        } else {
                            writeStartElement(null, "", "listP", xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    writeStartElement(null, "", "listP", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }

            if (localListRTracker) {
                if (localListR != null) {
                    for (int i = 0; i < localListR.length; i++) {
                        if (localListR[i] != null) {
                            localListR[i].serialize(new javax.xml.namespace.QName(
                                    "", "listR"), xmlWriter);
                        } else {
                            writeStartElement(null, "", "listR", xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    writeStartElement(null, "", "listR", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }

            if (localProjectIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectId", xmlWriter);

                if (localProjectId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectId);
                }

                xmlWriter.writeEndElement();
            }

            if (localSignFirstPartyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "signFirstParty", xmlWriter);

                if (localSignFirstParty == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "signFirstParty cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSignFirstParty);
                }

                xmlWriter.writeEndElement();
            }

            if (localSignFirstPartyCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "signFirstPartyCode",
                    xmlWriter);

                if (localSignFirstPartyCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "signFirstPartyCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSignFirstPartyCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localSignFirstPartyIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "signFirstPartyId", xmlWriter);

                if (localSignFirstPartyId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "signFirstPartyId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSignFirstPartyId);
                }

                xmlWriter.writeEndElement();
            }

            if (localSignSecondPartyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "signSecondParty", xmlWriter);

                if (localSignSecondParty == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "signSecondParty cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSignSecondParty);
                }

                xmlWriter.writeEndElement();
            }

            if (localSignSecondPartyCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "signSecondPartyCode",
                    xmlWriter);

                if (localSignSecondPartyCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "signSecondPartyCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSignSecondPartyCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localSignSecondPartyIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "signSecondPartyId",
                    xmlWriter);

                if (localSignSecondPartyId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "signSecondPartyId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSignSecondPartyId);
                }

                xmlWriter.writeEndElement();
            }

            if (localSignTimeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "signTime", xmlWriter);

                if (localSignTime == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "signTime cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSignTime));
                }

                xmlWriter.writeEndElement();
            }

            if (localVersionIndexTracker) {
                namespace = "";
                writeStartElement(null, namespace, "versionIndex", xmlWriter);

                if (localVersionIndex == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "versionIndex cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localVersionIndex));
                }

                xmlWriter.writeEndElement();
            }

            if (localVersionNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "versionName", xmlWriter);

                if (localVersionName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "versionName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localVersionName);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ContractSaveParam parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ContractSaveParam object = new ContractSaveParam();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"contractSaveParam".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ContractSaveParam) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list15 = new java.util.ArrayList();

                    java.util.ArrayList list16 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "approvalStatus").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "approvalStatus").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "approvalStatus" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setApprovalStatus(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beCash").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beCash").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beCash" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeCash(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beChanging").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beChanging").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beChanging" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeChanging(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "contractAttachement").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "contractAttachement").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "contractAttachement" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContractAttachement(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "contractCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "contractCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "contractCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContractCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "contractEndTime").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "contractEndTime").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "contractEndTime" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContractEndTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "contractName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "contractName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "contractName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContractName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "contractOtherFile").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "contractOtherFile").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "contractOtherFile" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContractOtherFile(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "contractStartTime").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "contractStartTime").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "contractStartTime" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContractStartTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "contractTotalAmount").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "contractTotalAmount").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "contractTotalAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContractTotalAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "contractType").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "contractType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "contractType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContractType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "listP").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "listP").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            list15.add(null);
                            reader.next();
                        } else {
                            list15.add(HashMap.Factory.parse(reader));
                        }

                        //loop until we find a start element that is not part of this array
                        boolean loopDone15 = false;

                        while (!loopDone15) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone15 = true;
                            } else {
                                if (new javax.xml.namespace.QName("", "listP").equals(
                                            reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                            "nil");

                                    if ("true".equals(nillableValue) ||
                                            "1".equals(nillableValue)) {
                                        list15.add(null);
                                        reader.next();
                                    } else {
                                        list15.add(HashMap.Factory.parse(reader));
                                    }
                                } else {
                                    loopDone15 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setListP((HashMap[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                HashMap.class, list15));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "listR").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "listR").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            list16.add(null);
                            reader.next();
                        } else {
                            list16.add(ContractReceivableSaveParam.Factory.parse(
                                    reader));
                        }

                        //loop until we find a start element that is not part of this array
                        boolean loopDone16 = false;

                        while (!loopDone16) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone16 = true;
                            } else {
                                if (new javax.xml.namespace.QName("", "listR").equals(
                                            reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                            "nil");

                                    if ("true".equals(nillableValue) ||
                                            "1".equals(nillableValue)) {
                                        list16.add(null);
                                        reader.next();
                                    } else {
                                        list16.add(ContractReceivableSaveParam.Factory.parse(
                                                reader));
                                    }
                                } else {
                                    loopDone16 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setListR((ContractReceivableSaveParam[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                ContractReceivableSaveParam.class, list16));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "signFirstParty").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "signFirstParty").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "signFirstParty" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSignFirstParty(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "signFirstPartyCode").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "signFirstPartyCode").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "signFirstPartyCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSignFirstPartyCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "signFirstPartyId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "signFirstPartyId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "signFirstPartyId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSignFirstPartyId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "signSecondParty").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "signSecondParty").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "signSecondParty" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSignSecondParty(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "signSecondPartyCode").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "signSecondPartyCode").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "signSecondPartyCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSignSecondPartyCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "signSecondPartyId").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "signSecondPartyId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "signSecondPartyId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSignSecondPartyId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "signTime").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "signTime").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "signTime" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSignTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "versionIndex").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "versionIndex").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "versionIndex" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setVersionIndex(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setVersionIndex(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "versionName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "versionName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "versionName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setVersionName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class SaveProjectFromQYGResponseE implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://project.funnel.api.manage.hps.com/",
                "saveProjectFromQYGResponse", "ns1");

        /**
         * field for SaveProjectFromQYGResponse
         */
        protected SaveProjectFromQYGResponse localSaveProjectFromQYGResponse;

        /**
         * Auto generated getter method
         * @return SaveProjectFromQYGResponse
         */
        public SaveProjectFromQYGResponse getSaveProjectFromQYGResponse() {
            return localSaveProjectFromQYGResponse;
        }

        /**
         * Auto generated setter method
         * @param param SaveProjectFromQYGResponse
         */
        public void setSaveProjectFromQYGResponse(
            SaveProjectFromQYGResponse param) {
            this.localSaveProjectFromQYGResponse = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localSaveProjectFromQYGResponse == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "saveProjectFromQYGResponse cannot be null!");
            }

            localSaveProjectFromQYGResponse.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SaveProjectFromQYGResponseE parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                SaveProjectFromQYGResponseE object = new SaveProjectFromQYGResponseE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if ((reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://project.funnel.api.manage.hps.com/",
                                        "saveProjectFromQYGResponse").equals(
                                        reader.getName())) ||
                                    new javax.xml.namespace.QName("",
                                        "saveProjectFromQYGResponse").equals(
                                        reader.getName())) {
                                object.setSaveProjectFromQYGResponse(SaveProjectFromQYGResponse.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ProjectRTwoSaveParam extends ToString implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = projectRTwoSaveParam
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for BeSplitShipment
         */
        protected boolean localBeSplitShipment;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeSplitShipmentTracker = false;

        /**
         * field for BeTemplate
         */
        protected boolean localBeTemplate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeTemplateTracker = false;

        /**
         * field for ChancePoint
         */
        protected java.lang.String localChancePoint;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localChancePointTracker = false;

        /**
         * field for CreatedById
         */
        protected java.lang.String localCreatedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedByIdTracker = false;

        /**
         * field for EstimatedDeliveryAmount
         */
        protected java.math.BigDecimal localEstimatedDeliveryAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEstimatedDeliveryAmountTracker = false;

        /**
         * field for EstimatedInstallationAmount
         */
        protected java.math.BigDecimal localEstimatedInstallationAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEstimatedInstallationAmountTracker = false;

        /**
         * field for FirstContactName
         */
        protected java.lang.String localFirstContactName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFirstContactNameTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for IndustryCategory
         */
        protected java.lang.String localIndustryCategory;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIndustryCategoryTracker = false;

        /**
         * field for IndustryHomeCategory
         */
        protected java.lang.String localIndustryHomeCategory;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIndustryHomeCategoryTracker = false;

        /**
         * field for LastModifiedById
         */
        protected java.lang.String localLastModifiedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastModifiedByIdTracker = false;

        /**
         * field for LockUser
         */
        protected java.lang.String localLockUser;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLockUserTracker = false;

        /**
         * field for Phone
         */
        protected java.lang.String localPhone;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPhoneTracker = false;

        /**
         * field for Position
         */
        protected java.lang.String localPosition;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPositionTracker = false;

        /**
         * field for ProjectDevelopPlan
         */
        protected java.lang.String localProjectDevelopPlan;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectDevelopPlanTracker = false;

        /**
         * field for ProjectFinancialStatus
         */
        protected java.lang.String localProjectFinancialStatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectFinancialStatusTracker = false;

        /**
         * field for ProjectId
         */
        protected java.lang.String localProjectId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectIdTracker = false;

        /**
         * field for ProjectSpecificLocation
         */
        protected java.lang.String localProjectSpecificLocation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectSpecificLocationTracker = false;

        /**
         * field for ProjectValueProposition
         */
        protected java.lang.String localProjectValueProposition;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectValuePropositionTracker = false;

        /**
         * field for UserGroup
         */
        protected java.lang.String localUserGroup;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUserGroupTracker = false;

        public boolean isBeSplitShipmentSpecified() {
            return localBeSplitShipmentTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeSplitShipment() {
            return localBeSplitShipment;
        }

        /**
         * Auto generated setter method
         * @param param BeSplitShipment
         */
        public void setBeSplitShipment(boolean param) {
            // setting primitive attribute tracker to true
            localBeSplitShipmentTracker = true;

            this.localBeSplitShipment = param;
        }

        public boolean isBeTemplateSpecified() {
            return localBeTemplateTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getBeTemplate() {
            return localBeTemplate;
        }

        /**
         * Auto generated setter method
         * @param param BeTemplate
         */
        public void setBeTemplate(boolean param) {
            // setting primitive attribute tracker to true
            localBeTemplateTracker = true;

            this.localBeTemplate = param;
        }

        public boolean isChancePointSpecified() {
            return localChancePointTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getChancePoint() {
            return localChancePoint;
        }

        /**
         * Auto generated setter method
         * @param param ChancePoint
         */
        public void setChancePoint(java.lang.String param) {
            localChancePointTracker = param != null;

            this.localChancePoint = param;
        }

        public boolean isCreatedByIdSpecified() {
            return localCreatedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreatedById() {
            return localCreatedById;
        }

        /**
         * Auto generated setter method
         * @param param CreatedById
         */
        public void setCreatedById(java.lang.String param) {
            localCreatedByIdTracker = param != null;

            this.localCreatedById = param;
        }

        public boolean isEstimatedDeliveryAmountSpecified() {
            return localEstimatedDeliveryAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getEstimatedDeliveryAmount() {
            return localEstimatedDeliveryAmount;
        }

        /**
         * Auto generated setter method
         * @param param EstimatedDeliveryAmount
         */
        public void setEstimatedDeliveryAmount(java.math.BigDecimal param) {
            localEstimatedDeliveryAmountTracker = param != null;

            this.localEstimatedDeliveryAmount = param;
        }

        public boolean isEstimatedInstallationAmountSpecified() {
            return localEstimatedInstallationAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getEstimatedInstallationAmount() {
            return localEstimatedInstallationAmount;
        }

        /**
         * Auto generated setter method
         * @param param EstimatedInstallationAmount
         */
        public void setEstimatedInstallationAmount(java.math.BigDecimal param) {
            localEstimatedInstallationAmountTracker = param != null;

            this.localEstimatedInstallationAmount = param;
        }

        public boolean isFirstContactNameSpecified() {
            return localFirstContactNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFirstContactName() {
            return localFirstContactName;
        }

        /**
         * Auto generated setter method
         * @param param FirstContactName
         */
        public void setFirstContactName(java.lang.String param) {
            localFirstContactNameTracker = param != null;

            this.localFirstContactName = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        public boolean isIndustryCategorySpecified() {
            return localIndustryCategoryTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getIndustryCategory() {
            return localIndustryCategory;
        }

        /**
         * Auto generated setter method
         * @param param IndustryCategory
         */
        public void setIndustryCategory(java.lang.String param) {
            localIndustryCategoryTracker = param != null;

            this.localIndustryCategory = param;
        }

        public boolean isIndustryHomeCategorySpecified() {
            return localIndustryHomeCategoryTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getIndustryHomeCategory() {
            return localIndustryHomeCategory;
        }

        /**
         * Auto generated setter method
         * @param param IndustryHomeCategory
         */
        public void setIndustryHomeCategory(java.lang.String param) {
            localIndustryHomeCategoryTracker = param != null;

            this.localIndustryHomeCategory = param;
        }

        public boolean isLastModifiedByIdSpecified() {
            return localLastModifiedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLastModifiedById() {
            return localLastModifiedById;
        }

        /**
         * Auto generated setter method
         * @param param LastModifiedById
         */
        public void setLastModifiedById(java.lang.String param) {
            localLastModifiedByIdTracker = param != null;

            this.localLastModifiedById = param;
        }

        public boolean isLockUserSpecified() {
            return localLockUserTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLockUser() {
            return localLockUser;
        }

        /**
         * Auto generated setter method
         * @param param LockUser
         */
        public void setLockUser(java.lang.String param) {
            localLockUserTracker = param != null;

            this.localLockUser = param;
        }

        public boolean isPhoneSpecified() {
            return localPhoneTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPhone() {
            return localPhone;
        }

        /**
         * Auto generated setter method
         * @param param Phone
         */
        public void setPhone(java.lang.String param) {
            localPhoneTracker = param != null;

            this.localPhone = param;
        }

        public boolean isPositionSpecified() {
            return localPositionTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPosition() {
            return localPosition;
        }

        /**
         * Auto generated setter method
         * @param param Position
         */
        public void setPosition(java.lang.String param) {
            localPositionTracker = param != null;

            this.localPosition = param;
        }

        public boolean isProjectDevelopPlanSpecified() {
            return localProjectDevelopPlanTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectDevelopPlan() {
            return localProjectDevelopPlan;
        }

        /**
         * Auto generated setter method
         * @param param ProjectDevelopPlan
         */
        public void setProjectDevelopPlan(java.lang.String param) {
            localProjectDevelopPlanTracker = param != null;

            this.localProjectDevelopPlan = param;
        }

        public boolean isProjectFinancialStatusSpecified() {
            return localProjectFinancialStatusTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectFinancialStatus() {
            return localProjectFinancialStatus;
        }

        /**
         * Auto generated setter method
         * @param param ProjectFinancialStatus
         */
        public void setProjectFinancialStatus(java.lang.String param) {
            localProjectFinancialStatusTracker = param != null;

            this.localProjectFinancialStatus = param;
        }

        public boolean isProjectIdSpecified() {
            return localProjectIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectId() {
            return localProjectId;
        }

        /**
         * Auto generated setter method
         * @param param ProjectId
         */
        public void setProjectId(java.lang.String param) {
            localProjectIdTracker = param != null;

            this.localProjectId = param;
        }

        public boolean isProjectSpecificLocationSpecified() {
            return localProjectSpecificLocationTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectSpecificLocation() {
            return localProjectSpecificLocation;
        }

        /**
         * Auto generated setter method
         * @param param ProjectSpecificLocation
         */
        public void setProjectSpecificLocation(java.lang.String param) {
            localProjectSpecificLocationTracker = param != null;

            this.localProjectSpecificLocation = param;
        }

        public boolean isProjectValuePropositionSpecified() {
            return localProjectValuePropositionTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectValueProposition() {
            return localProjectValueProposition;
        }

        /**
         * Auto generated setter method
         * @param param ProjectValueProposition
         */
        public void setProjectValueProposition(java.lang.String param) {
            localProjectValuePropositionTracker = param != null;

            this.localProjectValueProposition = param;
        }

        public boolean isUserGroupSpecified() {
            return localUserGroupTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUserGroup() {
            return localUserGroup;
        }

        /**
         * Auto generated setter method
         * @param param UserGroup
         */
        public void setUserGroup(java.lang.String param) {
            localUserGroupTracker = param != null;

            this.localUserGroup = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":projectRTwoSaveParam", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "projectRTwoSaveParam", xmlWriter);
            }

            if (localBeSplitShipmentTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beSplitShipment", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beSplitShipment cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeSplitShipment));
                }

                xmlWriter.writeEndElement();
            }

            if (localBeTemplateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beTemplate", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beTemplate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeTemplate));
                }

                xmlWriter.writeEndElement();
            }

            if (localChancePointTracker) {
                namespace = "";
                writeStartElement(null, namespace, "chancePoint", xmlWriter);

                if (localChancePoint == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "chancePoint cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localChancePoint);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdById", xmlWriter);

                if (localCreatedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreatedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localEstimatedDeliveryAmountTracker) {
                namespace = "";
                writeStartElement(null, namespace, "estimatedDeliveryAmount",
                    xmlWriter);

                if (localEstimatedDeliveryAmount == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "estimatedDeliveryAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEstimatedDeliveryAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localEstimatedInstallationAmountTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "estimatedInstallationAmount", xmlWriter);

                if (localEstimatedInstallationAmount == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "estimatedInstallationAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEstimatedInstallationAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localFirstContactNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "firstContactName", xmlWriter);

                if (localFirstContactName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "firstContactName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFirstContactName);
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            if (localIndustryCategoryTracker) {
                namespace = "";
                writeStartElement(null, namespace, "industryCategory", xmlWriter);

                if (localIndustryCategory == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "industryCategory cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localIndustryCategory);
                }

                xmlWriter.writeEndElement();
            }

            if (localIndustryHomeCategoryTracker) {
                namespace = "";
                writeStartElement(null, namespace, "industryHomeCategory",
                    xmlWriter);

                if (localIndustryHomeCategory == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "industryHomeCategory cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localIndustryHomeCategory);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedById", xmlWriter);

                if (localLastModifiedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastModifiedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localLockUserTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lockUser", xmlWriter);

                if (localLockUser == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lockUser cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLockUser);
                }

                xmlWriter.writeEndElement();
            }

            if (localPhoneTracker) {
                namespace = "";
                writeStartElement(null, namespace, "phone", xmlWriter);

                if (localPhone == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "phone cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPhone);
                }

                xmlWriter.writeEndElement();
            }

            if (localPositionTracker) {
                namespace = "";
                writeStartElement(null, namespace, "position", xmlWriter);

                if (localPosition == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "position cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPosition);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectDevelopPlanTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectDevelopPlan",
                    xmlWriter);

                if (localProjectDevelopPlan == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectDevelopPlan cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectDevelopPlan);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectFinancialStatusTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectFinancialStatus",
                    xmlWriter);

                if (localProjectFinancialStatus == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectFinancialStatus cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectFinancialStatus);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectId", xmlWriter);

                if (localProjectId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectId);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectSpecificLocationTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectSpecificLocation",
                    xmlWriter);

                if (localProjectSpecificLocation == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectSpecificLocation cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectSpecificLocation);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectValuePropositionTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectValueProposition",
                    xmlWriter);

                if (localProjectValueProposition == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectValueProposition cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectValueProposition);
                }

                xmlWriter.writeEndElement();
            }

            if (localUserGroupTracker) {
                namespace = "";
                writeStartElement(null, namespace, "userGroup", xmlWriter);

                if (localUserGroup == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "userGroup cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localUserGroup);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ProjectRTwoSaveParam parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ProjectRTwoSaveParam object = new ProjectRTwoSaveParam();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"projectRTwoSaveParam".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ProjectRTwoSaveParam) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beSplitShipment").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beSplitShipment").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beSplitShipment" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeSplitShipment(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beTemplate").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "beTemplate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beTemplate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeTemplate(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "chancePoint").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "chancePoint").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "chancePoint" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setChancePoint(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "estimatedDeliveryAmount").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "estimatedDeliveryAmount").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "estimatedDeliveryAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEstimatedDeliveryAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "estimatedInstallationAmount").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "estimatedInstallationAmount").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " +
                                "estimatedInstallationAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEstimatedInstallationAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "firstContactName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "firstContactName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "firstContactName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFirstContactName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "industryCategory").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "industryCategory").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "industryCategory" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIndustryCategory(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "industryHomeCategory").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "industryHomeCategory").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "industryHomeCategory" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIndustryHomeCategory(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lockUser").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lockUser").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lockUser" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLockUser(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "phone").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "phone").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "phone" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPhone(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "position").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "position").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "position" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPosition(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectDevelopPlan").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectDevelopPlan").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectDevelopPlan" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectDevelopPlan(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectFinancialStatus").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectFinancialStatus").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectFinancialStatus" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectFinancialStatus(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectSpecificLocation").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectSpecificLocation").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectSpecificLocation" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectSpecificLocation(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "projectValueProposition").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "projectValueProposition").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectValueProposition" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectValueProposition(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "userGroup").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "userGroup").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "userGroup" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUserGroup(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class SaveProjectFromQYGNewResponseE implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://project.funnel.api.manage.hps.com/",
                "saveProjectFromQYGNewResponse", "ns1");

        /**
         * field for SaveProjectFromQYGNewResponse
         */
        protected SaveProjectFromQYGNewResponse localSaveProjectFromQYGNewResponse;

        /**
         * Auto generated getter method
         * @return SaveProjectFromQYGNewResponse
         */
        public SaveProjectFromQYGNewResponse getSaveProjectFromQYGNewResponse() {
            return localSaveProjectFromQYGNewResponse;
        }

        /**
         * Auto generated setter method
         * @param param SaveProjectFromQYGNewResponse
         */
        public void setSaveProjectFromQYGNewResponse(
            SaveProjectFromQYGNewResponse param) {
            this.localSaveProjectFromQYGNewResponse = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localSaveProjectFromQYGNewResponse == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "saveProjectFromQYGNewResponse cannot be null!");
            }

            localSaveProjectFromQYGNewResponse.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SaveProjectFromQYGNewResponseE parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                SaveProjectFromQYGNewResponseE object = new SaveProjectFromQYGNewResponseE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if ((reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://project.funnel.api.manage.hps.com/",
                                        "saveProjectFromQYGNewResponse").equals(
                                        reader.getName())) ||
                                    new javax.xml.namespace.QName("",
                                        "saveProjectFromQYGNewResponse").equals(
                                        reader.getName())) {
                                object.setSaveProjectFromQYGNewResponse(SaveProjectFromQYGNewResponse.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class QuoteServeSaveParam extends ToString implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = quoteServeSaveParam
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for CleanFee
         */
        protected java.math.BigDecimal localCleanFee;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCleanFeeTracker = false;

        /**
         * field for CloudStrageFee
         */
        protected java.math.BigDecimal localCloudStrageFee;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCloudStrageFeeTracker = false;

        /**
         * field for ElevatorFee
         */
        protected java.math.BigDecimal localElevatorFee;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localElevatorFeeTracker = false;

        /**
         * field for EmbedmentFee
         */
        protected java.math.BigDecimal localEmbedmentFee;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEmbedmentFeeTracker = false;

        /**
         * field for FinanceCost
         */
        protected double localFinanceCost;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFinanceCostTracker = false;

        /**
         * field for HouseholdFee
         */
        protected java.math.BigDecimal localHouseholdFee;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHouseholdFeeTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for LoadFee
         */
        protected java.math.BigDecimal localLoadFee;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLoadFeeTracker = false;

        /**
         * field for OpeningFee
         */
        protected java.math.BigDecimal localOpeningFee;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOpeningFeeTracker = false;

        /**
         * field for OtherFee
         */
        protected java.math.BigDecimal localOtherFee;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOtherFeeTracker = false;

        /**
         * field for ProjectCode
         */
        protected java.lang.String localProjectCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectCodeTracker = false;

        /**
         * field for ProjectId
         */
        protected java.lang.String localProjectId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectIdTracker = false;

        /**
         * field for QuoteId
         */
        protected java.lang.String localQuoteId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localQuoteIdTracker = false;

        /**
         * field for SpecialTransFee
         */
        protected java.math.BigDecimal localSpecialTransFee;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSpecialTransFeeTracker = false;

        /**
         * field for TotalPackageFee
         */
        protected double localTotalPackageFee;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTotalPackageFeeTracker = false;

        public boolean isCleanFeeSpecified() {
            return localCleanFeeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getCleanFee() {
            return localCleanFee;
        }

        /**
         * Auto generated setter method
         * @param param CleanFee
         */
        public void setCleanFee(java.math.BigDecimal param) {
            localCleanFeeTracker = param != null;

            this.localCleanFee = param;
        }

        public boolean isCloudStrageFeeSpecified() {
            return localCloudStrageFeeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getCloudStrageFee() {
            return localCloudStrageFee;
        }

        /**
         * Auto generated setter method
         * @param param CloudStrageFee
         */
        public void setCloudStrageFee(java.math.BigDecimal param) {
            localCloudStrageFeeTracker = param != null;

            this.localCloudStrageFee = param;
        }

        public boolean isElevatorFeeSpecified() {
            return localElevatorFeeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getElevatorFee() {
            return localElevatorFee;
        }

        /**
         * Auto generated setter method
         * @param param ElevatorFee
         */
        public void setElevatorFee(java.math.BigDecimal param) {
            localElevatorFeeTracker = param != null;

            this.localElevatorFee = param;
        }

        public boolean isEmbedmentFeeSpecified() {
            return localEmbedmentFeeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getEmbedmentFee() {
            return localEmbedmentFee;
        }

        /**
         * Auto generated setter method
         * @param param EmbedmentFee
         */
        public void setEmbedmentFee(java.math.BigDecimal param) {
            localEmbedmentFeeTracker = param != null;

            this.localEmbedmentFee = param;
        }

        public boolean isFinanceCostSpecified() {
            return localFinanceCostTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getFinanceCost() {
            return localFinanceCost;
        }

        /**
         * Auto generated setter method
         * @param param FinanceCost
         */
        public void setFinanceCost(double param) {
            // setting primitive attribute tracker to true
            localFinanceCostTracker = !java.lang.Double.isNaN(param);

            this.localFinanceCost = param;
        }

        public boolean isHouseholdFeeSpecified() {
            return localHouseholdFeeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getHouseholdFee() {
            return localHouseholdFee;
        }

        /**
         * Auto generated setter method
         * @param param HouseholdFee
         */
        public void setHouseholdFee(java.math.BigDecimal param) {
            localHouseholdFeeTracker = param != null;

            this.localHouseholdFee = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        public boolean isLoadFeeSpecified() {
            return localLoadFeeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getLoadFee() {
            return localLoadFee;
        }

        /**
         * Auto generated setter method
         * @param param LoadFee
         */
        public void setLoadFee(java.math.BigDecimal param) {
            localLoadFeeTracker = param != null;

            this.localLoadFee = param;
        }

        public boolean isOpeningFeeSpecified() {
            return localOpeningFeeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getOpeningFee() {
            return localOpeningFee;
        }

        /**
         * Auto generated setter method
         * @param param OpeningFee
         */
        public void setOpeningFee(java.math.BigDecimal param) {
            localOpeningFeeTracker = param != null;

            this.localOpeningFee = param;
        }

        public boolean isOtherFeeSpecified() {
            return localOtherFeeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getOtherFee() {
            return localOtherFee;
        }

        /**
         * Auto generated setter method
         * @param param OtherFee
         */
        public void setOtherFee(java.math.BigDecimal param) {
            localOtherFeeTracker = param != null;

            this.localOtherFee = param;
        }

        public boolean isProjectCodeSpecified() {
            return localProjectCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectCode() {
            return localProjectCode;
        }

        /**
         * Auto generated setter method
         * @param param ProjectCode
         */
        public void setProjectCode(java.lang.String param) {
            localProjectCodeTracker = param != null;

            this.localProjectCode = param;
        }

        public boolean isProjectIdSpecified() {
            return localProjectIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectId() {
            return localProjectId;
        }

        /**
         * Auto generated setter method
         * @param param ProjectId
         */
        public void setProjectId(java.lang.String param) {
            localProjectIdTracker = param != null;

            this.localProjectId = param;
        }

        public boolean isQuoteIdSpecified() {
            return localQuoteIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQuoteId() {
            return localQuoteId;
        }

        /**
         * Auto generated setter method
         * @param param QuoteId
         */
        public void setQuoteId(java.lang.String param) {
            localQuoteIdTracker = param != null;

            this.localQuoteId = param;
        }

        public boolean isSpecialTransFeeSpecified() {
            return localSpecialTransFeeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getSpecialTransFee() {
            return localSpecialTransFee;
        }

        /**
         * Auto generated setter method
         * @param param SpecialTransFee
         */
        public void setSpecialTransFee(java.math.BigDecimal param) {
            localSpecialTransFeeTracker = param != null;

            this.localSpecialTransFee = param;
        }

        public boolean isTotalPackageFeeSpecified() {
            return localTotalPackageFeeTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getTotalPackageFee() {
            return localTotalPackageFee;
        }

        /**
         * Auto generated setter method
         * @param param TotalPackageFee
         */
        public void setTotalPackageFee(double param) {
            // setting primitive attribute tracker to true
            localTotalPackageFeeTracker = !java.lang.Double.isNaN(param);

            this.localTotalPackageFee = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":quoteServeSaveParam", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "quoteServeSaveParam", xmlWriter);
            }

            if (localCleanFeeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "cleanFee", xmlWriter);

                if (localCleanFee == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "cleanFee cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCleanFee));
                }

                xmlWriter.writeEndElement();
            }

            if (localCloudStrageFeeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "cloudStrageFee", xmlWriter);

                if (localCloudStrageFee == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "cloudStrageFee cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCloudStrageFee));
                }

                xmlWriter.writeEndElement();
            }

            if (localElevatorFeeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "elevatorFee", xmlWriter);

                if (localElevatorFee == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "elevatorFee cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localElevatorFee));
                }

                xmlWriter.writeEndElement();
            }

            if (localEmbedmentFeeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "embedmentFee", xmlWriter);

                if (localEmbedmentFee == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "embedmentFee cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEmbedmentFee));
                }

                xmlWriter.writeEndElement();
            }

            if (localFinanceCostTracker) {
                namespace = "";
                writeStartElement(null, namespace, "financeCost", xmlWriter);

                if (java.lang.Double.isNaN(localFinanceCost)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "financeCost cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFinanceCost));
                }

                xmlWriter.writeEndElement();
            }

            if (localHouseholdFeeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "householdFee", xmlWriter);

                if (localHouseholdFee == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "householdFee cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localHouseholdFee));
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            if (localLoadFeeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "loadFee", xmlWriter);

                if (localLoadFee == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "loadFee cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLoadFee));
                }

                xmlWriter.writeEndElement();
            }

            if (localOpeningFeeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "openingFee", xmlWriter);

                if (localOpeningFee == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "openingFee cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localOpeningFee));
                }

                xmlWriter.writeEndElement();
            }

            if (localOtherFeeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "otherFee", xmlWriter);

                if (localOtherFee == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "otherFee cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localOtherFee));
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectCode", xmlWriter);

                if (localProjectCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectId", xmlWriter);

                if (localProjectId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectId);
                }

                xmlWriter.writeEndElement();
            }

            if (localQuoteIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "quoteId", xmlWriter);

                if (localQuoteId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "quoteId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localQuoteId);
                }

                xmlWriter.writeEndElement();
            }

            if (localSpecialTransFeeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "specialTransFee", xmlWriter);

                if (localSpecialTransFee == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "specialTransFee cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSpecialTransFee));
                }

                xmlWriter.writeEndElement();
            }

            if (localTotalPackageFeeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "totalPackageFee", xmlWriter);

                if (java.lang.Double.isNaN(localTotalPackageFee)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "totalPackageFee cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTotalPackageFee));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static QuoteServeSaveParam parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                QuoteServeSaveParam object = new QuoteServeSaveParam();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"quoteServeSaveParam".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (QuoteServeSaveParam) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "cleanFee").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "cleanFee").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "cleanFee" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCleanFee(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "cloudStrageFee").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "cloudStrageFee").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "cloudStrageFee" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCloudStrageFee(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "elevatorFee").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "elevatorFee").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "elevatorFee" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setElevatorFee(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "embedmentFee").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "embedmentFee").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "embedmentFee" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEmbedmentFee(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "financeCost").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "financeCost").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "financeCost" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFinanceCost(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setFinanceCost(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "householdFee").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "householdFee").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "householdFee" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHouseholdFee(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "loadFee").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "loadFee").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "loadFee" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLoadFee(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "openingFee").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "openingFee").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "openingFee" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOpeningFee(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "otherFee").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "otherFee").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "otherFee" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOtherFee(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "quoteId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "quoteId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "quoteId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setQuoteId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "specialTransFee").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "specialTransFee").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "specialTransFee" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSpecialTransFee(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "totalPackageFee").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "totalPackageFee").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "totalPackageFee" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTotalPackageFee(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setTotalPackageFee(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class QueryEnterpriseList implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = queryEnterpriseList
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for Arg0
         */
        protected EnterpriseOtherParam localArg0;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localArg0Tracker = false;

        public boolean isArg0Specified() {
            return localArg0Tracker;
        }

        /**
         * Auto generated getter method
         * @return EnterpriseOtherParam
         */
        public EnterpriseOtherParam getArg0() {
            return localArg0;
        }

        /**
         * Auto generated setter method
         * @param param Arg0
         */
        public void setArg0(EnterpriseOtherParam param) {
            localArg0Tracker = param != null;

            this.localArg0 = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://project.funnel.api.manage.hps.com/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":queryEnterpriseList", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "queryEnterpriseList", xmlWriter);
                }
            }

            if (localArg0Tracker) {
                if (localArg0 == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "arg0 cannot be null!!");
                }

                localArg0.serialize(new javax.xml.namespace.QName("", "arg0"),
                    xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static QueryEnterpriseList parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                QueryEnterpriseList object = new QueryEnterpriseList();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"queryEnterpriseList".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (QueryEnterpriseList) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "arg0").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "arg0").equals(
                                reader.getName())) {
                        object.setArg0(EnterpriseOtherParam.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class SaveProjectFromQYGNew implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = saveProjectFromQYGNew
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for Arg0
         * This was an Array!
         */
        protected ProjectSaveParam[] localArg0;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localArg0Tracker = false;

        public boolean isArg0Specified() {
            return localArg0Tracker;
        }

        /**
         * Auto generated getter method
         * @return ProjectSaveParam[]
         */
        public ProjectSaveParam[] getArg0() {
            return localArg0;
        }

        /**
         * validate the array for Arg0
         */
        protected void validateArg0(ProjectSaveParam[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Arg0
         */
        public void setArg0(ProjectSaveParam[] param) {
            validateArg0(param);

            localArg0Tracker = param != null;

            this.localArg0 = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param ProjectSaveParam
         */
        public void addArg0(ProjectSaveParam param) {
            if (localArg0 == null) {
                localArg0 = new ProjectSaveParam[] {  };
            }

            //update the setting tracker
            localArg0Tracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localArg0);
            list.add(param);
            this.localArg0 = (ProjectSaveParam[]) list.toArray(new ProjectSaveParam[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://project.funnel.api.manage.hps.com/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":saveProjectFromQYGNew", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "saveProjectFromQYGNew", xmlWriter);
                }
            }

            if (localArg0Tracker) {
                if (localArg0 != null) {
                    for (int i = 0; i < localArg0.length; i++) {
                        if (localArg0[i] != null) {
                            localArg0[i].serialize(new javax.xml.namespace.QName(
                                    "", "arg0"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "arg0 cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SaveProjectFromQYGNew parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                SaveProjectFromQYGNew object = new SaveProjectFromQYGNew();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"saveProjectFromQYGNew".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (SaveProjectFromQYGNew) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "arg0").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "arg0").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(ProjectSaveParam.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("", "arg0").equals(
                                            reader.getName())) {
                                    list1.add(ProjectSaveParam.Factory.parse(
                                            reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setArg0((ProjectSaveParam[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                ProjectSaveParam.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class LockUserList implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = lockUserList
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for Arg0
         */
        protected java.lang.String localArg0;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localArg0Tracker = false;

        public boolean isArg0Specified() {
            return localArg0Tracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getArg0() {
            return localArg0;
        }

        /**
         * Auto generated setter method
         * @param param Arg0
         */
        public void setArg0(java.lang.String param) {
            localArg0Tracker = param != null;

            this.localArg0 = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://project.funnel.api.manage.hps.com/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":lockUserList", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "lockUserList", xmlWriter);
                }
            }

            if (localArg0Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "arg0", xmlWriter);

                if (localArg0 == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "arg0 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localArg0);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static LockUserList parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                LockUserList object = new LockUserList();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"lockUserList".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (LockUserList) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "arg0").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "arg0").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "arg0" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setArg0(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class AbstractMap implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = abstractMap
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://project.funnel.api.manage.hps.com/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":abstractMap", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "abstractMap", xmlWriter);
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AbstractMap parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                AbstractMap object = null;

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"abstractMap".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (AbstractMap) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }

                            throw new org.apache.axis2.databinding.ADBException(
                                "The an abstract class can not be instantiated !!!");
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class QueryEnterpriseListE implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://project.funnel.api.manage.hps.com/",
                "queryEnterpriseList", "ns1");

        /**
         * field for QueryEnterpriseList
         */
        protected QueryEnterpriseList localQueryEnterpriseList;

        /**
         * Auto generated getter method
         * @return QueryEnterpriseList
         */
        public QueryEnterpriseList getQueryEnterpriseList() {
            return localQueryEnterpriseList;
        }

        /**
         * Auto generated setter method
         * @param param QueryEnterpriseList
         */
        public void setQueryEnterpriseList(QueryEnterpriseList param) {
            this.localQueryEnterpriseList = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localQueryEnterpriseList == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "queryEnterpriseList cannot be null!");
            }

            localQueryEnterpriseList.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static QueryEnterpriseListE parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                QueryEnterpriseListE object = new QueryEnterpriseListE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if ((reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://project.funnel.api.manage.hps.com/",
                                        "queryEnterpriseList").equals(
                                        reader.getName())) ||
                                    new javax.xml.namespace.QName("",
                                        "queryEnterpriseList").equals(
                                        reader.getName())) {
                                object.setQueryEnterpriseList(QueryEnterpriseList.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class LockUserListResponse implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = lockUserListResponse
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for _return
         */
        protected JsonResult local_return;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean local_returnTracker = false;

        public boolean is_returnSpecified() {
            return local_returnTracker;
        }

        /**
         * Auto generated getter method
         * @return JsonResult
         */
        public JsonResult get_return() {
            return local_return;
        }

        /**
         * Auto generated setter method
         * @param param _return
         */
        public void set_return(JsonResult param) {
            local_returnTracker = param != null;

            this.local_return = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://project.funnel.api.manage.hps.com/");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":lockUserListResponse", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "lockUserListResponse", xmlWriter);
                }
            }

            if (local_returnTracker) {
                if (local_return == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "return cannot be null!!");
                }

                local_return.serialize(new javax.xml.namespace.QName("",
                        "return"), xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static LockUserListResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                LockUserListResponse object = new LockUserListResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"lockUserListResponse".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (LockUserListResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "return").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "return").equals(
                                reader.getName())) {
                        object.set_return(JsonResult.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class EnterpriseOtherParam extends ToString implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = enterpriseOtherParam
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for Keyword
         */
        protected java.lang.String localKeyword;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKeywordTracker = false;

        public boolean isKeywordSpecified() {
            return localKeywordTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getKeyword() {
            return localKeyword;
        }

        /**
         * Auto generated setter method
         * @param param Keyword
         */
        public void setKeyword(java.lang.String param) {
            localKeywordTracker = param != null;

            this.localKeyword = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":enterpriseOtherParam", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "enterpriseOtherParam", xmlWriter);
            }

            if (localKeywordTracker) {
                namespace = "";
                writeStartElement(null, namespace, "keyword", xmlWriter);

                if (localKeyword == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "keyword cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localKeyword);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static EnterpriseOtherParam parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                EnterpriseOtherParam object = new EnterpriseOtherParam();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"enterpriseOtherParam".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (EnterpriseOtherParam) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "keyword").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "keyword").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "keyword" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setKeyword(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ProjectRThreeSaveParam extends ToString implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = projectRThreeSaveParam
           Namespace URI = http://project.funnel.api.manage.hps.com/
           Namespace Prefix = ns1
         */

        /**
         * field for AdverseContractSubjectCode
         */
        protected java.lang.String localAdverseContractSubjectCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAdverseContractSubjectCodeTracker = false;

        /**
         * field for AdverseContractSubjectId
         */
        protected java.lang.String localAdverseContractSubjectId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAdverseContractSubjectIdTracker = false;

        /**
         * field for AdverseContractSubjectName
         */
        protected java.lang.String localAdverseContractSubjectName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAdverseContractSubjectNameTracker = false;

        /**
         * field for AfterSalesManagerCode
         */
        protected java.lang.String localAfterSalesManagerCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAfterSalesManagerCodeTracker = false;

        /**
         * field for AfterSalesManagerId
         */
        protected java.lang.String localAfterSalesManagerId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAfterSalesManagerIdTracker = false;

        /**
         * field for AfterSalesManagerName
         */
        protected java.lang.String localAfterSalesManagerName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAfterSalesManagerNameTracker = false;

        /**
         * field for BidCompanyCode
         */
        protected java.lang.String localBidCompanyCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBidCompanyCodeTracker = false;

        /**
         * field for BidCompanyId
         */
        protected java.lang.String localBidCompanyId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBidCompanyIdTracker = false;

        /**
         * field for BidCompanyName
         */
        protected java.lang.String localBidCompanyName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBidCompanyNameTracker = false;

        /**
         * field for BigChannel
         */
        protected java.lang.String localBigChannel;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBigChannelTracker = false;

        /**
         * field for ContractorCode
         */
        protected java.lang.String localContractorCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContractorCodeTracker = false;

        /**
         * field for ContractorId
         */
        protected java.lang.String localContractorId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContractorIdTracker = false;

        /**
         * field for ContractorName
         */
        protected java.lang.String localContractorName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContractorNameTracker = false;

        /**
         * field for CreatedById
         */
        protected java.lang.String localCreatedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreatedByIdTracker = false;

        /**
         * field for CustomerDemandAnalysis
         */
        protected java.lang.String localCustomerDemandAnalysis;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCustomerDemandAnalysisTracker = false;

        /**
         * field for DesignManagerCode
         */
        protected java.lang.String localDesignManagerCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDesignManagerCodeTracker = false;

        /**
         * field for DesignManagerId
         */
        protected java.lang.String localDesignManagerId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDesignManagerIdTracker = false;

        /**
         * field for DesignManagerName
         */
        protected java.lang.String localDesignManagerName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDesignManagerNameTracker = false;

        /**
         * field for DesignType
         */
        protected java.lang.String localDesignType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDesignTypeTracker = false;

        /**
         * field for GeneralContractorCode
         */
        protected java.lang.String localGeneralContractorCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGeneralContractorCodeTracker = false;

        /**
         * field for GeneralContractorId
         */
        protected java.lang.String localGeneralContractorId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGeneralContractorIdTracker = false;

        /**
         * field for GeneralContractorName
         */
        protected java.lang.String localGeneralContractorName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGeneralContractorNameTracker = false;

        /**
         * field for HonourAgreementPattern
         */
        protected java.lang.String localHonourAgreementPattern;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHonourAgreementPatternTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for InformationSubmissionType
         */
        protected java.lang.String localInformationSubmissionType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInformationSubmissionTypeTracker = false;

        /**
         * field for InstallationType
         */
        protected java.lang.String localInstallationType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInstallationTypeTracker = false;

        /**
         * field for LastModifiedById
         */
        protected java.lang.String localLastModifiedById;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastModifiedByIdTracker = false;

        /**
         * field for OurContractSubjectCode
         */
        protected java.lang.String localOurContractSubjectCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOurContractSubjectCodeTracker = false;

        /**
         * field for OurContractSubjectId
         */
        protected java.lang.String localOurContractSubjectId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOurContractSubjectIdTracker = false;

        /**
         * field for OurContractSubjectName
         */
        protected java.lang.String localOurContractSubjectName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOurContractSubjectNameTracker = false;

        /**
         * field for ProjectId
         */
        protected java.lang.String localProjectId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectIdTracker = false;

        /**
         * field for ProjectType
         */
        protected java.lang.String localProjectType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProjectTypeTracker = false;

        /**
         * field for SmallChannel
         */
        protected java.lang.String localSmallChannel;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSmallChannelTracker = false;

        public boolean isAdverseContractSubjectCodeSpecified() {
            return localAdverseContractSubjectCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAdverseContractSubjectCode() {
            return localAdverseContractSubjectCode;
        }

        /**
         * Auto generated setter method
         * @param param AdverseContractSubjectCode
         */
        public void setAdverseContractSubjectCode(java.lang.String param) {
            localAdverseContractSubjectCodeTracker = param != null;

            this.localAdverseContractSubjectCode = param;
        }

        public boolean isAdverseContractSubjectIdSpecified() {
            return localAdverseContractSubjectIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAdverseContractSubjectId() {
            return localAdverseContractSubjectId;
        }

        /**
         * Auto generated setter method
         * @param param AdverseContractSubjectId
         */
        public void setAdverseContractSubjectId(java.lang.String param) {
            localAdverseContractSubjectIdTracker = param != null;

            this.localAdverseContractSubjectId = param;
        }

        public boolean isAdverseContractSubjectNameSpecified() {
            return localAdverseContractSubjectNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAdverseContractSubjectName() {
            return localAdverseContractSubjectName;
        }

        /**
         * Auto generated setter method
         * @param param AdverseContractSubjectName
         */
        public void setAdverseContractSubjectName(java.lang.String param) {
            localAdverseContractSubjectNameTracker = param != null;

            this.localAdverseContractSubjectName = param;
        }

        public boolean isAfterSalesManagerCodeSpecified() {
            return localAfterSalesManagerCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAfterSalesManagerCode() {
            return localAfterSalesManagerCode;
        }

        /**
         * Auto generated setter method
         * @param param AfterSalesManagerCode
         */
        public void setAfterSalesManagerCode(java.lang.String param) {
            localAfterSalesManagerCodeTracker = param != null;

            this.localAfterSalesManagerCode = param;
        }

        public boolean isAfterSalesManagerIdSpecified() {
            return localAfterSalesManagerIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAfterSalesManagerId() {
            return localAfterSalesManagerId;
        }

        /**
         * Auto generated setter method
         * @param param AfterSalesManagerId
         */
        public void setAfterSalesManagerId(java.lang.String param) {
            localAfterSalesManagerIdTracker = param != null;

            this.localAfterSalesManagerId = param;
        }

        public boolean isAfterSalesManagerNameSpecified() {
            return localAfterSalesManagerNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAfterSalesManagerName() {
            return localAfterSalesManagerName;
        }

        /**
         * Auto generated setter method
         * @param param AfterSalesManagerName
         */
        public void setAfterSalesManagerName(java.lang.String param) {
            localAfterSalesManagerNameTracker = param != null;

            this.localAfterSalesManagerName = param;
        }

        public boolean isBidCompanyCodeSpecified() {
            return localBidCompanyCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBidCompanyCode() {
            return localBidCompanyCode;
        }

        /**
         * Auto generated setter method
         * @param param BidCompanyCode
         */
        public void setBidCompanyCode(java.lang.String param) {
            localBidCompanyCodeTracker = param != null;

            this.localBidCompanyCode = param;
        }

        public boolean isBidCompanyIdSpecified() {
            return localBidCompanyIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBidCompanyId() {
            return localBidCompanyId;
        }

        /**
         * Auto generated setter method
         * @param param BidCompanyId
         */
        public void setBidCompanyId(java.lang.String param) {
            localBidCompanyIdTracker = param != null;

            this.localBidCompanyId = param;
        }

        public boolean isBidCompanyNameSpecified() {
            return localBidCompanyNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBidCompanyName() {
            return localBidCompanyName;
        }

        /**
         * Auto generated setter method
         * @param param BidCompanyName
         */
        public void setBidCompanyName(java.lang.String param) {
            localBidCompanyNameTracker = param != null;

            this.localBidCompanyName = param;
        }

        public boolean isBigChannelSpecified() {
            return localBigChannelTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBigChannel() {
            return localBigChannel;
        }

        /**
         * Auto generated setter method
         * @param param BigChannel
         */
        public void setBigChannel(java.lang.String param) {
            localBigChannelTracker = param != null;

            this.localBigChannel = param;
        }

        public boolean isContractorCodeSpecified() {
            return localContractorCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContractorCode() {
            return localContractorCode;
        }

        /**
         * Auto generated setter method
         * @param param ContractorCode
         */
        public void setContractorCode(java.lang.String param) {
            localContractorCodeTracker = param != null;

            this.localContractorCode = param;
        }

        public boolean isContractorIdSpecified() {
            return localContractorIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContractorId() {
            return localContractorId;
        }

        /**
         * Auto generated setter method
         * @param param ContractorId
         */
        public void setContractorId(java.lang.String param) {
            localContractorIdTracker = param != null;

            this.localContractorId = param;
        }

        public boolean isContractorNameSpecified() {
            return localContractorNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContractorName() {
            return localContractorName;
        }

        /**
         * Auto generated setter method
         * @param param ContractorName
         */
        public void setContractorName(java.lang.String param) {
            localContractorNameTracker = param != null;

            this.localContractorName = param;
        }

        public boolean isCreatedByIdSpecified() {
            return localCreatedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreatedById() {
            return localCreatedById;
        }

        /**
         * Auto generated setter method
         * @param param CreatedById
         */
        public void setCreatedById(java.lang.String param) {
            localCreatedByIdTracker = param != null;

            this.localCreatedById = param;
        }

        public boolean isCustomerDemandAnalysisSpecified() {
            return localCustomerDemandAnalysisTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCustomerDemandAnalysis() {
            return localCustomerDemandAnalysis;
        }

        /**
         * Auto generated setter method
         * @param param CustomerDemandAnalysis
         */
        public void setCustomerDemandAnalysis(java.lang.String param) {
            localCustomerDemandAnalysisTracker = param != null;

            this.localCustomerDemandAnalysis = param;
        }

        public boolean isDesignManagerCodeSpecified() {
            return localDesignManagerCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDesignManagerCode() {
            return localDesignManagerCode;
        }

        /**
         * Auto generated setter method
         * @param param DesignManagerCode
         */
        public void setDesignManagerCode(java.lang.String param) {
            localDesignManagerCodeTracker = param != null;

            this.localDesignManagerCode = param;
        }

        public boolean isDesignManagerIdSpecified() {
            return localDesignManagerIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDesignManagerId() {
            return localDesignManagerId;
        }

        /**
         * Auto generated setter method
         * @param param DesignManagerId
         */
        public void setDesignManagerId(java.lang.String param) {
            localDesignManagerIdTracker = param != null;

            this.localDesignManagerId = param;
        }

        public boolean isDesignManagerNameSpecified() {
            return localDesignManagerNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDesignManagerName() {
            return localDesignManagerName;
        }

        /**
         * Auto generated setter method
         * @param param DesignManagerName
         */
        public void setDesignManagerName(java.lang.String param) {
            localDesignManagerNameTracker = param != null;

            this.localDesignManagerName = param;
        }

        public boolean isDesignTypeSpecified() {
            return localDesignTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDesignType() {
            return localDesignType;
        }

        /**
         * Auto generated setter method
         * @param param DesignType
         */
        public void setDesignType(java.lang.String param) {
            localDesignTypeTracker = param != null;

            this.localDesignType = param;
        }

        public boolean isGeneralContractorCodeSpecified() {
            return localGeneralContractorCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGeneralContractorCode() {
            return localGeneralContractorCode;
        }

        /**
         * Auto generated setter method
         * @param param GeneralContractorCode
         */
        public void setGeneralContractorCode(java.lang.String param) {
            localGeneralContractorCodeTracker = param != null;

            this.localGeneralContractorCode = param;
        }

        public boolean isGeneralContractorIdSpecified() {
            return localGeneralContractorIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGeneralContractorId() {
            return localGeneralContractorId;
        }

        /**
         * Auto generated setter method
         * @param param GeneralContractorId
         */
        public void setGeneralContractorId(java.lang.String param) {
            localGeneralContractorIdTracker = param != null;

            this.localGeneralContractorId = param;
        }

        public boolean isGeneralContractorNameSpecified() {
            return localGeneralContractorNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGeneralContractorName() {
            return localGeneralContractorName;
        }

        /**
         * Auto generated setter method
         * @param param GeneralContractorName
         */
        public void setGeneralContractorName(java.lang.String param) {
            localGeneralContractorNameTracker = param != null;

            this.localGeneralContractorName = param;
        }

        public boolean isHonourAgreementPatternSpecified() {
            return localHonourAgreementPatternTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getHonourAgreementPattern() {
            return localHonourAgreementPattern;
        }

        /**
         * Auto generated setter method
         * @param param HonourAgreementPattern
         */
        public void setHonourAgreementPattern(java.lang.String param) {
            localHonourAgreementPatternTracker = param != null;

            this.localHonourAgreementPattern = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        public boolean isInformationSubmissionTypeSpecified() {
            return localInformationSubmissionTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getInformationSubmissionType() {
            return localInformationSubmissionType;
        }

        /**
         * Auto generated setter method
         * @param param InformationSubmissionType
         */
        public void setInformationSubmissionType(java.lang.String param) {
            localInformationSubmissionTypeTracker = param != null;

            this.localInformationSubmissionType = param;
        }

        public boolean isInstallationTypeSpecified() {
            return localInstallationTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getInstallationType() {
            return localInstallationType;
        }

        /**
         * Auto generated setter method
         * @param param InstallationType
         */
        public void setInstallationType(java.lang.String param) {
            localInstallationTypeTracker = param != null;

            this.localInstallationType = param;
        }

        public boolean isLastModifiedByIdSpecified() {
            return localLastModifiedByIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLastModifiedById() {
            return localLastModifiedById;
        }

        /**
         * Auto generated setter method
         * @param param LastModifiedById
         */
        public void setLastModifiedById(java.lang.String param) {
            localLastModifiedByIdTracker = param != null;

            this.localLastModifiedById = param;
        }

        public boolean isOurContractSubjectCodeSpecified() {
            return localOurContractSubjectCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOurContractSubjectCode() {
            return localOurContractSubjectCode;
        }

        /**
         * Auto generated setter method
         * @param param OurContractSubjectCode
         */
        public void setOurContractSubjectCode(java.lang.String param) {
            localOurContractSubjectCodeTracker = param != null;

            this.localOurContractSubjectCode = param;
        }

        public boolean isOurContractSubjectIdSpecified() {
            return localOurContractSubjectIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOurContractSubjectId() {
            return localOurContractSubjectId;
        }

        /**
         * Auto generated setter method
         * @param param OurContractSubjectId
         */
        public void setOurContractSubjectId(java.lang.String param) {
            localOurContractSubjectIdTracker = param != null;

            this.localOurContractSubjectId = param;
        }

        public boolean isOurContractSubjectNameSpecified() {
            return localOurContractSubjectNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOurContractSubjectName() {
            return localOurContractSubjectName;
        }

        /**
         * Auto generated setter method
         * @param param OurContractSubjectName
         */
        public void setOurContractSubjectName(java.lang.String param) {
            localOurContractSubjectNameTracker = param != null;

            this.localOurContractSubjectName = param;
        }

        public boolean isProjectIdSpecified() {
            return localProjectIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectId() {
            return localProjectId;
        }

        /**
         * Auto generated setter method
         * @param param ProjectId
         */
        public void setProjectId(java.lang.String param) {
            localProjectIdTracker = param != null;

            this.localProjectId = param;
        }

        public boolean isProjectTypeSpecified() {
            return localProjectTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProjectType() {
            return localProjectType;
        }

        /**
         * Auto generated setter method
         * @param param ProjectType
         */
        public void setProjectType(java.lang.String param) {
            localProjectTypeTracker = param != null;

            this.localProjectType = param;
        }

        public boolean isSmallChannelSpecified() {
            return localSmallChannelTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSmallChannel() {
            return localSmallChannel;
        }

        /**
         * Auto generated setter method
         * @param param SmallChannel
         */
        public void setSmallChannel(java.lang.String param) {
            localSmallChannelTracker = param != null;

            this.localSmallChannel = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://project.funnel.api.manage.hps.com/");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":projectRThreeSaveParam", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "projectRThreeSaveParam", xmlWriter);
            }

            if (localAdverseContractSubjectCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "adverseContractSubjectCode", xmlWriter);

                if (localAdverseContractSubjectCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "adverseContractSubjectCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAdverseContractSubjectCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localAdverseContractSubjectIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "adverseContractSubjectId",
                    xmlWriter);

                if (localAdverseContractSubjectId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "adverseContractSubjectId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAdverseContractSubjectId);
                }

                xmlWriter.writeEndElement();
            }

            if (localAdverseContractSubjectNameTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "adverseContractSubjectName", xmlWriter);

                if (localAdverseContractSubjectName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "adverseContractSubjectName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAdverseContractSubjectName);
                }

                xmlWriter.writeEndElement();
            }

            if (localAfterSalesManagerCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "afterSalesManagerCode",
                    xmlWriter);

                if (localAfterSalesManagerCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "afterSalesManagerCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAfterSalesManagerCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localAfterSalesManagerIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "afterSalesManagerId",
                    xmlWriter);

                if (localAfterSalesManagerId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "afterSalesManagerId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAfterSalesManagerId);
                }

                xmlWriter.writeEndElement();
            }

            if (localAfterSalesManagerNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "afterSalesManagerName",
                    xmlWriter);

                if (localAfterSalesManagerName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "afterSalesManagerName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAfterSalesManagerName);
                }

                xmlWriter.writeEndElement();
            }

            if (localBidCompanyCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "bidCompanyCode", xmlWriter);

                if (localBidCompanyCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "bidCompanyCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBidCompanyCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localBidCompanyIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "bidCompanyId", xmlWriter);

                if (localBidCompanyId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "bidCompanyId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBidCompanyId);
                }

                xmlWriter.writeEndElement();
            }

            if (localBidCompanyNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "bidCompanyName", xmlWriter);

                if (localBidCompanyName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "bidCompanyName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBidCompanyName);
                }

                xmlWriter.writeEndElement();
            }

            if (localBigChannelTracker) {
                namespace = "";
                writeStartElement(null, namespace, "bigChannel", xmlWriter);

                if (localBigChannel == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "bigChannel cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBigChannel);
                }

                xmlWriter.writeEndElement();
            }

            if (localContractorCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "contractorCode", xmlWriter);

                if (localContractorCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "contractorCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localContractorCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localContractorIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "contractorId", xmlWriter);

                if (localContractorId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "contractorId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localContractorId);
                }

                xmlWriter.writeEndElement();
            }

            if (localContractorNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "contractorName", xmlWriter);

                if (localContractorName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "contractorName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localContractorName);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreatedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "createdById", xmlWriter);

                if (localCreatedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "createdById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreatedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localCustomerDemandAnalysisTracker) {
                namespace = "";
                writeStartElement(null, namespace, "customerDemandAnalysis",
                    xmlWriter);

                if (localCustomerDemandAnalysis == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "customerDemandAnalysis cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCustomerDemandAnalysis);
                }

                xmlWriter.writeEndElement();
            }

            if (localDesignManagerCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "designManagerCode",
                    xmlWriter);

                if (localDesignManagerCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "designManagerCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDesignManagerCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localDesignManagerIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "designManagerId", xmlWriter);

                if (localDesignManagerId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "designManagerId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDesignManagerId);
                }

                xmlWriter.writeEndElement();
            }

            if (localDesignManagerNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "designManagerName",
                    xmlWriter);

                if (localDesignManagerName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "designManagerName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDesignManagerName);
                }

                xmlWriter.writeEndElement();
            }

            if (localDesignTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "designType", xmlWriter);

                if (localDesignType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "designType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localDesignType);
                }

                xmlWriter.writeEndElement();
            }

            if (localGeneralContractorCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "generalContractorCode",
                    xmlWriter);

                if (localGeneralContractorCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "generalContractorCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localGeneralContractorCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localGeneralContractorIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "generalContractorId",
                    xmlWriter);

                if (localGeneralContractorId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "generalContractorId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localGeneralContractorId);
                }

                xmlWriter.writeEndElement();
            }

            if (localGeneralContractorNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "generalContractorName",
                    xmlWriter);

                if (localGeneralContractorName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "generalContractorName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localGeneralContractorName);
                }

                xmlWriter.writeEndElement();
            }

            if (localHonourAgreementPatternTracker) {
                namespace = "";
                writeStartElement(null, namespace, "honourAgreementPattern",
                    xmlWriter);

                if (localHonourAgreementPattern == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "honourAgreementPattern cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localHonourAgreementPattern);
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            if (localInformationSubmissionTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "informationSubmissionType",
                    xmlWriter);

                if (localInformationSubmissionType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "informationSubmissionType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localInformationSubmissionType);
                }

                xmlWriter.writeEndElement();
            }

            if (localInstallationTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "installationType", xmlWriter);

                if (localInstallationType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "installationType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localInstallationType);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastModifiedByIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lastModifiedById", xmlWriter);

                if (localLastModifiedById == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastModifiedById cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastModifiedById);
                }

                xmlWriter.writeEndElement();
            }

            if (localOurContractSubjectCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ourContractSubjectCode",
                    xmlWriter);

                if (localOurContractSubjectCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ourContractSubjectCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOurContractSubjectCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localOurContractSubjectIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ourContractSubjectId",
                    xmlWriter);

                if (localOurContractSubjectId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ourContractSubjectId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOurContractSubjectId);
                }

                xmlWriter.writeEndElement();
            }

            if (localOurContractSubjectNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ourContractSubjectName",
                    xmlWriter);

                if (localOurContractSubjectName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ourContractSubjectName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOurContractSubjectName);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectId", xmlWriter);

                if (localProjectId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectId);
                }

                xmlWriter.writeEndElement();
            }

            if (localProjectTypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "projectType", xmlWriter);

                if (localProjectType == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "projectType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localProjectType);
                }

                xmlWriter.writeEndElement();
            }

            if (localSmallChannelTracker) {
                namespace = "";
                writeStartElement(null, namespace, "smallChannel", xmlWriter);

                if (localSmallChannel == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "smallChannel cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSmallChannel);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://project.funnel.api.manage.hps.com/")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ProjectRThreeSaveParam parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ProjectRThreeSaveParam object = new ProjectRThreeSaveParam();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"projectRThreeSaveParam".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ProjectRThreeSaveParam) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "adverseContractSubjectCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "adverseContractSubjectCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "adverseContractSubjectCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAdverseContractSubjectCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "adverseContractSubjectId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "adverseContractSubjectId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "adverseContractSubjectId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAdverseContractSubjectId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "adverseContractSubjectName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "adverseContractSubjectName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "adverseContractSubjectName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAdverseContractSubjectName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "afterSalesManagerCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "afterSalesManagerCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "afterSalesManagerCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAfterSalesManagerCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "afterSalesManagerId").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "afterSalesManagerId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "afterSalesManagerId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAfterSalesManagerId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "afterSalesManagerName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "afterSalesManagerName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "afterSalesManagerName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAfterSalesManagerName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "bidCompanyCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "bidCompanyCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "bidCompanyCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBidCompanyCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "bidCompanyId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "bidCompanyId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "bidCompanyId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBidCompanyId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "bidCompanyName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "bidCompanyName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "bidCompanyName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBidCompanyName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "bigChannel").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "bigChannel").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "bigChannel" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBigChannel(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "contractorCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "contractorCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "contractorCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContractorCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "contractorId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "contractorId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "contractorId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContractorId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "contractorName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "contractorName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "contractorName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setContractorName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "createdById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "createdById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreatedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "customerDemandAnalysis").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "customerDemandAnalysis").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "customerDemandAnalysis" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCustomerDemandAnalysis(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "designManagerCode").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "designManagerCode").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "designManagerCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDesignManagerCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "designManagerId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "designManagerId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "designManagerId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDesignManagerId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "designManagerName").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "designManagerName").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "designManagerName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDesignManagerName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "designType").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "designType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "designType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDesignType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "generalContractorCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "generalContractorCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "generalContractorCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGeneralContractorCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "generalContractorId").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "generalContractorId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "generalContractorId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGeneralContractorId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "generalContractorName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "generalContractorName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "generalContractorName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGeneralContractorName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "honourAgreementPattern").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "honourAgreementPattern").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "honourAgreementPattern" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHonourAgreementPattern(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "informationSubmissionType").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "informationSubmissionType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "informationSubmissionType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInformationSubmissionType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "installationType").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "installationType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "installationType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInstallationType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "lastModifiedById").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastModifiedById" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastModifiedById(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ourContractSubjectCode").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "ourContractSubjectCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ourContractSubjectCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOurContractSubjectCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ourContractSubjectId").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "ourContractSubjectId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ourContractSubjectId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOurContractSubjectId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ourContractSubjectName").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "ourContractSubjectName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ourContractSubjectName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOurContractSubjectName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "projectType").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "projectType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "projectType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setProjectType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "smallChannel").equals(
                                reader.getName())) ||
                            new javax.xml.namespace.QName("", "smallChannel").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "smallChannel" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSmallChannel(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }
}
